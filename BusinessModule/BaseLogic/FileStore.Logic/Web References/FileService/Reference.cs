//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码是由 Microsoft.VSDesigner 4.0.30319.42000 版自动生成。
// 
#pragma warning disable 1591

namespace FileStore.Logic.FileService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="InnerServiceSoap", Namespace="http://tempuri.org/")]
    public partial class InnerService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetFileBytesOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeletePhysicalFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExistFileOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public InnerService() {
            this.Url = global::FileStore.Logic.Properties.Settings.Default.FileStore_Logic_FileService_InnerService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetFileBytesCompletedEventHandler GetFileBytesCompleted;
        
        /// <remarks/>
        public event DeletePhysicalFileCompletedEventHandler DeletePhysicalFileCompleted;
        
        /// <remarks/>
        public event ExistFileCompletedEventHandler ExistFileCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFileBytes", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] GetFileBytes(string fileFullPath, int pos, int length) {
            object[] results = this.Invoke("GetFileBytes", new object[] {
                        fileFullPath,
                        pos,
                        length});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void GetFileBytesAsync(string fileFullPath, int pos, int length) {
            this.GetFileBytesAsync(fileFullPath, pos, length, null);
        }
        
        /// <remarks/>
        public void GetFileBytesAsync(string fileFullPath, int pos, int length, object userState) {
            if ((this.GetFileBytesOperationCompleted == null)) {
                this.GetFileBytesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFileBytesOperationCompleted);
            }
            this.InvokeAsync("GetFileBytes", new object[] {
                        fileFullPath,
                        pos,
                        length}, this.GetFileBytesOperationCompleted, userState);
        }
        
        private void OnGetFileBytesOperationCompleted(object arg) {
            if ((this.GetFileBytesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFileBytesCompleted(this, new GetFileBytesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeletePhysicalFile", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeletePhysicalFile(string fileFullPath) {
            this.Invoke("DeletePhysicalFile", new object[] {
                        fileFullPath});
        }
        
        /// <remarks/>
        public void DeletePhysicalFileAsync(string fileFullPath) {
            this.DeletePhysicalFileAsync(fileFullPath, null);
        }
        
        /// <remarks/>
        public void DeletePhysicalFileAsync(string fileFullPath, object userState) {
            if ((this.DeletePhysicalFileOperationCompleted == null)) {
                this.DeletePhysicalFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeletePhysicalFileOperationCompleted);
            }
            this.InvokeAsync("DeletePhysicalFile", new object[] {
                        fileFullPath}, this.DeletePhysicalFileOperationCompleted, userState);
        }
        
        private void OnDeletePhysicalFileOperationCompleted(object arg) {
            if ((this.DeletePhysicalFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeletePhysicalFileCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ExistFile", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ExistFile(string fileFullPath) {
            object[] results = this.Invoke("ExistFile", new object[] {
                        fileFullPath});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ExistFileAsync(string fileFullPath) {
            this.ExistFileAsync(fileFullPath, null);
        }
        
        /// <remarks/>
        public void ExistFileAsync(string fileFullPath, object userState) {
            if ((this.ExistFileOperationCompleted == null)) {
                this.ExistFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExistFileOperationCompleted);
            }
            this.InvokeAsync("ExistFile", new object[] {
                        fileFullPath}, this.ExistFileOperationCompleted, userState);
        }
        
        private void OnExistFileOperationCompleted(object arg) {
            if ((this.ExistFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExistFileCompleted(this, new ExistFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetFileBytesCompletedEventHandler(object sender, GetFileBytesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFileBytesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFileBytesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void DeletePhysicalFileCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void ExistFileCompletedEventHandler(object sender, ExistFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExistFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExistFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591