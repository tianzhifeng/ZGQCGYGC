//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码是由 Microsoft.VSDesigner 4.0.30319.42000 版自动生成。
// 
#pragma warning disable 1591

namespace FileStore.Logic.MasterService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="MasterServiceSoap", Namespace="http://tempuri.org/")]
    public partial class MasterService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetFileInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetFileStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateFileServerNamesOperationCompleted;
        
        private System.Threading.SendOrPostCallback DelFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback DelFileByRelateIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeletePhysicalFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFileNamesByRelateIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetFileBaseAttrOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFileSizeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFileNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAvailableRootFolderOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllRootFolderInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFormateFileOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public MasterService() {
            this.Url = global::FileStore.Logic.Properties.Settings.Default.FileStore_Logic_MasterService_MasterService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetFileInfoCompletedEventHandler GetFileInfoCompleted;
        
        /// <remarks/>
        public event AddFileCompletedEventHandler AddFileCompleted;
        
        /// <remarks/>
        public event UpdateFileCompletedEventHandler UpdateFileCompleted;
        
        /// <remarks/>
        public event SetFileStatusCompletedEventHandler SetFileStatusCompleted;
        
        /// <remarks/>
        public event UpdateFileServerNamesCompletedEventHandler UpdateFileServerNamesCompleted;
        
        /// <remarks/>
        public event DelFileCompletedEventHandler DelFileCompleted;
        
        /// <remarks/>
        public event DelFileByRelateIdCompletedEventHandler DelFileByRelateIdCompleted;
        
        /// <remarks/>
        public event DeletePhysicalFileCompletedEventHandler DeletePhysicalFileCompleted;
        
        /// <remarks/>
        public event GetFileNamesByRelateIdCompletedEventHandler GetFileNamesByRelateIdCompleted;
        
        /// <remarks/>
        public event SetFileBaseAttrCompletedEventHandler SetFileBaseAttrCompleted;
        
        /// <remarks/>
        public event GetFileSizeCompletedEventHandler GetFileSizeCompleted;
        
        /// <remarks/>
        public event GetFileNameCompletedEventHandler GetFileNameCompleted;
        
        /// <remarks/>
        public event GetAvailableRootFolderCompletedEventHandler GetAvailableRootFolderCompleted;
        
        /// <remarks/>
        public event GetAllRootFolderInfoCompletedEventHandler GetAllRootFolderInfoCompleted;
        
        /// <remarks/>
        public event GetFormateFileCompletedEventHandler GetFormateFileCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFileInfo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public FsFileInfo GetFileInfo(string fileName, string serverName) {
            object[] results = this.Invoke("GetFileInfo", new object[] {
                        fileName,
                        serverName});
            return ((FsFileInfo)(results[0]));
        }
        
        /// <remarks/>
        public void GetFileInfoAsync(string fileName, string serverName) {
            this.GetFileInfoAsync(fileName, serverName, null);
        }
        
        /// <remarks/>
        public void GetFileInfoAsync(string fileName, string serverName, object userState) {
            if ((this.GetFileInfoOperationCompleted == null)) {
                this.GetFileInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFileInfoOperationCompleted);
            }
            this.InvokeAsync("GetFileInfo", new object[] {
                        fileName,
                        serverName}, this.GetFileInfoOperationCompleted, userState);
        }
        
        private void OnGetFileInfoOperationCompleted(object arg) {
            if ((this.GetFileInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFileInfoCompleted(this, new GetFileInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddFile", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public FsFileInfo AddFile(string serverName, string destfileName, long fileSize, string relateId, string fileCode, string version, string src) {
            object[] results = this.Invoke("AddFile", new object[] {
                        serverName,
                        destfileName,
                        fileSize,
                        relateId,
                        fileCode,
                        version,
                        src});
            return ((FsFileInfo)(results[0]));
        }
        
        /// <remarks/>
        public void AddFileAsync(string serverName, string destfileName, long fileSize, string relateId, string fileCode, string version, string src) {
            this.AddFileAsync(serverName, destfileName, fileSize, relateId, fileCode, version, src, null);
        }
        
        /// <remarks/>
        public void AddFileAsync(string serverName, string destfileName, long fileSize, string relateId, string fileCode, string version, string src, object userState) {
            if ((this.AddFileOperationCompleted == null)) {
                this.AddFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddFileOperationCompleted);
            }
            this.InvokeAsync("AddFile", new object[] {
                        serverName,
                        destfileName,
                        fileSize,
                        relateId,
                        fileCode,
                        version,
                        src}, this.AddFileOperationCompleted, userState);
        }
        
        private void OnAddFileOperationCompleted(object arg) {
            if ((this.AddFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddFileCompleted(this, new AddFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateFile", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public FsFileInfo UpdateFile(string serverName, string destfileName, long fileSize, string relateId, string fileCode, string version, string src) {
            object[] results = this.Invoke("UpdateFile", new object[] {
                        serverName,
                        destfileName,
                        fileSize,
                        relateId,
                        fileCode,
                        version,
                        src});
            return ((FsFileInfo)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateFileAsync(string serverName, string destfileName, long fileSize, string relateId, string fileCode, string version, string src) {
            this.UpdateFileAsync(serverName, destfileName, fileSize, relateId, fileCode, version, src, null);
        }
        
        /// <remarks/>
        public void UpdateFileAsync(string serverName, string destfileName, long fileSize, string relateId, string fileCode, string version, string src, object userState) {
            if ((this.UpdateFileOperationCompleted == null)) {
                this.UpdateFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateFileOperationCompleted);
            }
            this.InvokeAsync("UpdateFile", new object[] {
                        serverName,
                        destfileName,
                        fileSize,
                        relateId,
                        fileCode,
                        version,
                        src}, this.UpdateFileOperationCompleted, userState);
        }
        
        private void OnUpdateFileOperationCompleted(object arg) {
            if ((this.UpdateFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateFileCompleted(this, new UpdateFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetFileStatus", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetFileStatus(string fileName, string status) {
            this.Invoke("SetFileStatus", new object[] {
                        fileName,
                        status});
        }
        
        /// <remarks/>
        public void SetFileStatusAsync(string fileName, string status) {
            this.SetFileStatusAsync(fileName, status, null);
        }
        
        /// <remarks/>
        public void SetFileStatusAsync(string fileName, string status, object userState) {
            if ((this.SetFileStatusOperationCompleted == null)) {
                this.SetFileStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetFileStatusOperationCompleted);
            }
            this.InvokeAsync("SetFileStatus", new object[] {
                        fileName,
                        status}, this.SetFileStatusOperationCompleted, userState);
        }
        
        private void OnSetFileStatusOperationCompleted(object arg) {
            if ((this.SetFileStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetFileStatusCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateFileServerNames", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateFileServerNames(string fileName, string serverName) {
            this.Invoke("UpdateFileServerNames", new object[] {
                        fileName,
                        serverName});
        }
        
        /// <remarks/>
        public void UpdateFileServerNamesAsync(string fileName, string serverName) {
            this.UpdateFileServerNamesAsync(fileName, serverName, null);
        }
        
        /// <remarks/>
        public void UpdateFileServerNamesAsync(string fileName, string serverName, object userState) {
            if ((this.UpdateFileServerNamesOperationCompleted == null)) {
                this.UpdateFileServerNamesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateFileServerNamesOperationCompleted);
            }
            this.InvokeAsync("UpdateFileServerNames", new object[] {
                        fileName,
                        serverName}, this.UpdateFileServerNamesOperationCompleted, userState);
        }
        
        private void OnUpdateFileServerNamesOperationCompleted(object arg) {
            if ((this.UpdateFileServerNamesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateFileServerNamesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DelFile", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DelFile(string fileName, string delReason) {
            this.Invoke("DelFile", new object[] {
                        fileName,
                        delReason});
        }
        
        /// <remarks/>
        public void DelFileAsync(string fileName, string delReason) {
            this.DelFileAsync(fileName, delReason, null);
        }
        
        /// <remarks/>
        public void DelFileAsync(string fileName, string delReason, object userState) {
            if ((this.DelFileOperationCompleted == null)) {
                this.DelFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDelFileOperationCompleted);
            }
            this.InvokeAsync("DelFile", new object[] {
                        fileName,
                        delReason}, this.DelFileOperationCompleted, userState);
        }
        
        private void OnDelFileOperationCompleted(object arg) {
            if ((this.DelFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DelFileCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DelFileByRelateId", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DelFileByRelateId(string relateId, string delReason) {
            this.Invoke("DelFileByRelateId", new object[] {
                        relateId,
                        delReason});
        }
        
        /// <remarks/>
        public void DelFileByRelateIdAsync(string relateId, string delReason) {
            this.DelFileByRelateIdAsync(relateId, delReason, null);
        }
        
        /// <remarks/>
        public void DelFileByRelateIdAsync(string relateId, string delReason, object userState) {
            if ((this.DelFileByRelateIdOperationCompleted == null)) {
                this.DelFileByRelateIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDelFileByRelateIdOperationCompleted);
            }
            this.InvokeAsync("DelFileByRelateId", new object[] {
                        relateId,
                        delReason}, this.DelFileByRelateIdOperationCompleted, userState);
        }
        
        private void OnDelFileByRelateIdOperationCompleted(object arg) {
            if ((this.DelFileByRelateIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DelFileByRelateIdCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeletePhysicalFile", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeletePhysicalFile(string fileName) {
            this.Invoke("DeletePhysicalFile", new object[] {
                        fileName});
        }
        
        /// <remarks/>
        public void DeletePhysicalFileAsync(string fileName) {
            this.DeletePhysicalFileAsync(fileName, null);
        }
        
        /// <remarks/>
        public void DeletePhysicalFileAsync(string fileName, object userState) {
            if ((this.DeletePhysicalFileOperationCompleted == null)) {
                this.DeletePhysicalFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeletePhysicalFileOperationCompleted);
            }
            this.InvokeAsync("DeletePhysicalFile", new object[] {
                        fileName}, this.DeletePhysicalFileOperationCompleted, userState);
        }
        
        private void OnDeletePhysicalFileOperationCompleted(object arg) {
            if ((this.DeletePhysicalFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeletePhysicalFileCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFileNamesByRelateId", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetFileNamesByRelateId(string relateId) {
            object[] results = this.Invoke("GetFileNamesByRelateId", new object[] {
                        relateId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetFileNamesByRelateIdAsync(string relateId) {
            this.GetFileNamesByRelateIdAsync(relateId, null);
        }
        
        /// <remarks/>
        public void GetFileNamesByRelateIdAsync(string relateId, object userState) {
            if ((this.GetFileNamesByRelateIdOperationCompleted == null)) {
                this.GetFileNamesByRelateIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFileNamesByRelateIdOperationCompleted);
            }
            this.InvokeAsync("GetFileNamesByRelateId", new object[] {
                        relateId}, this.GetFileNamesByRelateIdOperationCompleted, userState);
        }
        
        private void OnGetFileNamesByRelateIdOperationCompleted(object arg) {
            if ((this.GetFileNamesByRelateIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFileNamesByRelateIdCompleted(this, new GetFileNamesByRelateIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetFileBaseAttr", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetFileBaseAttr(string fileId, string relateId, string fileCode, string version) {
            this.Invoke("SetFileBaseAttr", new object[] {
                        fileId,
                        relateId,
                        fileCode,
                        version});
        }
        
        /// <remarks/>
        public void SetFileBaseAttrAsync(string fileId, string relateId, string fileCode, string version) {
            this.SetFileBaseAttrAsync(fileId, relateId, fileCode, version, null);
        }
        
        /// <remarks/>
        public void SetFileBaseAttrAsync(string fileId, string relateId, string fileCode, string version, object userState) {
            if ((this.SetFileBaseAttrOperationCompleted == null)) {
                this.SetFileBaseAttrOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetFileBaseAttrOperationCompleted);
            }
            this.InvokeAsync("SetFileBaseAttr", new object[] {
                        fileId,
                        relateId,
                        fileCode,
                        version}, this.SetFileBaseAttrOperationCompleted, userState);
        }
        
        private void OnSetFileBaseAttrOperationCompleted(object arg) {
            if ((this.SetFileBaseAttrCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetFileBaseAttrCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFileSize", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetFileSize(string fileId) {
            object[] results = this.Invoke("GetFileSize", new object[] {
                        fileId});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetFileSizeAsync(string fileId) {
            this.GetFileSizeAsync(fileId, null);
        }
        
        /// <remarks/>
        public void GetFileSizeAsync(string fileId, object userState) {
            if ((this.GetFileSizeOperationCompleted == null)) {
                this.GetFileSizeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFileSizeOperationCompleted);
            }
            this.InvokeAsync("GetFileSize", new object[] {
                        fileId}, this.GetFileSizeOperationCompleted, userState);
        }
        
        private void OnGetFileSizeOperationCompleted(object arg) {
            if ((this.GetFileSizeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFileSizeCompleted(this, new GetFileSizeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFileName", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetFileName(string fileID) {
            object[] results = this.Invoke("GetFileName", new object[] {
                        fileID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetFileNameAsync(string fileID) {
            this.GetFileNameAsync(fileID, null);
        }
        
        /// <remarks/>
        public void GetFileNameAsync(string fileID, object userState) {
            if ((this.GetFileNameOperationCompleted == null)) {
                this.GetFileNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFileNameOperationCompleted);
            }
            this.InvokeAsync("GetFileName", new object[] {
                        fileID}, this.GetFileNameOperationCompleted, userState);
        }
        
        private void OnGetFileNameOperationCompleted(object arg) {
            if ((this.GetFileNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFileNameCompleted(this, new GetFileNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAvailableRootFolder", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAvailableRootFolder(string serverName, string src, string extName) {
            object[] results = this.Invoke("GetAvailableRootFolder", new object[] {
                        serverName,
                        src,
                        extName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAvailableRootFolderAsync(string serverName, string src, string extName) {
            this.GetAvailableRootFolderAsync(serverName, src, extName, null);
        }
        
        /// <remarks/>
        public void GetAvailableRootFolderAsync(string serverName, string src, string extName, object userState) {
            if ((this.GetAvailableRootFolderOperationCompleted == null)) {
                this.GetAvailableRootFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAvailableRootFolderOperationCompleted);
            }
            this.InvokeAsync("GetAvailableRootFolder", new object[] {
                        serverName,
                        src,
                        extName}, this.GetAvailableRootFolderOperationCompleted, userState);
        }
        
        private void OnGetAvailableRootFolderOperationCompleted(object arg) {
            if ((this.GetAvailableRootFolderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAvailableRootFolderCompleted(this, new GetAvailableRootFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAllRootFolderInfo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public RootFolderInfo[] GetAllRootFolderInfo(string serverName) {
            object[] results = this.Invoke("GetAllRootFolderInfo", new object[] {
                        serverName});
            return ((RootFolderInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAllRootFolderInfoAsync(string serverName) {
            this.GetAllRootFolderInfoAsync(serverName, null);
        }
        
        /// <remarks/>
        public void GetAllRootFolderInfoAsync(string serverName, object userState) {
            if ((this.GetAllRootFolderInfoOperationCompleted == null)) {
                this.GetAllRootFolderInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllRootFolderInfoOperationCompleted);
            }
            this.InvokeAsync("GetAllRootFolderInfo", new object[] {
                        serverName}, this.GetAllRootFolderInfoOperationCompleted, userState);
        }
        
        private void OnGetAllRootFolderInfoOperationCompleted(object arg) {
            if ((this.GetAllRootFolderInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllRootFolderInfoCompleted(this, new GetAllRootFolderInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFormateFile", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetFormateFile(string fileId, string format) {
            object[] results = this.Invoke("GetFormateFile", new object[] {
                        fileId,
                        format});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetFormateFileAsync(string fileId, string format) {
            this.GetFormateFileAsync(fileId, format, null);
        }
        
        /// <remarks/>
        public void GetFormateFileAsync(string fileId, string format, object userState) {
            if ((this.GetFormateFileOperationCompleted == null)) {
                this.GetFormateFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFormateFileOperationCompleted);
            }
            this.InvokeAsync("GetFormateFile", new object[] {
                        fileId,
                        format}, this.GetFormateFileOperationCompleted, userState);
        }
        
        private void OnGetFormateFileOperationCompleted(object arg) {
            if ((this.GetFormateFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFormateFileCompleted(this, new GetFormateFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class FsFileInfo {
        
        private string fileNameField;
        
        private long fileSizeField;
        
        private string fileFullPathField;
        
        private string[] fileFullPathListField;
        
        private string srcFileFullPathField;
        
        private string srcFileServiceUrlField;
        
        /// <remarks/>
        public string FileName {
            get {
                return this.fileNameField;
            }
            set {
                this.fileNameField = value;
            }
        }
        
        /// <remarks/>
        public long FileSize {
            get {
                return this.fileSizeField;
            }
            set {
                this.fileSizeField = value;
            }
        }
        
        /// <remarks/>
        public string FileFullPath {
            get {
                return this.fileFullPathField;
            }
            set {
                this.fileFullPathField = value;
            }
        }
        
        /// <remarks/>
        public string[] FileFullPathList {
            get {
                return this.fileFullPathListField;
            }
            set {
                this.fileFullPathListField = value;
            }
        }
        
        /// <remarks/>
        public string SrcFileFullPath {
            get {
                return this.srcFileFullPathField;
            }
            set {
                this.srcFileFullPathField = value;
            }
        }
        
        /// <remarks/>
        public string SrcFileServiceUrl {
            get {
                return this.srcFileServiceUrlField;
            }
            set {
                this.srcFileServiceUrlField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class RootFolderInfo {
        
        private string rootFolderPathField;
        
        private string userNameField;
        
        private string pwdField;
        
        /// <remarks/>
        public string RootFolderPath {
            get {
                return this.rootFolderPathField;
            }
            set {
                this.rootFolderPathField = value;
            }
        }
        
        /// <remarks/>
        public string UserName {
            get {
                return this.userNameField;
            }
            set {
                this.userNameField = value;
            }
        }
        
        /// <remarks/>
        public string Pwd {
            get {
                return this.pwdField;
            }
            set {
                this.pwdField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetFileInfoCompletedEventHandler(object sender, GetFileInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFileInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFileInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public FsFileInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((FsFileInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void AddFileCompletedEventHandler(object sender, AddFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public FsFileInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((FsFileInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void UpdateFileCompletedEventHandler(object sender, UpdateFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public FsFileInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((FsFileInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void SetFileStatusCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void UpdateFileServerNamesCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void DelFileCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void DelFileByRelateIdCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void DeletePhysicalFileCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetFileNamesByRelateIdCompletedEventHandler(object sender, GetFileNamesByRelateIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFileNamesByRelateIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFileNamesByRelateIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void SetFileBaseAttrCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetFileSizeCompletedEventHandler(object sender, GetFileSizeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFileSizeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFileSizeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetFileNameCompletedEventHandler(object sender, GetFileNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFileNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFileNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetAvailableRootFolderCompletedEventHandler(object sender, GetAvailableRootFolderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAvailableRootFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAvailableRootFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetAllRootFolderInfoCompletedEventHandler(object sender, GetAllRootFolderInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllRootFolderInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllRootFolderInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public RootFolderInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((RootFolderInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetFormateFileCompletedEventHandler(object sender, GetFormateFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFormateFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFormateFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591