@{
    ViewBag.Title = "TreeList";
}
@using Config.Logic;
<script src="@Url.Content("/EPC/Scripts/Design/Bom/jquery.tmpl.js")" type="text/javascript"></script>
<div class="mini-toolbar" style="padding: 0px; border-bottom: 0;">
    <table style="width: 100%;">
        <tr>
            <td style="width: 100%;">
                @{
                    if (ViewBag.FlowEnd)
                    {
                        <a class="mini-button" iconcls="icon-add" onclick="upgrad()" plain="true">编辑升版</a>
                        <a class="mini-button" iconcls="icon-excel" onclick="exportToExcel" plain="true">导出Excel</a>
                    }
                    else
                    {
                        if (ViewBag.FlowPhase == "Processing")
                        {
                            <a class="mini-button" iconcls="icon-save" onclick="saveData();" plain="true">保存</a>
                            <a class="mini-button" iconcls="icon-add" onclick="onAdd" plain="true">下方插入行</a>
                            <a class="mini-button" iconcls="icon-remove" onclick="onRemove" plain="true">删除行</a>
                            <a class="mini-menubutton" iconcls="icon-add" plain="true" menu="#popupMenu">导入</a>
                            <a class="mini-button" iconcls="icon-flowstart" onclick="flowTrace()" plain="true">流程跟踪</a>
                        }
                        else
                        {
                            <a class="mini-button" iconcls="icon-edit" onclick="startFlow" plain="true">提交审批</a>
                            <a class="mini-button" iconcls="icon-save" onclick="saveData();" plain="true">保存</a>
                            <a class="mini-button" iconcls="icon-add" onclick="onAdd" plain="true">下方插入行</a>
                            <a class="mini-button" iconcls="icon-remove" onclick="onRemove" plain="true">删除行</a>
                            <a class="mini-button" iconcls="icon-cancel" onclick="revert();" plain="true">撤销升版</a>
                            <a class="mini-menubutton" iconcls="icon-add" plain="true" menu="#popupMenu">导入</a>
                            <a class="mini-button" iconcls="icon-excel" onclick="exportToExcel" plain="true">导出Excel</a>
                        }
                    }
                }
            </td>
            <td style="white-space: nowrap;">
                当前版本：<a href="javascript:void();" onclick="viewVersionList();">@ViewBag.VersionNo</a>
                &nbsp;  &nbsp;  &nbsp;
                展开至：<input name="ExpandedNodeType" class="mini-combobox" style="width: 100px;" textfield="text" valuefield="value" data="NodeType" allowinput="false"
                           onvaluechanged="collapseLevel" value="all" />
                &nbsp;
                显示：<input name="ShowType" class="mini-combobox" style="width: 100px;" textfield="text" valuefield="value" data="showType" allowinput="false"
                          onvaluechanged="onShowTypeChanged" value="New" /> &nbsp;
                @{
                    if (ViewBag.FlowEnd)
                    {
                    }
                    else
                    {
                        <div id="showAll" name="showAll" checked="true" class="mini-checkbox" text="显示所有结构" onvaluechanged="onCheckBoxValueChanged"></div>
                    }
                }
                &nbsp;
            </td>
        </tr>
    </table>
</div>
<div class="mini-fit">
    @{
        var versionID = ViewBag.VersionID;
        var url = "GetVersionTreeList?VersionID=" + versionID + "&showAllPBS=True&ShowType=New";
        if (ViewBag.FlowEnd)
        {
            url = "GetVersionTreeList?VersionID=" + versionID + "&showAllPBS=False&ShowType=New";
        }
        <div id="dataTree" class="mini-treegrid" style="width:100%;height:100%;" allowcellselect="true" editnextonenterkey="true" editnextrowcell="true" allowcelledit="true"
             url="@url" showtreeicon="true" ondrawcell="onDrawingCell" allowcellwrap="true" oncellbeginedit="OnCellBeginEdit" onload="onload" multiselect="true"
             treecolumn="Name" idfield="ID" parentfield="ParentID" resultastree="false" expandonload="true" iconfield="NodeType" contextmenu="#gridMenu"
             allowresize="false" fitcolumns="false" allowdrag="true" allowdrop="true" allowleafdropin="true" ongivefeedback="onGiveFeedback" virtualscroll="@ViewBag.VirtualScroll"
             ondrop="onNodeDrop">
            <div property="columns">
                <div type="checkcolumn"></div>
                <div type="indexcolumn">
                </div>
                @{
                    var columnDefines = ViewBag.GridDefine as List<Dictionary<string, object>>;
                    foreach (var columnDefine in columnDefines)
                    {
                        var inputType = columnDefine.GetValue("ItemType");
                        var inputClass = "mini-" + inputType;
                        var title = columnDefine.GetValue("header");
                        if (inputType == "autocomplete")
                        {
                            <div name="@columnDefine.GetValue("displayfield")" field="@columnDefine.GetValue("field")" displayfield="@columnDefine.GetValue("displayfield")" width="@columnDefine.GetValue("width")" headeralign="center" allowsort="false"
                                 align="@columnDefine.GetValue("align")" visible="@columnDefine.GetValue("Visible")" vtype="@columnDefine.GetValue("Required")">
                                @title
                                <div property="editor" popupwidth="600" class="mini-autocomplete" textfield="Name" valuefield="ID"
                                     style="width: 100%;" url="GetTemplate?MajorCode=@ViewBag.MajorCode" onvaluechanged="onAutoCompleteValueChanged">
                                    <div property="columns">
                                        <div header="设备名称" field="Name" width="120">
                                        </div>
                                        <div header="物资编码" field="Number" width="120">
                                        </div>
                                        <div header="规格" field="Size" width="120">
                                        </div>
                                        <div header="型号" field="Model" width="120">
                                        </div>
                                        <div header="材质" field="Material" width="120">
                                        </div>
                                        <div header="品牌" field="Brand" width="120">
                                        </div>
                                        <div header="连接方式" field="ConnectionMode" width="120">
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                        else if (inputType == "combox")
                        {
                            <div name="@columnDefine.GetValue("field")" field="@columnDefine.GetValue("field")" width="@columnDefine.GetValue("width")" headeralign="center" allowsort="false"
                                 align="@columnDefine.GetValue("align")" visible="@columnDefine.GetValue("Visible")" vtype="@columnDefine.GetValue("Required")">
                                @title
                                <input property="editor" class="@inputClass" style="width:100%;" textfield="text" valuefield="value" data="@columnDefine.GetValue("field")" />
                            </div>
                        }
                        else if (inputType.ToLower() == "singlefile")
                        {
                            var field = columnDefine.GetValue("field");
                            var displayField = columnDefine.GetValue("field") + "Name";
                            <div name="@columnDefine.GetValue("field")" field="@columnDefine.GetValue("field")"
                                 displayfield="@displayField" width="@columnDefine.GetValue("width")" headeralign="center" allowsort="false"
                                 align="@columnDefine.GetValue("align")" visible="@columnDefine.GetValue("Visible")" renderer='onFileRender' vtype="@columnDefine.GetValue("Required")">
                                @title
                                <input property="editor" class="mini-fileupload" style="width: 100%;"
                                       flashurl="/commonwebresource/RelateResource/Uploadify/uploadify.swf"
                                       uploadurl="/FileStore/SWFUpload/FileUploadHandler.ashx" uploadonselect="true" onuploadsuccess="onuploadsuccess" />
                            </div>
                        }
                        else
                        {
                            var field = columnDefine.GetValue("field");
                            <div name="@columnDefine.GetValue("field")" field="@field" width="@columnDefine.GetValue("width")" headeralign="center" allowsort="false"
                                 align="@columnDefine.GetValue("align")" visible="@columnDefine.GetValue("Visible")" dateformat="yyyy-MM-dd" vtype="@columnDefine.GetValue("Required")">
                                @title
                                <input property="editor" class="@inputClass" style="width:100%;" />
                            </div>

                        }
                    }
                }
            </div>
        </div>
    }   
</div>
<ul id="gridMenu" class="mini-contextmenu" onbeforeopen="onBeforeOpen">
    <li name="add" iconcls="icon-add" onclick="onAdd">下方插入行</li>
    <li name="remove" iconcls="icon-remove" onclick="onRemove">删除行</li>
    <li name="revert" iconcls="icon-remove" onclick="onRevert">撤销更改</li>
</ul>
<ul id="popupMenu" class="mini-contextmenu">
    @{
    if (ViewBag.PushCount == 0)
        {
            <li name="add" iconcls="icon-add" onclick="excelImport">Excel导入</li>
        }
    }
    <li name="remove" iconcls="icon-add" onclick="bidImport">导入全部投标明细</li>
    <li name="remove" iconcls="icon-add" onclick="budgetImport">导入全部预算设备清单</li>
</ul>

<div class="mini-fileupload" style="display:none"></div>
<!--导出Excel——模拟异步ajax提交表单 -->
<form id='excelFormEBom' style='display:none;' action='ExportExcel' method='post' target='excelIFrameEBom'>
    <input type='hidden' name='VersionID' />
    <input type='hidden' name='MajorCode' />
    <input type='hidden' name='jsonColumns' />
</form>
<iframe id='excelIFrameEBom' name='excelIFrameEBom' style='display:none;'></iframe>

<script id="formTemplate" type="text/x-jquery-tmpl">
    <div style="text-align:left; font-weight:bolder; color:red;">上一版内容</div>
    <table class="mini-grid-table" cellspacing="0" cellpadding="0" style="width:700px;table-layout:fixed;">
        <tr>
            @{
                foreach (var columnDefine in columnDefines)
                {
                    <td class="mini-grid-headerCell mini-grid-bottomCell " style="width: 100px;text-align:center">@columnDefine.GetValue("header")</td>
                }
            }
        </tr>
        <tr>
            @{
                foreach (var columnDefine in columnDefines)
                {
                    <td style="width: 100px;text-align:@columnDefine.GetValue("align")">${@columnDefine.GetValue("field")}</td>
                }
            }
        </tr>
    </table>
</script>

@{
    if (ViewBag.VirtualScroll == "true")
    {
        <style type="text/css">
            .mini-grid-cell {
                padding-left: 4px;
                padding-right: 2px;
                padding-top: 0px;
                padding-bottom: 0px;
                border-right: #ececec 1px solid;
            }
        </style>
    }
}
<script type="text/javascript">
    @Html.GetEnum("Base.PBSType")
    var flowEnd = "@Html.Raw(ViewBag.FlowEnd)";
    var versionID = "@Html.Raw(ViewBag.VersionID)";
    var NodeType = @Html.Raw(ViewBag.NodeTypeEnum);
</script>
<script type="text/javascript">
    var showType = [{ text: "显示全部", value: "All" }, { text: "仅显示差异", value: "Diff" }, { text: "仅显示最新", value: "New" }];
    var engineeringInfoID = getQueryString("EngineeringInfoID");
    var majorCode = getQueryString("MajorCode");
    var defineID = getQueryString("DefineID");
    var deepNodeType = "@ViewBag.ExpandLevel";
    normalParamSettings.gridId = "dataTree";
    windowParamSettings.gridId = "dataTree";

    function exportToExcel() {
        downloadExcelData("EBom", versionID);
    }

    function excelImport() {
        var validateUrl = "/EPC/Design/BOM/ValidateData?VersionID=" + versionID;
        var saveUrl = "/EPC/Design/BOM/SaveExcelData?VersionID=" + versionID;
        var excelKey = "EBOM_" + majorCode + "_Import";
        ImportExcel(excelKey, validateUrl, saveUrl);
    }

    function bidImport() {
        msgUI("导入前请先保存目前的编辑内容，您确定需要从投标预算中导入全部的设备清单吗？", 2, function (result) {
            if (result != "ok") return;
            addExecuteParam("VersionID", versionID);
            execute("ImportFromBid", {
                showLoading: true, refresh: false, onComplete: function (data) {
                    var grid = mini.get("dataTree");
                    grid.reload();
                }, validateForm: false , resetFormData:false
            });
        });
    }

    function budgetImport() {
        msgUI("导入前请先保存目前的编辑内容，您确定需要从预算设备清单中导入全部的设备清单吗？", 2, function (result) {
            if (result != "ok") return;
            addExecuteParam("VersionID", versionID);
            execute("ImportFromBudgetBom", {
                showLoading: true, refresh: false, onComplete: function (data) {
                    var grid = mini.get("dataTree");
                    grid.reload();
                }, validateForm: false, resetFormData:false
            });
        });
    }

    // 响应自定义列的弹出层的导出事件
    function downloadExcelData(key, versionID) {
        var grid = mini.get("dataTree");
        var dataurl = changeToFullUrl(grid.getUrl());
        var includeColumns = "";
        var columns = grid.getBottomColumns();
        function getColumns(columns) {
            columns = columns.clone();
            for (var i = columns.length - 1; i >= 0; i--) {
                var column = columns[i];
                if (!column.field || !column.header || column.header.trim() == '' || column.visible == false) {
                    columns.removeAt(i);
                } else {
                    if (includeColumns.length == 0 || includeColumns.indexOf(column.field.toLowerCase() + ',') >= 0) {
                        var c = { ChineseName: column.header.trim(), FieldName: column.field, TableName: key };
                        // 判断是否为时间字段，设置格式化字符串
                        if (column.dateFormat) {
                            c.DateFormat = column.dateFormat;
                        }
                        //导出excel使用显示字段
                        if (column.displayField) {
                            c.FieldName = column.displayField;
                        }
                        if (column.dataType) {
                            c.DataType = column.dataType;
                        }

                        columns[i] = c;
                    }
                }
            }
            return columns;
        }

        var columns = getColumns(columns);
        // 提交下载表单（利用iframe模拟Ajax）
        var $excelForm = $("#excelForm" + $.trim(key));
        if ($excelForm.length == 0) {
            alert('请确保ID为excelForm的表单存在！');
        }
        var title = document.title;
        var formData = {
            referUrl: window.location.href,
            dataUrl: dataurl,
            VersionID: versionID,
            MajorCode: majorCode,
            excelKey: majorCode,
            title: title,
            jsonColumns: mini.encode(columns)
        };
        for (var p in formData) {
            $excelForm.find("input[name='" + p + "']").val(formData[p]);
        }
        $excelForm.submit();
    }

    function collapseLevel() {
        var level = mini.getbyName("ExpandedNodeType").getValue();
        var tree = mini.get("dataTree");
        tree.expandAll();
        tree.collapseLevel(level);
    }

    function viewVersionList() {
        var url = "/MvcConfig/UI/List/PageView?TmplCode=EBomVesionList&EngineeringInfoID=" + engineeringInfoID + "&MajorCode=" + majorCode + "&VersionID=" + versionID;
        openWindow(url, {
            refresh: false, title: "设备清单历史版本", width: "70%", height: "60%",
            onDestroy: function () { }
        });
    }

    function onDrawingCell(e) {
        var treeGrid = e.sender;
        var record = e.record;
        var column = e.column;
        var field = e.field;
        if (flowEnd == "True") {
            if (record.NodeType != "Detail") {
                e.cellStyle = "font-weight:bolder; background:#F0F0F0";
            }
            else {
                if (record.ModifyState == "Add") {
                    if (field == "Name") {
                        e.cellHtml = record.Name + "<img style=\"height:18px;float:right;\" src=\"/EPC/Scripts/Design/Bom/new_red.png\" />";// record.Name + "new";
                    }
                    e.cellStyle = "background:#BBFFFF";
                }
                else if (record.ModifyState == "Modify") {
                    if (field == "Name") {
                        e.cellHtml = '<span id="' + record.ID + '" class="showCellTooltip" data-placement="bottomleft">' + record.Name + '</span>';
                    }
                    e.cellStyle = " background: yellow;";
                }
                else if (record.ModifyState == "Remove") {
                    e.cellStyle = "background:url('/EPC/Scripts/Design/Bom/red-line.jpg')  center ;color:#fff";
                }
            }
        }
        else if (record.NodeType == "Detail") {
            if (record.ModifyState == "Add") {
                if (field == "Name") {
                    e.cellHtml = record.Name + "<img style=\"height:18px;float:right;\" src=\"/EPC/Scripts/Design/Bom/new_red.png\" />";// record.Name + "new";
                }
                e.cellStyle = "background:#BBFFFF";
            }
            else if (record.ModifyState == "Modify") {
                if (field == "Name") {
                    e.cellHtml = '<span id="' + record.ID + '" class="showCellTooltip" data-placement="bottomleft">' + record.Name + '</span>';
                }
                e.cellStyle = " background: yellow;";
            }
            else if (record.ModifyState == "Remove") {
                e.cellStyle = "background:url('/EPC/Scripts/Design/Bom/red-line.jpg')  center ;color:#fff";
            }
        }
        else {
            e.cellStyle = "font-weight:bolder; background:#F0F0F0";
        }
    }

    $(document).ready(function () {
        var tip = new mini.ToolTip();
        tip.set({
            target: document,
            selector: '.showCellTooltip',
            onbeforeopen: function (e) {
                e.cancel = false;
            },
            onopen: function (e) {
                var el = e.element;
                var id = el.id;
                if (id) {
                    this.showLoading();
                    addExecuteParam("ID", id);
                    execute("GetLastDetailInfo", {
                        showLoading: false, refresh: false, onComplete: function (data) {
                            var html = $("#formTemplate").tmpl(data);
                            tip.setContent(html);
                        }, validateForm: false, resetFormData:false
                    });
                }
            }
        });
    });

    function onBeforeOpen(e) {
        var dataTree = mini.get("dataTree");
        var menu = e.sender;
        var node = dataTree.getSelectedNode();
        if (!node || flowEnd == "True") {
            e.cancel = true;
            //阻止浏览器默认右键菜单
            e.htmlEvent.preventDefault();
            return;
        }
        else if (node.NodeType == "SubProject") {
            e.cancel = true;
            e.htmlEvent.preventDefault();
            return;
        }
        var addItem = mini.getbyName("add", menu);
        var removeItem = mini.getbyName("remove", menu);
        var revertItem = mini.getbyName("revert", menu);
        addItem.show();
        removeItem.show();
        revertItem.hide();
        if (node.NodeType == "Detail") {
            if (node.ModifyState != "Normal") {
                revertItem.show();
            }
            if (node.ModifyState == "Remove") {
                removeItem.hide();
            }
        }
        else if (node.NodeType == "Module") {
            removeItem.hide();
        }
        else {
            removeItem.hide();
            addItem.hide();
        }
    }

    function onload() {
        collapseLevel();
    }

    function OnCellBeginEdit(e) {
        var record = e.record, field = e.field;
        if (flowEnd == "True" || record.NodeType != "Detail") {
            e.cancel = true;
        }
        else if (record.ModifyState == "Remove") {
            e.cancel = true;
        }
    }

    function onAutoCompleteValueChanged(e) {
        var grid = mini.get("dataTree");
        grid.commitEdit();
        var data = e.selected;
        if (data) {
            var node = grid.getSelectedNode();
            grid.updateNode(node, {
                Name: data.Name,
                Number: data.Number,
                Model: data.Size,
                Branding: data.Branding,
                Material: data.Material,
                ConnectionType: data.ConnectionMode
            });
        }
    }

    function upgrad() {
        msgUI("您确定需要升版Bom表吗？", 2, function (result) {
            if (result != "ok") return;
            addExecuteParam("EngineeringInfoID", engineeringInfoID);
            addExecuteParam("MajorCode", majorCode);
            addExecuteParam("DefineID", defineID);
            execute("UpgradBom", {
                showLoading: true, refresh: false, onComplete: function (data) {
                    window.location.reload();
                }, validateForm: false, resetFormData:false
            });
        });
    }

    function startFlow() {
        if (!versionID) {
            msgUI("没有找到指定的版本，无法提交"); return;
        }
        var tree = mini.get("dataTree");
        var nodes = tree.getChanges();
        addExecuteParam("ListData", mini.encode(nodes));
        execute("SaveNodes", {
            showLoading: true, refresh: false, onComplete: function (data) {
                var url = "/EPC/Design/BOMSubmit/PageView?FlowCode=BomSubmit&TmplCode=BomSubmit&ID=" + versionID;
                openWindow(url, {
                    refresh: false, title: "设备清单提交", width: "90%", height: "90%",
                    onDestroy: function (data) {
                        if (data == "close") return;
                        window.location.reload();
                    }
                });
            }, validateForm: false, resetFormData:false
        });
    }

    function saveData() {
        var tree = mini.get("dataTree");
        tree.validate();
        if (tree.isValid() == false) {
            msgUI("输入的单元格内容验证未通过");
            var error = tree.getCellErrors()[0];
            tree.beginEditCell(error.record, error.column);
            return;
        }
        var nodes = tree.getChanges();
        addExecuteParam("ListData", mini.encode(nodes));
        execute("SaveNodes", {
            showLoading: true, refresh: false, onComplete: function (data) {
                tree.reload();
            }, validateForm: false, resetFormData:false
        });
    }

    function revert() {
        msgUI("撤销操作将撤销所有的编辑内容，您确定要继续吗？", 2, function (result) {
            if (result != "ok") return;
            addExecuteParam("VersionID", versionID);
            execute("Revert", {
                showLoading: true, refresh: false, onComplete: function (data) {
                    window.location.reload();
                }, validateForm: false, resetFormData:false
            });
        });
    }

    function onAdd() {
        var dataTree = mini.get("dataTree");
        var node = dataTree.getSelectedNode();
        if (!node) {
            return;
        }
        addExecuteParam("NodeID", node.ID);
        addExecuteParam("NodeType", node.NodeType);
        addExecuteParam("VersionID", versionID);
        execute("AddVersionDetail", {
            showLoading: true, refresh: false, onComplete: function (data) {
                if (node.NodeType == "Detail") {
                    dataTree.addNode(data, "after", node);
                }
                else {
                    dataTree.addNode(data, "add", node);
                }
            }, validateForm: false, resetFormData:false
        });
    }

    function onRemove() {
        var dataTree = mini.get("dataTree");
        var nodes = dataTree.getSelecteds();
        if (nodes.length == 0) {
            return;
        }
        addExecuteParam("ListData", mini.encode(nodes));
        execute("DeleteNodes", {
            showLoading: true, refresh: false, onComplete: function (data) {
                for (var i = 0; i < nodes.length; i++) {
                    if (nodes[i].ModifyState == "Add") {
                        dataTree.removeNode(nodes[i]);
                    }
                    else {
                        var showType = mini.getbyName("ShowType");
                        if (showType && showType.getValue() == "New") {
                            dataTree.removeNode(nodes[i]);
                        }
                        else {
                            dataTree.updateNode(nodes[i], { ModifyState: "Remove" });
                        }
                    }
                }
            }, validateForm: false, resetFormData:false
        });
    }

    function onRevert() {
        var dataTree = mini.get("dataTree");
        var nodes = dataTree.getSelecteds();
        if (nodes.length == 0) {
            return;
        }
        addExecuteParam("ListData", mini.encode(nodes));
        addExecuteParam("VersionID", mini.encode(nodes));
        execute("RevertNode", {
            showLoading: true, refresh: false, onComplete: function (data) {
                for (var i = 0; i < nodes.length; i++) {
                    var node = nodes[i];
                    if (node.ModifyState == "Add") {
                        dataTree.removeNode(node);
                    }
                    else {
                        for (var m = 0; m < data.length; m++) {
                            if (data[m].ID == node.ID) {
                                dataTree.updateNode(node, data[m]);
                                dataTree.commitEditRow(node);
                                dataTree.acceptRecord(node);
                            }
                        }
                    }
                }
            }, validateForm: false, resetFormData:false
        });
    }

    function onShowTypeChanged(e) {
        var tree = mini.get("dataTree");
        var showDiff = mini.getbyName("ShowType").getValue();
        if (flowEnd == "True") {
            tree.load({ showAllPBS: false, ShowType: showDiff });
        }
        else {
            var showAll = mini.get("showAll").getValue();
            if (showDiff == "Diff") {
                showAll = false;
                mini.get("showAll").setValue("false");
                mini.get("showAll").disable();
            }
            else {
                mini.get("showAll").enable();
            }
            tree.load({ showAllPBS: showAll, ShowType: showDiff });
        }
    }

    function onCheckBoxValueChanged(e) {
        var tree = mini.get("dataTree");
        var showAll = mini.get("showAll").getValue();// false;
        var showDiff = mini.getbyName("ShowType").getValue();
        tree.load({ showAllPBS: showAll, ShowType: showDiff });
    }

    function flowTrace() {
        var url = "/MvcConfig/Workflow/Trace/Diagram?ID=" + versionID;
        openWindow(url, {
            refresh: false, title: "流程跟踪", width: "80%", height: "85%",
            onDestroy: function () { }
        });
    }

    function onNodeDrop(e) {
        var tree = mini.get("dataTree");
        addExecuteParam("sourceID", e.dragNode.ID);
        addExecuteParam("targetID", e.dropNode.ID);
        addExecuteParam("dragAction", e.dragAction);
        execute("MoveNode", {
            showLoading: false, refresh: false, onComplete: function (data) {
                tree.updateNode(e.dragNode, data);
                tree.acceptRecord(e.dragNode);
            }, validateForm: false, resetFormData:false
        });
    }

    function onGiveFeedback(e) {
        var tree = e.sender;
        var node = e.node;              //被拖拽的节点
        var targetNode = e.targetNode;  //目标投放节点
        var effect = e.effect;          //投放方式：add|before|after

        if (node.NodeType != "Detail") {
            e.effect = "no";
        }
        else if (targetNode.NodeType == "Detail" && effect == "add") {
            e.effect = "no";
        }
        else if ((effect == "after" || effect == "before") && targetNode.NodeType != "Detail") {
            e.effect = "no";
        }
        else if (effect == "add" && targetNode.NodeType != deepNodeType) {
            e.effect = "no";
        }
        if (flowEnd == "True") {
            e.effect = "no";
        }
    }

</script>

<style type="text/css">
    .showCellTooltip {
        background: yellow;
    }
</style>