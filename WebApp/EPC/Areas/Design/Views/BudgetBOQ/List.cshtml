@{
    ViewBag.Title = "建安预算工程量清单";
}
<script src="@Url.Content("/EPC/Scripts/Design/Bom/jquery.tmpl.js")" type="text/javascript"></script>

<div class="mini-fit">
    <div class="mini-toolbar" style="padding: 0px; border-bottom: 0;">
        <table style="width: 100%;">
            <tr>
                <td style="width: 100%;">
                    @{
                        //流程结束
                        if (@ViewBag.FlowEnd)
                        {
                            <a class="mini-button" iconcls="icon-add" onclick="upgrade()" plain="true">编辑升版</a>
                            <a class="mini-button" iconcls="icon-flowstart" onclick="flowTrace()" plain="true">流程跟踪</a>
                            <a class="mini-button" iconcls="icon-excel" onclick="exportList()" plain="true">导出Excel</a>
                        }
                        else
                        {
                            //过程
                            if (ViewBag.FlowPhase == "Processing")
                            {
                                <a class="mini-button" iconcls="icon-save" onclick="savelist();" plain="true">保存</a>
                                <a class="mini-menubutton" iconcls="icon-add" plain="true" menu="#popupMenu">导入</a>
                                <a class="mini-button" iconcls="icon-add" onclick="onAdd" plain="true">下方插入行</a>
                                <a class="mini-button" iconcls="icon-remove" onclick="delrow()" plain="true">删除行</a>
                                <a class="mini-button" iconcls="icon-flowstart" onclick="flowTrace()" plain="true">流程跟踪</a>
                            }
                            //未启动流程
                            else
                            {
                                <a class="mini-button" iconcls="icon-edit" onclick="startFlow" plain="true">提交审批</a>
                                <a class="mini-button" iconcls="icon-save" onclick="savelist();" plain="true">暂存</a>
                                <a class="mini-button" iconcls="icon-add" onclick="onAdd" plain="true">下方插入行</a>
                                <a class="mini-button" iconcls="icon-remove" onclick="delrow()" plain="true">删除行</a>
                                <a class="mini-button" iconcls="icon-cancel" onclick="revert();" plain="true">撤销</a>
                                @*<a class="mini-menubutton" iconcls="icon-add" plain="true" menu="#popupMenu">导入</a>*@
                                @*<a class="mini-button" iconcls="icon-excel" onclick="exportToExcel()" plain="true">导出Excel</a>*@
                            }
                        }
                    }
                </td>
                <td style="white-space: nowrap;">
                    @Html.Raw("当前版本：")
                    <a href="javascript:void();" onclick="viewVersionList();">@ViewBag.VersionNo</a>
                    &nbsp;  &nbsp;  &nbsp;
                    展开至：<input name="ExpandedNodeType" class="mini-combobox" style="width: 100px;" textfield="text" valuefield="value" data="NodeType" allowinput="false"
                               onvaluechanged="collapseLevel" value="@ViewBag.ExpandLevel" />
                    &nbsp;
                    显示：<input name="ShowType" class="mini-combobox" style="width: 100px;" textfield="text" valuefield="value" data="showType" allowinput="false"
                              onvaluechanged="onShowTypeChanged" value="New" />
                </td>
            </tr>
        </table>
    </div>
    <div class="mini-fit">
        <form id="excelForm" action="/" method="post">
            <div id="dataTree" class="mini-treegrid" style="width:100%;height:100%;" allowcellselect="true" editnextonenterkey="true" editnextrowcell="true" allowcelledit="true"
                 url="" expandonload="true" showtreeicon="true" ondrawcell="onDrawingCell" allowcellwrap="true" oncellbeginedit="thisOnCellBeginEdit"
                 oncellendedit="thisOnCellEndEdit" multiselect="true" borderstyle="border-left:0px;"
                 treecolumn="Name" idfield="ID" parentfield="ParentID" resultastree="false" expandonload="true" iconfield="" contextmenu="#gridMenu"
                 allowresize="false" fitcolumns="true" allowdrag="true" allowdrop="true" allowleafdropin="true" ongivefeedback="onGiveFeedback"
                 ondrop="onNodeDrop">
                <div property="columns">
                    <div type="checkcolumn"></div>
                    <div type="indexcolumn"></div>
                    <div name="Name" field="Name" width="140" headeralign="center">
                        项目名称
                        <input property="editor" class="mini-textbox" style="width: 100%;" />
                    </div>
                    <div name="Code" field="Code" width="100" headeralign="center">
                        清单编号
                        <input property="editor" class="mini-textbox" style="width: 100%;" />
                    </div>
                    <div name="Property" field="Property" width="200" headeralign="center">
                        项目特征
                        <input property="editor" class="mini-textarea" style="width: 100%;" />
                    </div>
                    <div name="Unit" field="Unit" width="40" align="center" headeralign="center">
                        单位
                        <input property="editor" data="QuantityUnit" class="mini-textbox" style="width: 100%;" />
                    </div>
                    <div name="Quantity" field="Quantity" width="60" headeralign="center" datatype="float" align="right">
                        数量
                        <input property="editor" class="mini-textbox" vtype="float" style="width: 100%;" />
                    </div>
                    @*<div name="UnitPrice" field="UnitPrice" width="40" headeralign="center" datatype="currency" align="right">
                        单价（元）
                        <input property="editor" class="mini-textbox" vtype="float" style="width: 100%;" />
                    </div>
                    <div name="Price" field="Price" width="40" headeralign="center" datatype="currency" align="right">
                        合价（元）
                        <input property="editor" class="mini-textbox" allowinput="false" vtype="float" style="width: 100%;" />
                    </div>*@
                    <div name="Remark" field="Remark" width="160" headeralign="center">
                        备注
                        <input property="editor" class="mini-textbox" style="width: 100%;" maxlength="500" />
                    </div>
                    <div name="SortIndex" field="SortIndex" width="20" visible="false" align="center" headeralign="center"></div>
                </div>
            </div>
        </form>
    </div>
</div>
<ul id="popupMenu" class="mini-contextmenu">
    <li name="add" iconcls="icon-add" onclick="excelImport">Excel导入</li>
</ul>
<ul id="gridMenu" class="mini-contextmenu" onbeforeopen="onBeforeOpen">
    <li name="add" iconcls="icon-add" onclick="onAdd">下方插入行</li>
    <li name="remove" iconcls="icon-remove" onclick="delrow">删除行</li>
    <li name="revert" iconcls="icon-remove" onclick="onRevert">撤销更改</li>
</ul>
<div class="mini-fileupload" style="display:none"></div>
<!--导出Excel——模拟异步ajax提交表单 -->
<form id='excelForm' style='display:none;' action='ExportExcel' method='post' target='excelIFramePlan'>
    <input type='hidden' name='VersionID' />
    <input type='hidden' name='title' />
    <input type='hidden' name='jsonColumns' />
</form>
<script id="formTemplate" type="text/x-jquery-tmpl">
    <div style="text-align:left; font-weight:bolder; color:red;">上一版内容</div>
    <table class="mini-grid-table" cellspacing="0" cellpadding="0" style="width:700px;table-layout:fixed;">
        <tr>
            <td class="mini-grid-headerCell mini-grid-bottomCell " style="width: 50px;text-align:center">清单编号</td>
            <td class="mini-grid-headerCell mini-grid-bottomCell " style="width: 70px;text-align:center">项目名称</td>
            <td class="mini-grid-headerCell mini-grid-bottomCell " style="width: 100px;text-align:center">项目特征</td>
            <td class="mini-grid-headerCell mini-grid-bottomCell " style="width: 20px;text-align:center">单位</td>
            <td class="mini-grid-headerCell mini-grid-bottomCell " style="width: 30px;text-align:center">数量</td>
            <td class="mini-grid-headerCell mini-grid-bottomCell " style="width: 80px;text-align:center">备注</td>
        </tr>
        <tr>
            <td style="text-align:center">${Code}</td>
            <td style="text-align:left">${Name}</td>
            <td style="text-align:left">${Property}</td>
            <td style="text-align:center">${Unit}</td>
            <td style="text-align:right">${Quantity}</td>
            <td style="text-align:left">${Remark}</td>
        </tr>
    </table>
</script>
<script type="text/javascript">
    var NodeType = @Html.Raw(ViewBag.NodeTypeEnum);
    var flowEnd = "@Html.Raw(ViewBag.FlowEnd)";
    var showType = [{ text: "显示全部", value: "All" }, { text: "仅显示差异", value: "Diff" }, { text: "仅显示最新", value: "New" }];
    var deepNodeType = "@ViewBag.ExpandLevel";
</script>
<script type="text/javascript">
    var engineeringInfoID = getQueryString('EngineeringInfoID');
    var versionID = "@Html.Raw(ViewBag.VersionID)";
    var FuncType = getQueryString('FuncType');

    function pageLoad() {
        search();
    }

    function onShowTypeChanged(e) {
        search();
    }

    function search() {
        var showDiff = "New";

        if (mini.getbyName("ShowType")) {
            showDiff = mini.getbyName("ShowType").getValue();
        }

        var url = "GetTreeList?VersionID=" + versionID + "&showAllPBS=True&ShowType=" + showDiff;
        if (flowEnd == "True")
        {
            url = "GetTreeList?VersionID=" + versionID + "&showAllPBS=False&ShowType=" + showDiff;
        }
        var dataTree = mini.get("dataTree");
        dataTree.setUrl(url);
        //dataGrid.reload();
    }

    function upgrade() {
        msgUI("您确定需要升版表吗？", 2, function (result) {
            if (result != "ok") return;
            addExecuteParam("EngineeringInfoID", engineeringInfoID);
            execute("Upgrade", {
                showLoading: true, refresh: false, onComplete: function (data) {
                    window.location.reload();
                }, validateForm: false
            });
        });
    }

    function revert() {
        msgUI("撤销操作将撤销所有的编辑内容，您确定要继续吗？", 2, function (result) {
            if (result != "ok") return;
            addExecuteParam("VersionID", versionID);
            execute("Revert", {
                showLoading: true, refresh: false, onComplete: function (data) {
                    window.location.reload();
                }, validateForm: false
            });
        });
    }

    function onBeforeOpen(e) {
        var dataTree = mini.get("dataTree");
        var menu = e.sender;
        var node = dataTree.getSelected();
        if (!node || flowEnd == "True" || (FuncType&&FuncType=='View')) {
            e.cancel = true;
            //阻止浏览器默认右键菜单
            e.htmlEvent.preventDefault();
            return;
        }
        else if (node.NodeType == "SubProject") {
            e.cancel = true;
            e.htmlEvent.preventDefault();
            return;
        }

        var addItem = mini.getbyName("add", menu);
        var removeItem = mini.getbyName("remove", menu);
        var revertItem = mini.getbyName("revert", menu);  
        removeItem.enable();
        revertItem.disable();

        if (node.NodeType == "Detail") {
            if (node.ModifyState != "Normal") {
                revertItem.enable();
            }
            if (node.ModifyState == "Remove") {
                removeItem.disable();
            }
        }
        else if (node.NodeType == "Module") {
            removeItem.hide();
        }
        else {
            removeItem.hide();
            addItem.hide();
        }
        
    }

    function onRevert() {
        var dataTree = mini.get("dataTree");
        var nodes = dataTree.getSelecteds();
        if (nodes.length == 0) {
            return;
        }

        addExecuteParam("ListData", mini.encode(nodes));
        addExecuteParam("EngineeringInfoID", engineeringInfoID);
        execute("RevertNode", {
            showLoading: true, refresh: false, onComplete: function (data) {
                for (var i = 0; i < nodes.length; i++) {
                    var node = nodes[i];
                    if (node.ModifyState == "Add") {
                        dataTree.removeNode(node);
                    }
                    else {
                        for (var m = 0; m < data.length; m++) {
                            if (data[m].ID == node.ID) {
                                dataTree.updateNode(node, data[m]);
                                dataTree.commitEditRow(node);
                                dataTree.acceptRecord(node);
                            }
                        }
                    }
                }
            }, validateForm: false
        });
    }

    function flowTrace() {
        var url = "/MvcConfig/Workflow/Trace/Diagram?ID=" + versionID;
        openWindow(url, {
            refresh: false, title: "流程跟踪", width: "80%", height: "85%",
            onDestroy: function () { }
        });
    }

    function startFlow() {
        if (!versionID) {
            msgUI("没有找到指定的版本，无法提交"); return;
        }
        var tree = mini.get("dataTree");
        var nodes = tree.getChanges();
        addExecuteParam("ListData", mini.encode(nodes));
        execute("SaveNodes", {
            showLoading: true, refresh: false, onComplete: function (data) {
                //TODO
                var tree = mini.get("dataTree");
                tree.reload();
                var url = "/EPC/Design/BudgetBOQSubmit/PageView?TmplCode=BudgetBOQSubmit&FlowCode=BudgetBOQSubmit&ID=" + versionID;
                openWindow(url, {
                    refresh: false, title: "预算工程量清单提交", width: "90%", height: "90%",
                    onDestroy: function (data) {
                        if (data == "close") return;
                        window.location.reload();
                    }
                });
            }, validateForm: false
        });
    }
    //TODO
    function excelImport() {
        var validateUrl = "/EPC/Construction/BOQ/ValidateData?VersionID=" + versionID;
        var saveUrl = "/EPC/Construction/BOQ/SaveExcelData?VersionID=" + versionID;
        var excelKey = "BOQ_Version_Detail_Import";
        ImportExcel(excelKey, validateUrl, saveUrl);
    }

    function onAdd() {
        var node = getSelectNode();
        if (!node)
            return;

        var dataTree = mini.get("dataTree");
        addExecuteParam("targetID", node.ID);
        addExecuteParam("NodeType", node.NodeType);
        addExecuteParam("versionID", versionID);
        execute("AddItem", {
            showLoading: true, refresh: false, onComplete: function (data) {
                if (node.NodeType == "Detail") {
                    dataTree.addNode(data, "after", node);
                }
                else {
                    dataTree.addNode(data, "add", node);
                }
            }, validateForm: false
        });
    }

    function delrow() {
        var dataTree = mini.get("dataTree");
        var nodes = dataTree.getSelecteds();
        for (i = 0; i < nodes.length; i++) {
            nodes[i]._state = 'removed';
            var childNodes = dataTree.getAllChildNodes(nodes[i]);
            for (j = 0; j < childNodes.length; j++) {
                childNodes[j]._state = 'removed';
            }            
        }

        savelist();
    }

    function savelist() {
        var tree = mini.get("dataTree");
        var nodes = tree.getChanges();
        addExecuteParam("ListData", mini.encode(nodes));
        execute("SaveNodes", {
            showLoading: true, refresh: false, onComplete: function (data) {
                tree.reload();
            }, validateForm: false
        });
    }

    function exportToExcel() {
        downloadExcelData();
    }

    // 响应自定义列的弹出层的导出事件
    function downloadExcelData() {
        var grid = mini.get("dataTree");
        var dataurl = changeToFullUrl(grid.getUrl());
        var includeColumns = "";
        var columns = grid.getBottomColumns();
        function getColumns(columns) {
            columns = columns.clone();
            for (var i = columns.length - 1; i >= 0; i--) {
                var column = columns[i];
                if (!column.field || !column.header || column.header.trim() == '' || column.visible == false) {
                    columns.removeAt(i);
                } else {
                    if (includeColumns.length == 0 || includeColumns.indexOf(column.field.toLowerCase() + ',') >= 0) {
                        var c = { ChineseName: column.header.trim(), FieldName: column.field, TableName: 'Detail' };
                        // 判断是否为时间字段，设置格式化字符串
                        if (column.dateFormat) {
                            c.DateFormat = column.dateFormat;
                        }
                        //导出excel使用显示字段
                        if (column.displayField) {
                            c.FieldName = column.displayField;
                        }
                        if (column.dataType) {
                            c.DataType = column.dataType;
                        }

                        columns[i] = c;
                    }
                }
            }
            return columns;
        }

        var columns = getColumns(columns);
        // 提交下载表单（利用iframe模拟Ajax）
        var $excelForm = $("#excelFormPlan");
        if ($excelForm.length == 0) {
            alert('请确保ID为excelForm的表单存在！');
        }

        var title ="预算工程量清单";
        var formData = {
            title: title,
            VersionID: versionID,
            jsonColumns: mini.encode(columns)
        };
        for (var p in formData) {
            $excelForm.find("input[name='" + p + "']").val(formData[p]);
        }
        $excelForm.submit();
    }

    function viewVersionList() {
        var url = "/MvcConfig/UI/List/PageView?TmplCode=BudgetBOQVersionList&EngineeringInfoID=" + engineeringInfoID + "&VersionID=" + versionID;
        openWindow(url, {
            refresh: false, title: "预算工程量清单历史版本", width: "70%", height: "60%",
            onDestroy: function () { }
        });
    }

    function thisOnCellBeginEdit(e) {
        var record = e.record, field = e.field;
        if (flowEnd == "True" || record.NodeType != "Detail") {
            e.cancel = true;
        }
        else if (record.ModifyState == "Remove") {
            e.cancel = true;
        }
    }

    function thisOnCellEndEdit(e) {
        //if (e.field == 'Quantity' || e.field == 'UnitPrice') {
        //    if (e.editor.isValid()) {
        //        var price = e.row.Quantity * e.row.UnitPrice;
        //        e.sender.updateRow(e.row, { Price: price });
        //        reCalcParent(e.row.CBSID);
        //    }
        //}
    }

    function onDrawingCell(e) {
        var dataGrid = e.sender;
        var record = e.record;
        var column = e.column;
        var field = e.field;
        if (flowEnd == "True") {
            if (record.NodeType != "Detail") {
                e.cellStyle = "font-weight:bolder; background:#F0F0F0";
            }
             else
            {
                if (record.ModifyState == "Add") {
                    if (field == "Name") {
                        e.cellHtml = record.Name + "<img style=\"height:18px;float:right;\" src=\"/EPC/Scripts/Design/Bom/new_red.png\" />";// record.Name + "new";
                    }
                    e.cellStyle = "background:#BBFFFF";
                }
                else if (record.ModifyState == "Modify") {
                    if (field == "Name") {
                        e.cellHtml = '<span id="' + record.ID + '" class="showCellTooltip" data-placement="bottomleft">' + record.Name + '</span>';
                    }
                    e.cellStyle = " background: yellow;";
                }
                else if (record.ModifyState == "Remove") {
                    e.cellStyle = "background:url('/EPC/Scripts/Design/Bom/red-line.jpg')  center ;color:#fff";
                }
            }
        }
        else {
            if (record.ModifyState == "Add") {
                if (field == "Name") {
                    e.cellHtml = record.Name + "<img style=\"height:18px;float:right;\" src=\"/EPC/Scripts/Design/Bom/new_red.png\" />";// record.Name + "new";
                }
                e.cellStyle = "background:#BBFFFF";
            }
            else if (record.ModifyState == "Modify") {
                if (field == "Name") {
                    e.cellHtml = '<span id="' + record.ID + '" class="showCellTooltip" data-placement="bottomleft">' + record.Name + '</span>';
                }
                e.cellStyle = " background: yellow;";
            }
            else if (record.ModifyState == "Remove") {
                e.cellStyle = "background:url('/EPC/Scripts/Design/Bom/red-line.jpg')  center ;color:#fff";
            }
        }
    }

    function flowTrace() {
        var url = "/MvcConfig/Workflow/Trace/Diagram?ID=" + versionID;
        openWindow(url, {
            refresh: false, title: "流程跟踪", width: "80%", height: "85%",
            onDestroy: function () { }
        });
    }

    $(document).ready(function () {
        var tip = new mini.ToolTip();
        tip.set({
            target: document,
            selector: '.showCellTooltip',
            onbeforeopen: function (e) {
                e.cancel = false;
            },
            onopen: function (e) {
                var el = e.element;
                var id = el.id;
                if (id) {
                    this.showLoading();
                    addExecuteParam("ID", id);
                    addExecuteParam("VersionID", versionID);
                    execute("GetLastDetailInfo", {
                        showLoading: false, refresh: false, onComplete: function (data) {
                            var html = $("#formTemplate").tmpl(data);
                            tip.setContent(html);
                        }, validateForm: false
                    });
                }
            }
        });
    });

    function onGiveFeedback(e) {
        var tree = e.sender;
        var node = e.node;              //被拖拽的节点
        var targetNode = e.targetNode;  //目标投放节点
        var effect = e.effect;          //投放方式：add|before|after

        if (node.NodeType != "Detail") {
            e.effect = "no";
        }
        if (effect == "add") {
            e.effect = "no";
        }
            //只能同一个父项内移动
        else if (node.CBSParentID != targetNode.CBSParentID) {
            e.effect = "no";
        }
        else if (effect == "add" && targetNode.NodeType != deepNodeType) {
            e.effect = "no";
        }
        if (flowEnd == "True") {
            e.effect = "no";
        }
    }

    function onNodeDrop(e) {
        var tree = mini.get("dataTree");
        addExecuteParam("sourceID", e.dragNode.ID);
        addExecuteParam("targetID", e.dropNode.ID);
        addExecuteParam("dragAction", e.dragAction);
        execute("MoveItem", {
            showLoading: false, refresh: false, onComplete: function (data) {
                tree.updateNode(e.dragNode, data);
                tree.acceptRecord(e.dragNode);
            }, validateForm: false
        });
    }

    function reCalcParent(id) {
        var dataTree = mini.get('dataTree');
        var cNode = getNodeByID(id);
        if (!cNode)
            return;

        var children = dataTree.getChildNodes(cNode);

        var res = 0;
        for (i = 0; i < children.length; i++) {
            var tmp = parseFloat(children[i][field]);
            res += isNaN(tmp) ? 0 : tmp;
        }
        
        dataTree.updateNode(cNode, { Price: res });
        reCalcParent(cNode.CBSParentID);
    }

    function getSelectNode() {
        var dataTree = mini.get("dataTree");
        var nodes = dataTree.getSelectedNodes();
        if (!nodes || nodes.length == 0) {
            return;
        }

        var node = nodes[0];
        return node;
    }

    function getNodeByID(id) {
        var dataTree = mini.get('dataTree');
        var nodes = dataTree.findNodes(function (node) {
            if (node.ID == id) return true;
        });

        if (nodes.length == 0)
            return;

        return nodes[0];
    }

    function collapseLevel() {
        var level = mini.getbyName("ExpandedNodeType").getValue();
        var tree = mini.get("dataTree");
        tree.expandAll();
        tree.collapseLevel(level);
    }

</script>

