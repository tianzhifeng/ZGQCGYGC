@{
    ViewBag.Title = "TreeList";
}
@using Config.Logic;
<script src="@Url.Content("/EPC/Scripts/Design/Bom/jquery.tmpl.js")" type="text/javascript"></script>

<div class="mini-fit" style="padding-top: 0px;">
    <div id="mainTaba" class="mini-tabs" activeindex="0" style="width: 100%; height: 100%;">
        <div title="预算编制" style="border:0px;">
            <div class="mini-toolbar" style="padding: 0px; border-bottom: 0;">
                <table style="width: 100%;">
                    <tr>
                        <td style="width: 100%;">
                            @{
                                if (ViewBag.First)
                                {
                                    <a class="mini-button" iconcls="icon-add" onclick="create()" plain="true">开始编制预算</a>
                                    <span style="color:red; font-weight:bold;font-size:12px;">@ViewBag.Msg</span>
                                }
                                else if (ViewBag.FlowEnd)
                                {
                                    <a class="mini-button" iconcls="icon-add" onclick="upgrad()" plain="true">预算变更</a>
                                    <a class="mini-button" iconcls="icon-flowstart" onclick="flowTrace()" plain="true">流程跟踪</a>
                                    <a class="mini-button" iconcls="icon-excel" onclick="exportToExcel" plain="true">导出Excel</a>
                                    <span style="color: red; font-weight: bold;font-size:12px;">@ViewBag.Msg</span>
                                }
                                else
                                {
                                    if (ViewBag.FlowPhase == "Processing")
                                    {
                                        <a class="mini-button" iconcls="icon-save" onclick="saveData();" plain="true">暂存</a>
                                        <a class="mini-button" iconcls="icon-remove" onclick="onRemove" plain="true">删除行</a>
                                        <a class="mini-menubutton" iconcls="icon-add" plain="true" menu="#popupMenu">导入</a>
                                        <a class="mini-button" iconcls="icon-flowstart" onclick="flowTrace()" plain="true">流程跟踪</a>
                                    }
                                    else
                                    {
                                        <a class="mini-button" iconcls="icon-edit" onclick="startFlow" plain="true">提交审批</a>
                                        <a class="mini-button" iconcls="icon-save" onclick="saveData();" plain="true">暂存</a>
                                        <a class="mini-button" iconcls="icon-remove" onclick="onRemove" plain="true">删除行</a>
                                        <a class="mini-button" iconcls="icon-cancel" onclick="revert();" plain="true">撤销</a>
                                        <a class="mini-menubutton" iconcls="icon-add" plain="true" menu="#popupMenu">导入</a>
                                        <a class="mini-button" iconcls="icon-excel" onclick="exportToExcel" plain="true">导出Excel</a>
                                    }
                                }
                            }
                        </td>
                        <td style="white-space: nowrap;">
                            &nbsp;
                            当前版本：<a href="javascript:void();" onclick="viewVersionList();">@ViewBag.VersionNo</a> &nbsp;
                            显示：<input name="ShowType" class="mini-combobox" style="width: 100px;" textfield="text" valuefield="value" data="showType" allowinput="false"
                                      onvaluechanged="onShowTypeChanged" value="New" /> &nbsp;
                            &nbsp;
                            <div id="showAll" name="showAll" checked="false" class="mini-checkbox" text="显示设备材料明细" onvaluechanged="onCheckBoxValueChanged"></div>
                            &nbsp;
                        </td>
                    </tr>
                </table>
            </div>
            <div class="mini-fit">
                <div id="dataTree" class="mini-treegrid" style="width:100%;height:100%;" allowcellselect="true" editnextonenterkey="true" editnextrowcell="true" allowcelledit="true"
                     url="" expandonload="true" showtreeicon="true" ondrawcell="onDrawingCell" allowcellwrap="true" oncellbeginedit="OnCellBeginEdit"
                     oncellendedit="onCellEndEdit" multiselect="true" borderstyle="border-left:0px;" virtualscroll="@ViewBag.VirtualScroll"
                     treecolumn="Name" idfield="CBSID" parentfield="CBSParentID" resultastree="false" expandonload="true" iconfield="NodeType" contextmenu="#gridMenu"
                     allowresize="false" fitcolumns="false">
                    <div property="columns">
                        <div type="checkcolumn"></div>
                        <div type="indexcolumn"></div>
                        <div name="Name" field="Name" width="270" headeralign="center" allowsort="false">
                            名称
                            <input property="editor" class="mini-textbox" style="width: 100%;" />
                        </div>
                        <div field="Unit" width="50" headeralign="center" allowsort="false" align="center">单位</div>
                        <div field="Quantity" width="60" align="right" headeralign="center" allowsort="false">
                            数量
                            <input property="editor" class="mini-textbox" style="width: 100%;" />
                        </div>
                        <div field="UnitPrice" datatype="currency" width="70" align="right" headeralign="center" allowsort="false">
                            单价（元）
                            <input property="editor" class="mini-textbox" style="width: 100%;" />
                        </div>
                        <div field="TotalValue" datatype="currency" width="100" align="right" headeralign="center" allowsort="false">
                            总价（元）
                            <input property="editor" class="mini-textbox" style="width: 100%;" />
                        </div>
                        <div field="LastVersionValue" datatype="currency" width="120" headeralign="center" allowsort="false" align="right">上一版总价（元）</div>
                        <div field="TenderValue" datatype="currency" width="120" headeralign="center" allowsort="false" align="right">概算版总价（元）</div>
                        <div field="Branding" width="100" headeralign="center" allowsort="false">品牌</div>
                        <div field="Model" width="200" headeralign="center" allowsort="false">规格及参数</div>
                        <div field="Remark" width="200" headeralign="center" allowsort="false">
                            备注
                            <input property="editor" class="mini-textbox" style="width: 100%;" />
                        </div>

                        <div field="Material" width="100" headeralign="center" allowsort="false">材质</div>
                    </div>

                </div>
            </div>
        </div>
        @{
            if (!String.IsNullOrEmpty(ViewBag.VersionID))
            {
                <div title="预算审批表" url="/MvcConfig/UI/Form/PageView?TmplCode=BudgetSubmit&ID=@ViewBag.VersionID&FuncType=View">
                </div>
                //不在tab显示
                //<div title="预算设备清单" url="/EPC/Design/BudgetBom/TreeList?EngineeringInfoID=@ViewBag.EngineeringInfoID">
                //</div>
            }
        }
    </div>
</div>

<ul id="gridMenu" class="mini-contextmenu" onbeforeopen="onBeforeOpen">
    <li name="add" iconcls="icon-add" onclick="onAdd">下方插入行</li>
    <li name="addChild" iconcls="icon-add" onclick="onAddChild">插入子节点</li>
    <li name="sumChildren" iconcls="icon-remove" onclick="sumChildren">根据子科目汇总</li>
    <li name="remove" iconcls="icon-remove" onclick="onRemove">删除行</li>
    <li name="revert" iconcls="icon-remove" onclick="onRevert">撤销更改</li>
</ul>
<ul id="popupMenu" class="mini-contextmenu">
    <li name="remove" iconcls="icon-add" onclick="bidImport">从投标概算导入全部</li>
    <li name="remove" iconcls="icon-add" onclick="bomImport">选择导入设备清单</li>
    @*<li name="remove" iconcls="icon-add" onclick="boqImport">选择导入建安工程量清单</li>*@
    <li name="remove" iconcls="icon-add" onclick="pbsImport">导入结构策划数据</li>
</ul>

<form id='excelFormBudget' style='display:none;' action='ExportExcel' method='post' target='excelIFrameBudget'>
    <input type='hidden' name='VersionID' />
    <input type='hidden' name='jsonColumns' />
</form>
<iframe id='excelIFrameBudget' name='excelIFrameBudget' style='display:none;'></iframe>

@{
    if (ViewBag.VirtualScroll == "true")
    {
        <style type="text/css">
            .mini-grid-cell {
                padding-left: 4px;
                padding-right: 2px;
                padding-top: 0px;
                padding-bottom: 0px;
                border-right: #ececec 1px solid;
            }
        </style>
    }
}

<script type="text/javascript">
    var flowEnd = "@Html.Raw(ViewBag.FlowEnd)";
    var versionID = "@Html.Raw(ViewBag.VersionID)";

</script>
<script id="formTemplate" type="text/x-jquery-tmpl">
    <div style="text-align:left; font-weight:bolder; color:red;">上一版内容</div>
    <table class="mini-grid-table" cellspacing="0" cellpadding="0" style="width:700px;table-layout:fixed;">
        <tr>
            <td class="mini-grid-headerCell mini-grid-bottomCell " style="width: 200px;text-align:center">名称</td>
            <td class="mini-grid-headerCell mini-grid-bottomCell " style="width: 100px;text-align:center">数量</td>
            <td class="mini-grid-headerCell mini-grid-bottomCell " style="width: 100px;text-align:center">  单价（元）</td>
            <td class="mini-grid-headerCell mini-grid-bottomCell " style="width: 100px;text-align:center">总价（元）</td>
            <td class="mini-grid-headerCell mini-grid-bottomCell " style="width: 100px;text-align:center">品牌</td>
            <td class="mini-grid-headerCell mini-grid-bottomCell " style="width: 200px;text-align:center"> 备注</td>
        </tr>
        <tr>
            <td style="width: 100px;text-align:center">${Name}</td>
            <td style="width: 100px;text-align:center">${Quantity}</td>
            <td style="width: 100px;text-align:center">${UnitPrice}</td>
            <td style="width: 100px;text-align:center">${TotalValue}</td>
            <td style="width: 100px;text-align:center">${Branding}</td>
            <td style="width: 100px;text-align:center">${Remark}</td>
        </tr>
    </table>
</script>
<script type="text/javascript">
    var showType = [{ text: "显示全部", value: "All" }, { text: "仅显示差异", value: "Diff" }, { text: "仅显示最新", value: "New" }];
    var engineeringInfoID = getQueryString("EngineeringInfoID");
    if (versionID) {
        var url = "GetVersionTreeList?VersionID=" + versionID + "&ShowType=New&showAll=false";
        $("#dataTree").attr("url", url);
    }
    normalParamSettings.gridId = "dataTree";
    windowParamSettings.gridId = "dataTree";

    $(window).bind('beforeunload', function () {
        var dataTree = mini.get("dataTree");
        var changes = dataTree.getChanges();
        if (changes.length > 0) {
            return false;
        }
    });

    function exportToExcel() {
        downloadExcelData("Budget", versionID);
    }

    function excelImport() {
        var validateUrl = "/EPC/Design/BOM/ValidateData?VersionID=" + versionID;
        var saveUrl = "/EPC/Design/BOM/SaveExcelData?VersionID=" + versionID;
        var excelKey = "EBOM_" + majorCode + "_Import";
        ImportExcel(excelKey, validateUrl, saveUrl);
    }

    function bidImport() {
        msgUI("该操作将会以投标概算的价格覆盖预算编制价格，您确定要继续吗？", 2, function (result) {
            if (result != "ok") return;
            addExecuteParam("VersionID", versionID);
            execute("ImportFromBid", {
                showLoading: true, refresh: false, onComplete: function (data) {
                    var grid = mini.get("dataTree");
                    grid.reload();
                }, validateForm: false
            });
        });
    }

    function bomImport() {
        var url = "/EPC/EBomSelector/EBomSelector?EngineeringInfoID=" + engineeringInfoID;
        openWindow(url, {
            refresh: false, title: "设备材料清单导入", width: "85%", height: "90%", addQueryString: false,
            onDestroy: function (data) {
                if (!data || data == "close") {
                    return;
                }
                addExecuteParam("EBomID", data.ID);
                addExecuteParam("VersionID", versionID);
                execute("ImportFromEBom", {
                    showLoading: true, refresh: false, onComplete: function (data) {
                        var grid = mini.get("dataTree");
                        grid.reload();
                    }, validateForm: false
                });
            }
        });
    }

    function boqImport() {
        addExecuteParam("EngineeringInfoID", engineeringInfoID);
        addExecuteParam("VersionID", versionID);

        execute("ImportFromBOQ", {
            showLoading: true, refresh: false, onComplete: function (data) {
                var grid = mini.get("dataTree");
                grid.reload();
            }, validateForm: false
        });
    }

    function pbsImport() {
        msgUI("确定要导入结构策划数据吗？", 2, function (result) {
            if (result != "ok") return;
            addExecuteParam("VersionID", versionID);
            execute("ImportPBS", {
                showLoading: true, refresh: false, onComplete: function (data) {
                    var grid = mini.get("dataTree");
                    grid.reload();
                }, validateForm: false
            });
        });
    }

    // 响应自定义列的弹出层的导出事件
    function downloadExcelData(key, versionID) {
        var grid = mini.get("dataTree");
        var dataurl = changeToFullUrl(grid.getUrl());
        var includeColumns = "";
        var columns = grid.getBottomColumns();
        function getColumns(columns) {
            columns = columns.clone();
            for (var i = columns.length - 1; i >= 0; i--) {
                var column = columns[i];
                if (!column.field || !column.header || column.header.trim() == '' || column.visible == false) {
                    columns.removeAt(i);
                } else {
                    if (includeColumns.length == 0 || includeColumns.indexOf(column.field.toLowerCase() + ',') >= 0) {
                        var c = { ChineseName: column.header.trim(), FieldName: column.field, TableName: key };
                        // 判断是否为时间字段，设置格式化字符串
                        if (column.dateFormat) {
                            c.DateFormat = column.dateFormat;
                        }
                        //导出excel使用显示字段
                        if (column.displayField) {
                            c.FieldName = column.displayField;
                        }
                        if (column.dataType) {
                            c.DataType = column.dataType;
                        }

                        columns[i] = c;
                    }
                }
            }
            return columns;
        }

        var columns = getColumns(columns);
        // 提交下载表单（利用iframe模拟Ajax）
        var $excelForm = $("#excelForm" + $.trim(key));
        if ($excelForm.length == 0) {
            alert('请确保ID为excelForm的表单存在！');
        }
        var title = document.title;
        var formData = {
            referUrl: window.location.href,
            dataUrl: dataurl,
            VersionID: versionID,
            excelKey: key,
            title: title,
            jsonColumns: mini.encode(columns)
        };
        for (var p in formData) {
            $excelForm.find("input[name='" + p + "']").val(formData[p]);
        }
        $excelForm.submit();
    }

    function collapseLevel() {
        var level = mini.getbyName("PBSType").getValue();
        var tree = mini.get("dataTree");
        tree.expandAll();
        if (level == "Root") {
            tree.collapseLevel(0);
        }
        else if (level == "SubProject") {
            tree.collapseLevel(1);
        }
    }

    function onDrawingCell(e) {
        var treeGrid = e.sender;
        var record = e.record;
        var column = e.column;
        var field = e.field;
        if (record.ModifyState == "Add") {
            if (field == "Name") {
                e.cellHtml = record.Name + "<img style=\"height:18px;float:right;\" src=\"/EPC/Scripts/Design/Bom/new_red.png\" />";// record.Name + "new";
            }
            e.cellStyle = "background:#BBFFFF;";
        }
        else if (record.ModifyState == "Modify") {
            if (field == "Name") {
                e.cellHtml = '<span id="' + record.ID + '" class="showCellTooltip" data-placement="bottomleft">' + record.Name + '</span>';
            }
            e.cellStyle = " background: yellow;";
        }
        else if (record.ModifyState == "Remove") {
            e.cellStyle = "background:url('/EPC/Scripts/Design/Bom/red-line.jpg')  center ;color:#fff;";
        }
        if (record.NodeType != "Detail") {
            e.cellStyle += "font-weight:bolder; ";
        }
        if (record.CustomEdit == "True" && record.NodeType != "Detail") {
            e.cellStyle += "color:red;";
        }
    }

    $(document).ready(function () {
        var tip = new mini.ToolTip();
        tip.set({
            target: document,
            selector: '.showCellTooltip',
            onbeforeopen: function (e) {
                e.cancel = false;
            },
            onopen: function (e) {
                var el = e.element;
                var id = el.id;
                if (id) {
                    this.showLoading();
                    addExecuteParam("ID", id);
                    execute("GetLastDetailInfo", {
                        showLoading: false, refresh: false, onComplete: function (data) {
                            var html = $("#formTemplate").tmpl(data);
                            tip.setContent(html);
                        }, validateForm: false
                    });
                }
            }
        });
    });

    function viewVersionList() {
        var url = "/MvcConfig/UI/List/PageView?TmplCode=BudgetVersionList&EngineeringInfoID=" + engineeringInfoID + "&VersionID=" + versionID;
        openWindow(url, {
            refresh: false, title: "预算历史版本", width: "70%", height: "60%",
            onDestroy: function () { }
        });
    }

    function onBeforeOpen(e) {
        var dataTree = mini.get("dataTree");
        var menu = e.sender;
        var node = dataTree.getSelectedNode();
        if (!node || flowEnd == "True") {
            e.cancel = true;
            //阻止浏览器默认右键菜单
            e.htmlEvent.preventDefault();
            return;
        }
        else if (node.CanEdit == "0" && node.CanAdd == "0" && node.CanDelete == "0" && node.CustomEdit != "True") {
            e.cancel = true;
            e.htmlEvent.preventDefault();
            return;
        }
        else if (node.NodeType == "Detail") {
            e.cancel = true;
            e.htmlEvent.preventDefault();
            return;
        }
        var addItem = mini.getbyName("add", menu);
        var removeItem = mini.getbyName("remove", menu);
        var revertItem = mini.getbyName("revert", menu);
        var addChildItem = mini.getbyName("addChild", menu);
        var sumChildrenItem = mini.getbyName("sumChildren", menu);
        addItem.hide();
        removeItem.hide();
        revertItem.hide();
        addChildItem.hide();
        sumChildrenItem.hide();
        if (node.CanDelete == "1") {
            removeItem.show();
        }
        if (node.CanAdd == "1") {
            addChildItem.show();
        }

        var parent = getParent(dataTree, node);
        if (parent && parent.CanAdd == "1") {
            addItem.show();
        }
        if (node.CustomEdit == "True") {
            sumChildrenItem.show();
        }
    }

    var editableFields = "Quantity,TotalValue,UnitPrice,Remark";
    var bomEditableFields = "TotalValue,UnitPrice,Remark";
    var lastValue = 0;
    function OnCellBeginEdit(e) {
        var record = e.record, field = e.field;
        if (record.NodeType == "Detail" && bomEditableFields.indexOf(field) < 0) {
            e.cancel = true;
        }
        else if (flowEnd == "True") {
            e.cancel = true;
        }
        else {
            if (record.CanEdit == "0" && editableFields.indexOf(field) < 0)
                e.cancel = true;
        }
        if (editableFields.indexOf(field) >= 0) {
            lastValue = record[field];
        }
    }

    function onCellEndEdit(e) {
        var sender = e.sender;
        var record = e.record;
        var column = e.column;
        var field = e.field;
        if (editableFields.indexOf(field) >= 0) {
            if (lastValue != e.value && (getChildren(sender, record).length > 0 || record.CalExpression)) {
                sender.updateRow(record, { CustomEdit: "True" });
            }
        }
        if (field == "Quantity" || field == "UnitPrice") {
            var quantity = parseFloat(record.Quantity);
            var unitPrice = parseFloat(record.UnitPrice);
            if (!isNaN(quantity) && !isNaN(unitPrice)) {
                //var totalValue = unitPrice * quantity;
                var totalValue = (unitPrice * quantity).toFixed(2);
                sender.updateRow(record, { TotalValue: totalValue });

                sumTotalValue(sender, record);
                CalExpression(sender);
            }
            sumTotalValue(sender, record);
        }
        else if (field == "TotalValue") {
            sumTotalValue(sender, record);
            CalExpression(sender);
            sumTotalValue(sender, record);
            //CalIndexValue();
        }
        lastValue = 0;
    }

    function create() {
        msgUI("您确定要开始编制预算吗？", 2, function (result) {
            if (result != "ok") return;
            addExecuteParam("EngineeringInfoID", engineeringInfoID);
            execute("UpgradBudget", {
                showLoading: true, refresh: false, onComplete: function (data) {
                    window.location.reload();
                }, validateForm: false
            });
        });
    }

    function upgrad() {
        msgUI("您确定需要升版预算表吗？", 2, function (result) {
            if (result != "ok") return;
            addExecuteParam("EngineeringInfoID", engineeringInfoID);
            execute("UpgradBudget", {
                showLoading: true, refresh: false, onComplete: function (data) {
                    window.location.reload();
                }, validateForm: false
            });
        });
    }

    function startFlow() {
        if (!versionID) {
            msgUI("没有找到指定的版本，无法提交"); return;
        }
        var tree = mini.get("dataTree");
        var nodes = tree.getChanges();
        addExecuteParam("VersionID", versionID);
        addExecuteParam("ListData", mini.encode(nodes));
        execute("SaveNodes", {
            showLoading: true, refresh: false, onComplete: function (data) {
                var url = "/EPC/ExpenseControl/BudgetSubmit/PageView?FlowCode=BudgetSubmit&TmplCode=BudgetSubmit&ID=" + versionID;
                openWindow(url, {
                    refresh: false, title: "预算审批", width: "90%", height: "90%",
                    onDestroy: function (data) {
                        if (data == "close") return;
                        window.location.reload();
                    }
                });
            }, validateForm: false
        });
    }

    function saveData() {
        var tree = mini.get("dataTree");
        var nodes = tree.getChanges();
        addExecuteParam("VersionID", versionID);
        addExecuteParam("ListData", mini.encode(nodes));
        execute("SaveNodes", {
            showLoading: true, refresh: false, onComplete: function (data) {
                tree.reload();
            }, validateForm: false
        });
    }

    function revertEdit() {
        var node = dataTree.getSelectedNode();
        if (!node)
            return;

    }

    function revert() {
        msgUI("撤销操作将撤销所有的编辑内容，您确定要继续吗？", 2, function (result) {
            if (result != "ok") return;
            addExecuteParam("VersionID", versionID);
            execute("Revert", {
                showLoading: true, refresh: false, onComplete: function (data) {
                    window.location.reload();
                }, validateForm: false
            });
        });
    }

    function sumChildren() {
        var dataTree = mini.get("dataTree");
        var node = dataTree.getSelectedNode();
        if (!node) {
            return;
        }
        var children = getChildren(dataTree, node);
        var totalValue = 0;
        for (var i = 0; i < children.length; i++) {
            var value = parseFloat(children[i].TotalValue);
            if (isNaN(value)) {
                value = 0;
            }
            totalValue += value;
        }
        dataTree.updateRow(node, { TotalValue: totalValue, CustomEdit: "False" });
        sumTotalValue(dataTree, node);
        CalExpression(dataTree);
        sumTotalValue(dataTree, node);
    }

    function onAdd() {
        var dataTree = mini.get("dataTree");
        var node = dataTree.getSelectedNode();
        if (!node) {
            return;
        }
        addExecuteParam("NodeID", node.ID);
        addExecuteParam("AddMode", "After");
        addExecuteParam("VersionID", versionID);
        execute("AddVersionCBS", {
            showLoading: true, refresh: false, onComplete: function (data) {
                dataTree.addNode(data, "after", node);
            }, validateForm: false
        });
    }

    function onAddChild() {
        var dataTree = mini.get("dataTree");
        var node = dataTree.getSelectedNode();
        if (!node) {
            return;
        }
        addExecuteParam("NodeID", node.ID);
        addExecuteParam("AddMode", "AddChild");
        addExecuteParam("VersionID", versionID);
        execute("AddVersionCBS", {
            showLoading: true, refresh: false, onComplete: function (data) {
                dataTree.addNode(data, "add", node);
            }, validateForm: false
        });

    }

    function onRemove() {
        var dataTree = mini.get("dataTree");
        var nodes = dataTree.getSelecteds();
        if (nodes.length == 0) {
            return;
        }
        msgUI("您确定要删除选中的内容吗？", 2, function (result) {
            if (result != "ok") return;
            addExecuteParam("ListData", mini.encode(nodes));
            execute("DeleteNodes", {
                showLoading: true, refresh: false, onComplete: function (data) {
                    for (var i = 0; i < nodes.length; i++) {
                        if (nodes[i].ModifyState == "Add") {
                            dataTree.removeNode(nodes[i]);
                        }
                        else {
                            var showType = mini.getbyName("ShowType");
                            if (showType && showType.getValue() == "New") {
                                dataTree.removeNode(nodes[i]);
                            }
                            else {
                                dataTree.updateNode(nodes[i], { ModifyState: "Remove" });
                            }
                        }
                        var parentNode = getParent(dataTree, nodes[i]);
                        if (parentNode) {
                            if (!parentNode.CustomEdit || parentNode.CustomEdit != "True") {
                                var children = getChildren(dataTree, parentNode);
                                var totalValue = 0;
                                for (var m = 0; m < children.length; m++) {
                                    var value = parseFloat(children[m].TotalValue);
                                    if (isNaN(value)) {
                                        value = 0;
                                    }
                                    totalValue += value;
                                }
                                if (totalValue == parentNode.LastVersionValue && parentNode.ModifyState == "Modify") {
                                    dataTree.updateRow(parentNode, { TotalValue: totalValue, CustomEdit: "False", ModifyState: "Normal" });
                                }
                                else {
                                    dataTree.updateRow(parentNode, { TotalValue: totalValue, CustomEdit: "False" });
                                }
                                sumTotalValue(dataTree, parentNode);
                            }
                        }
                    }
                    dataTree.accept();
                }, validateForm: false
            });
        });
    }

    function onRevert() {
        var dataTree = mini.get("dataTree");
        var nodes = dataTree.getSelecteds();
        if (nodes.length == 0) {
            return;
        }
        addExecuteParam("ListData", mini.encode(nodes));
        addExecuteParam("VersionID", mini.encode(nodes));
        execute("RevertNode", {
            showLoading: true, refresh: false, onComplete: function (data) {
                for (var i = 0; i < nodes.length; i++) {
                    var node = nodes[i];
                    if (node.ModifyState == "Add") {
                        dataTree.removeNode(node);
                    }
                    else {
                        for (var m = 0; m < data.length; m++) {
                            if (data[m].ID == node.ID) {
                                dataTree.updateNode(node, data[m]);
                                dataTree.commitEditRow(node);
                                dataTree.acceptRecord(node);
                            }
                        }
                    }
                }
            }, validateForm: false
        });
    }

    function onShowTypeChanged(e) {
        var tree = mini.get("dataTree");
        var showDiff = mini.getbyName("ShowType").getValue();
        var showAll = mini.get("showAll").getValue();
        tree.load({ showAll: showAll, ShowType: showDiff });
    }

    function onCheckBoxValueChanged(e) {
        var tree = mini.get("dataTree");
        var showAll = mini.get("showAll").getValue();// false;
        var showDiff = mini.getbyName("ShowType").getValue();
        tree.load({ showAll: showAll, ShowType: showDiff });
    }

    function flowTrace() {
        var url = "/MvcConfig/Workflow/Trace/Diagram?ID=" + versionID;
        openWindow(url, {
            refresh: false, title: "流程跟踪", width: "80%", height: "85%",
            onDestroy: function () { }
        });
    }

    function sumTotalValue(tree, node) {
        if (!tree || !node) return;
        var parentNode = getParent(tree, node);
        if (parentNode) {
            if (!parentNode.CustomEdit || parentNode.CustomEdit != "True") {
                var children = getChildren(tree, parentNode);
                var totalValue = 0;
                for (var i = 0; i < children.length; i++) {
                    var child = children[i];
                    var childTotalValue = parseFloat(child.TotalValue);
                    if (isNaN(childTotalValue))
                        childTotalValue = 0;
                    totalValue += childTotalValue;
                }

                if (totalValue == parentNode.LastVersionValue && parentNode.ModifyState == "Modify") {
                    tree.updateRow(parentNode, { TotalValue: totalValue.toFixed(2), ModifyState: "Normal" });
                }
                else {
                    tree.updateRow(parentNode, { TotalValue: totalValue.toFixed(2) });
                }
            }
            sumTotalValue(tree, parentNode);
        }
    }

    function getParent(tree, child) {
        if (!tree) {
            return null;
        }
        var list = tree.findNodes(function (node) {
            if (node.CBSID == child.CBSParentID) {
                return true;
            }
            else {
                return false;
            }
        });
        if (list.length > 0) {
            return list[0];
        }
        else
            return null;
    }

    function getChildren(tree, parentNode) {
        if (!tree || !parentNode) {
            return null;
        }
        return tree.findNodes(function (node) {
            if (node.CBSParentID == parentNode.CBSID && node.ModifyState != "Remove") {
                return true;
            }
            else {
                return false;
            }
        });
    }

    var reg = /\{[0-9a-zA-Z_\\.]*\}/;
    function getExpression(node, tree) {
        var expression = node.CalExpression;
        if (expression) {
            if (expression.indexOf("{") >= 0) {
                var array = reg.exec(expression);
                for (var i = 0; i < array.length; i++) {
                    var variable = array[0].replace("{", "").replace("}", "");
                    var variableNodes = tree.findNodes(function (node) {
                        if (node.Code == variable)
                            return true;
                        else
                            return false;
                    });
                    if (variableNodes.length == 0) {
                        continue;
                    }
                    var variableNode = variableNodes[0];
                    if (variableNode.CustomEdit == "True") {
                        var totalValue = parseFloat(variableNode.TotalValue);
                        if (isNaN(totalValue)) {
                            totalValue = 0;
                        }
                        expression = expression.replace("{" + variable + "}", totalValue);
                    }
                    else if (variableNode.CalExpression) {
                        var subExpression = getExpression(variableNode, tree);
                        expression = expression.replace("{" + variable + "}", subExpression);
                    }
                    else {
                        var totalValue = parseFloat(variableNode.TotalValue);
                        if (isNaN(totalValue)) {
                            totalValue = 0;
                        }
                        expression = expression.replace("{" + variable + "}", totalValue);
                    }
                }
                return expression;
            }
            else {
                return expression;
            }
        }
        else {
            return "";
        }
    }

    function CalExpression(tree) {
        var calNodes = tree.findNodes(function (treeNode) {
            if (treeNode.CalExpression) {
                return true;
            }
            else {
                return false;
            }
        });

        for (var i = 0; i < calNodes.length; i++) {
            var calNode = calNodes[i];
            if (calNode.CustomEdit == "True") {
                continue;
            }
            var formula = getExpression(calNode, tree);
            var totalValue = eval(formula);
            tree.updateRow(calNode, { TotalValue: totalValue/*, ModifyState: "Modify"*/ });
        }
    }
</script>