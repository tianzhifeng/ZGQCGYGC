using Base.Logic.Domain;
using Base.Logic.Model.UI.Form;
using Formula;
using Formula.Helper;
using System;
using System.Collections.Generic;
using System.Data.Entity;
using System.Linq;
using System.Text;
using System.Web;
using System.Web.Mvc;
using Config.Logic;
using System.IO;
using Base.Logic.BusinessFacade;
using System.Text.RegularExpressions;
using Workflow.Logic.Domain;
using Config;
using System.Data;
using Aspose.Words;
using System.Web.UI;
using Workflow.Logic;
using MvcAdapter;
using Formula.Exceptions;
using Base.Logic;

namespace MvcConfig.Areas.Workflow.Controllers
{
    public class FlowController : MvcAdapter.BaseController
    {
        private DbContext _entities = null;
        Regex regTable = new Regex(@"<table[^>]*>[\s\S]*?</table>");
        Regex regTR = new Regex(@"<tr[^>]*>[\s\S]*?</tr>");
        Regex regTD = new Regex(@"<td[^>]*>[\s\S]*?</td>");
        Regex regNumber = new Regex(@"^[0-9]*$");
        Regex regH1 = new Regex(@"<h1[^>]*>[\s\S]*?</h1>");
        private string replace_empty = "&#xa0;";
        private string replace_unit = "U:";
        private string replace_enum = "E:";
        private string replace_description = "D:";

        private string LayoutButton = @"[
{'id':'btnAdd', 'URL':'/MvcConfig/UI/Form/PageView?TmplCode={TmplCode}','iconcls':'icon-add','text':'增加','TextEN':'Add','Enabled':'false','Visible':'false','plain':'true','Settings':'{PopupTitle:\'增加\',ParamGrid:\'navDataGrid\'}'},
{'id':'btnModify', 'URL':'/MvcConfig/UI/Form/PageView?TmplCode={TmplCode}&ID={ID}','iconcls':'icon-edit','text':'编辑','TextEN':'Edit','Enabled':'false','Visible':'false','plain':'true','Settings':'{SelectMode:\'mustSelectOneRow\',PopupTitle:\'编辑\'}'},
{'id':'btnDelete', 'iconcls':'icon-remove','text':'删除','TextEN':'Delete','Enabled':'false','Visible':'false','plain':'true','Settings':'{\'onclick\':\'del();\',SelectMode:\'mustSelectRow\',Confirm:\'true\'}'},
{'id':'btnView','URL':'/MvcConfig/UI/Form/PageView?TmplCode={TmplCode}&ID={ID}&FuncType=View','iconcls':'icon-search','text':'查看','TextEN':'View','Enabled':'false','Visible':'false','plain':'true','Settings':'{SelectMode:\'mustSelectOneRow\',PopupTitle:\'查看\'}'},
{'id':'btnStart','URL':'/MvcConfig/UI/Form/PageView?TmplCode={TmplCode}&FlowCode={TmplCode}','iconcls':'icon-add','text':'启动流程','TextEN':'StartFlow','Enabled':'true','Visible':'true','plain':'true','Settings':'{PopupTitle:\'启动\'}'},
{'id':'btnView', 'URL':'/MvcConfig/UI/Form/PageView?TmplCode={TmplCode}&FlowCode={TmplCode}&ID={ID}','iconcls':'icon-search','text':'查看流程表单','TextEN':'ViewFlow','Enabled':'true','Visible':'true','plain':'true','Settings':'{SelectMode:\'mustSelectOneRow\',PopupTitle:\'查看\'}'},
{'id':'btnSelect','iconcls':'icon-refer','text':'选择','TextEN':'Select','Enabled':'false','Visible':'false','plain':'true','Settings':'{\'onclick\':\'returnList();\',SelectMode:\'mustSelectRow\',Confirm:\'false\'}'},
{'id':'btnTrace','URL':'/MvcConfig/Workflow/Trace/Diagram?ID={ID}&FuncType=FlowTrace','iconcls':'icon-flowstart','text':'流程跟踪','TextEN':'Trace','Enabled':'true','Visible':'true','plain':'true','Settings':'{SelectMode:\'mustSelectOneRow\',PopupTitle:\'流程跟踪\'}'},
{'id':'btnExportExcel','iconcls':'icon-excel','text':'导出Excel','TextEN':'Excel','Enabled':'false','Visible':'false','plain':'true','Settings':'{\'onclick\':\'exportList();\'}'},
{'id':'btnExportWord','iconcls':'icon-word','text':'导出Word','TextEN':'Word','Enabled':'false','Visible':'false','plain':'true','Settings':'{\'onclick\':\'exportWord();\'}'},
{'id':'btnExportQRCode','iconcls':'icon-pdf','text':'导出二维码','TextEN':'QRCode','Enabled':'false','Visible':'false','Settings':'{\'onclick\':\'ExportQRCode();\'}'},
{'id':'btnPrintForm','iconcls':'icon-print','text':'Word打印','TextEN':'PrintForm','Enabled':'true','Visible':'false','Settings':'{\'onclick\':\'funPrintWord();\'}'},
{'id':'btnRowAdd','iconcls':'icon-add','text':'新增行','TextEN':'RowAdd','Enabled':'false','Visible':'false','Settings':'{\'onclick\':\'addEditRow();\'}'},
{'id':'btnRowDelete','iconcls':'icon-remove','text':'删除行','TextEN':'RowDelete','Enabled':'false','Visible':'false','Settings':'{\'onclick\':\'deleteEditRow();\'}'},
{'id':'btnRowMoveUp','iconcls':'icon-up','text':'上移','TextEN':'RowMoveUp','Enabled':'false','Visible':'false','Settings':'{\'onclick\':\'moveUp();\'}'},
{'id':'btnRowMoveDown','iconcls':'icon-down','text':'下移','TextEN':'RowMoveDown','Enabled':'false','Visible':'false','Settings':'{\'onclick\':\'moveDown();\'}'},
{'id':'btnRowSaveList','iconcls':'icon-save','text':'保存','TextEN':'RowSaveList','Enabled':'false','Visible':'false','Settings':'{\'onclick\':\'saveEditList();\'}'},
{'id':'btnPrint','URL':'/MvcConfig/UI/Form/FormPrint?TmplCode={TmplCode}&ID={ID}','iconcls':'icon-print','text':'打印','TextEN':'Print','Enabled':'false','Visible':'false','Settings':'{SelectMode:\'mustSelectOneRow\',PopupTitle:\'打印\'}'},
{'id':'btnAddSubnode', 'URL':'/MvcConfig/UI/Form/PageView?TmplCode={TmplCode}&ParentID={ID}&IsTreeGrid=true','iconcls':'icon-add','text':'增加子节点','TextEN':'Add','Enabled':'false','Visible':'false','Settings':'{SelectMode:\'mustSelectOneRow\',PopupTitle:\'增加子节点\'}'},
{'id':'btnMoveNode', 'iconcls':'icon-left','text':'层级移动','TextEN':'MoveNode','Enabled':'false','Visible':'false','Settings':'{\'onclick\':\'moveNode();\',SelectMode:\'mustSelectRow\',Confirm:\'true\'}'},
{'id':'btnMoveLeftNode', 'iconcls':'icon-left','text':'向左移','TextEN':'MoveLeftNode','Enabled':'false','Visible':'false','Settings':'{\'onclick\':\'moveLeftNode();\',SelectMode:\'mustSelectRow\',Confirm:\'true\'}'},
{'id':'btnMoveRightNode', 'iconcls':'icon-right','text':'向右移','TextEN':'MoveRightNode','Enabled':'false','Visible':'false','Settings':'{\'onclick\':\'moveRightNode();\',SelectMode:\'mustSelectRow\',Confirm:\'true\'}'}
]";
        private string LayoutGrid = "{\"multiSelect\":\"true\",\"allowAlternating\":\"false\",\"frozenStartColumn\":\"\",\"frozenEndColumn\":\"\",\"drawcell\":\"\"}";


        #region 汉字拼音首字母列表
        ///  summary>
        /// 汉字拼音首字母列表 本列表包含了20902个汉字,用于配合 GetChineseSpell 函数使用,本表收录的字符的Unicode编码范围为19968至40869
        ///  /summary>
        private static string ChineseFirstPY =
        "YDYQSXMWZSSXJBYMGCCZQPSSQBYCDSCDQLDYLYBSSJGYZZJJFKCCLZDHWDWZJLJPFYYNWJJTMYHZWZHFLZPPQHGSCYYYNJQYXXGJ"
        + "HHSDSJNKKTMOMLCRXYPSNQSECCQZGGLLYJLMYZZSECYKYYHQWJSSGGYXYZYJWWKDJHYCHMYXJTLXJYQBYXZLDWRDJRWYSRLDZJPC"
        + "BZJJBRCFTLECZSTZFXXZHTRQHYBDLYCZSSYMMRFMYQZPWWJJYFCRWFDFZQPYDDWYXKYJAWJFFXYPSFTZYHHYZYSWCJYXSCLCXXWZ"
        + "ZXNBGNNXBXLZSZSBSGPYSYZDHMDZBQBZCWDZZYYTZHBTSYYBZGNTNXQYWQSKBPHHLXGYBFMJEBJHHGQTJCYSXSTKZHLYCKGLYSMZ"
        + "XYALMELDCCXGZYRJXSDLTYZCQKCNNJWHJTZZCQLJSTSTBNXBTYXCEQXGKWJYFLZQLYHYXSPSFXLMPBYSXXXYDJCZYLLLSJXFHJXP"
        + "JBTFFYABYXBHZZBJYZLWLCZGGBTSSMDTJZXPTHYQTGLJSCQFZKJZJQNLZWLSLHDZBWJNCJZYZSQQYCQYRZCJJWYBRTWPYFTWEXCS"
        + "KDZCTBZHYZZYYJXZCFFZZMJYXXSDZZOTTBZLQWFCKSZSXFYRLNYJMBDTHJXSQQCCSBXYYTSYFBXDZTGBCNSLCYZZPSAZYZZSCJCS"
        + "HZQYDXLBPJLLMQXTYDZXSQJTZPXLCGLQTZWJBHCTSYJSFXYEJJTLBGXSXJMYJQQPFZASYJNTYDJXKJCDJSZCBARTDCLYJQMWNQNC"
        + "LLLKBYBZZSYHQQLTWLCCXTXLLZNTYLNEWYZYXCZXXGRKRMTCNDNJTSYYSSDQDGHSDBJGHRWRQLYBGLXHLGTGXBQJDZPYJSJYJCTM"
        + "RNYMGRZJCZGJMZMGXMPRYXKJNYMSGMZJYMKMFXMLDTGFBHCJHKYLPFMDXLQJJSMTQGZSJLQDLDGJYCALCMZCSDJLLNXDJFFFFJCZ"
        + "FMZFFPFKHKGDPSXKTACJDHHZDDCRRCFQYJKQCCWJDXHWJLYLLZGCFCQDSMLZPBJJPLSBCJGGDCKKDEZSQCCKJGCGKDJTJDLZYCXK"
        + "LQSCGJCLTFPCQCZGWPJDQYZJJBYJHSJDZWGFSJGZKQCCZLLPSPKJGQJHZZLJPLGJGJJTHJJYJZCZMLZLYQBGJWMLJKXZDZNJQSYZ"
        + "MLJLLJKYWXMKJLHSKJGBMCLYYMKXJQLBMLLKMDXXKWYXYSLMLPSJQQJQXYXFJTJDXMXXLLCXQBSYJBGWYMBGGBCYXPJYGPEPFGDJ"
        + "GBHBNSQJYZJKJKHXQFGQZKFHYGKHDKLLSDJQXPQYKYBNQSXQNSZSWHBSXWHXWBZZXDMNSJBSBKBBZKLYLXGWXDRWYQZMYWSJQLCJ"
        + "XXJXKJEQXSCYETLZHLYYYSDZPAQYZCMTLSHTZCFYZYXYLJSDCJQAGYSLCQLYYYSHMRQQKLDXZSCSSSYDYCJYSFSJBFRSSZQSBXXP"
        + "XJYSDRCKGJLGDKZJZBDKTCSYQPYHSTCLDJDHMXMCGXYZHJDDTMHLTXZXYLYMOHYJCLTYFBQQXPFBDFHHTKSQHZYYWCNXXCRWHOWG"
        + "YJLEGWDQCWGFJYCSNTMYTOLBYGWQWESJPWNMLRYDZSZTXYQPZGCWXHNGPYXSHMYQJXZTDPPBFYHZHTJYFDZWKGKZBLDNTSXHQEEG"
        + "ZZYLZMMZYJZGXZXKHKSTXNXXWYLYAPSTHXDWHZYMPXAGKYDXBHNHXKDPJNMYHYLPMGOCSLNZHKXXLPZZLBMLSFBHHGYGYYGGBHSC"
        + "YAQTYWLXTZQCEZYDQDQMMHTKLLSZHLSJZWFYHQSWSCWLQAZYNYTLSXTHAZNKZZSZZLAXXZWWCTGQQTDDYZTCCHYQZFLXPSLZYGPZ"
        + "SZNGLNDQTBDLXGTCTAJDKYWNSYZLJHHZZCWNYYZYWMHYCHHYXHJKZWSXHZYXLYSKQYSPSLYZWMYPPKBYGLKZHTYXAXQSYSHXASMC"
        + "HKDSCRSWJPWXSGZJLWWSCHSJHSQNHCSEGNDAQTBAALZZMSSTDQJCJKTSCJAXPLGGXHHGXXZCXPDMMHLDGTYBYSJMXHMRCPXXJZCK"
        + "ZXSHMLQXXTTHXWZFKHCCZDYTCJYXQHLXDHYPJQXYLSYYDZOZJNYXQEZYSQYAYXWYPDGXDDXSPPYZNDLTWRHXYDXZZJHTCXMCZLHP"
        + "YYYYMHZLLHNXMYLLLMDCPPXHMXDKYCYRDLTXJCHHZZXZLCCLYLNZSHZJZZLNNRLWHYQSNJHXYNTTTKYJPYCHHYEGKCTTWLGQRLGG"
        + "TGTYGYHPYHYLQYQGCWYQKPYYYTTTTLHYHLLTYTTSPLKYZXGZWGPYDSSZZDQXSKCQNMJJZZBXYQMJRTFFBTKHZKBXLJJKDXJTLBWF"
        + "ZPPTKQTZTGPDGNTPJYFALQMKGXBDCLZFHZCLLLLADPMXDJHLCCLGYHDZFGYDDGCYYFGYDXKSSEBDHYKDKDKHNAXXYBPBYYHXZQGA"
        + "FFQYJXDMLJCSQZLLPCHBSXGJYNDYBYQSPZWJLZKSDDTACTBXZDYZYPJZQSJNKKTKNJDJGYYPGTLFYQKASDNTCYHBLWDZHBBYDWJR"
        + "YGKZYHEYYFJMSDTYFZJJHGCXPLXHLDWXXJKYTCYKSSSMTWCTTQZLPBSZDZWZXGZAGYKTYWXLHLSPBCLLOQMMZSSLCMBJCSZZKYDC"
        + "ZJGQQDSMCYTZQQLWZQZXSSFPTTFQMDDZDSHDTDWFHTDYZJYQJQKYPBDJYYXTLJHDRQXXXHAYDHRJLKLYTWHLLRLLRCXYLBWSRSZZ"
        + "SYMKZZHHKYHXKSMDSYDYCJPBZBSQLFCXXXNXKXWYWSDZYQOGGQMMYHCDZTTFJYYBGSTTTYBYKJDHKYXBELHTYPJQNFXFDYKZHQKZ"
        + "BYJTZBXHFDXKDASWTAWAJLDYJSFHBLDNNTNQJTJNCHXFJSRFWHZFMDRYJYJWZPDJKZYJYMPCYZNYNXFBYTFYFWYGDBNZZZDNYTXZ"
        + "EMMQBSQEHXFZMBMFLZZSRXYMJGSXWZJSPRYDJSJGXHJJGLJJYNZZJXHGXKYMLPYYYCXYTWQZSWHWLYRJLPXSLSXMFSWWKLCTNXNY"
        + "NPSJSZHDZEPTXMYYWXYYSYWLXJQZQXZDCLEEELMCPJPCLWBXSQHFWWTFFJTNQJHJQDXHWLBYZNFJLALKYYJLDXHHYCSTYYWNRJYX"
        + "YWTRMDRQHWQCMFJDYZMHMYYXJWMYZQZXTLMRSPWWCHAQBXYGZYPXYYRRCLMPYMGKSJSZYSRMYJSNXTPLNBAPPYPYLXYYZKYNLDZY"
        + "JZCZNNLMZHHARQMPGWQTZMXXMLLHGDZXYHXKYXYCJMFFYYHJFSBSSQLXXNDYCANNMTCJCYPRRNYTYQNYYMBMSXNDLYLYSLJRLXYS"
        + "XQMLLYZLZJJJKYZZCSFBZXXMSTBJGNXYZHLXNMCWSCYZYFZLXBRNNNYLBNRTGZQYSATSWRYHYJZMZDHZGZDWYBSSCSKXSYHYTXXG"
        + "CQGXZZSHYXJSCRHMKKBXCZJYJYMKQHZJFNBHMQHYSNJNZYBKNQMCLGQHWLZNZSWXKHLJHYYBQLBFCDSXDLDSPFZPSKJYZWZXZDDX"
        + "JSMMEGJSCSSMGCLXXKYYYLNYPWWWGYDKZJGGGZGGSYCKNJWNJPCXBJJTQTJWDSSPJXZXNZXUMELPXFSXTLLXCLJXJJLJZXCTPSWX"
        + "LYDHLYQRWHSYCSQYYBYAYWJJJQFWQCQQCJQGXALDBZZYJGKGXPLTZYFXJLTPADKYQHPMATLCPDCKBMTXYBHKLENXDLEEGQDYMSAW"
        + "HZMLJTWYGXLYQZLJEEYYBQQFFNLYXRDSCTGJGXYYNKLLYQKCCTLHJLQMKKZGCYYGLLLJDZGYDHZWXPYSJBZKDZGYZZHYWYFQYTYZ"
        + "SZYEZZLYMHJJHTSMQWYZLKYYWZCSRKQYTLTDXWCTYJKLWSQZWBDCQYNCJSRSZJLKCDCDTLZZZACQQZZDDXYPLXZBQJYLZLLLQDDZ"
        + "QJYJYJZYXNYYYNYJXKXDAZWYRDLJYYYRJLXLLDYXJCYWYWNQCCLDDNYYYNYCKCZHXXCCLGZQJGKWPPCQQJYSBZZXYJSQPXJPZBSB"
        + "DSFNSFPZXHDWZTDWPPTFLZZBZDMYYPQJRSDZSQZSQXBDGCPZSWDWCSQZGMDHZXMWWFYBPDGPHTMJTHZSMMBGZMBZJCFZWFZBBZMQ"
        + "CFMBDMCJXLGPNJBBXGYHYYJGPTZGZMQBQTCGYXJXLWZKYDPDYMGCFTPFXYZTZXDZXTGKMTYBBCLBJASKYTSSQYYMSZXFJEWLXLLS"
        + "ZBQJJJAKLYLXLYCCTSXMCWFKKKBSXLLLLJYXTYLTJYYTDPJHNHNNKBYQNFQYYZBYYESSESSGDYHFHWTCJBSDZZTFDMXHCNJZYMQW"
        + "SRYJDZJQPDQBBSTJGGFBKJBXTGQHNGWJXJGDLLTHZHHYYYYYYSXWTYYYCCBDBPYPZYCCZYJPZYWCBDLFWZCWJDXXHYHLHWZZXJTC"
        + "ZLCDPXUJCZZZLYXJJTXPHFXWPYWXZPTDZZBDZCYHJHMLXBQXSBYLRDTGJRRCTTTHYTCZWMXFYTWWZCWJWXJYWCSKYBZSCCTZQNHX"
        + "NWXXKHKFHTSWOCCJYBCMPZZYKBNNZPBZHHZDLSYDDYTYFJPXYNGFXBYQXCBHXCPSXTYZDMKYSNXSXLHKMZXLYHDHKWHXXSSKQYHH"
        + "CJYXGLHZXCSNHEKDTGZXQYPKDHEXTYKCNYMYYYPKQYYYKXZLTHJQTBYQHXBMYHSQCKWWYLLHCYYLNNEQXQWMCFBDCCMLJGGXDQKT"
        + "LXKGNQCDGZJWYJJLYHHQTTTNWCHMXCXWHWSZJYDJCCDBQCDGDNYXZTHCQRXCBHZTQCBXWGQWYYBXHMBYMYQTYEXMQKYAQYRGYZSL"
        + "FYKKQHYSSQYSHJGJCNXKZYCXSBXYXHYYLSTYCXQTHYSMGSCPMMGCCCCCMTZTASMGQZJHKLOSQYLSWTMXSYQKDZLJQQYPLSYCZTCQ"
        + "QPBBQJZCLPKHQZYYXXDTDDTSJCXFFLLCHQXMJLWCJCXTSPYCXNDTJSHJWXDQQJSKXYAMYLSJHMLALYKXCYYDMNMDQMXMCZNNCYBZ"
        + "KKYFLMCHCMLHXRCJJHSYLNMTJZGZGYWJXSRXCWJGJQHQZDQJDCJJZKJKGDZQGJJYJYLXZXXCDQHHHEYTMHLFSBDJSYYSHFYSTCZQ"
        + "LPBDRFRZTZYKYWHSZYQKWDQZRKMSYNBCRXQBJYFAZPZZEDZCJYWBCJWHYJBQSZYWRYSZPTDKZPFPBNZTKLQYHBBZPNPPTYZZYBQN"
        + "YDCPJMMCYCQMCYFZZDCMNLFPBPLNGQJTBTTNJZPZBBZNJKLJQYLNBZQHKSJZNGGQSZZKYXSHPZSNBCGZKDDZQANZHJKDRTLZLSWJ"
        + "LJZLYWTJNDJZJHXYAYNCBGTZCSSQMNJPJYTYSWXZFKWJQTKHTZPLBHSNJZSYZBWZZZZLSYLSBJHDWWQPSLMMFBJDWAQYZTCJTBNN"
        + "WZXQXCDSLQGDSDPDZHJTQQPSWLYYJZLGYXYZLCTCBJTKTYCZJTQKBSJLGMGZDMCSGPYNJZYQYYKNXRPWSZXMTNCSZZYXYBYHYZAX"
        + "YWQCJTLLCKJJTJHGDXDXYQYZZBYWDLWQCGLZGJGQRQZCZSSBCRPCSKYDZNXJSQGXSSJMYDNSTZTPBDLTKZWXQWQTZEXNQCZGWEZK"
        + "SSBYBRTSSSLCCGBPSZQSZLCCGLLLZXHZQTHCZMQGYZQZNMCOCSZJMMZSQPJYGQLJYJPPLDXRGZYXCCSXHSHGTZNLZWZKJCXTCFCJ"
        + "XLBMQBCZZWPQDNHXLJCTHYZLGYLNLSZZPCXDSCQQHJQKSXZPBAJYEMSMJTZDXLCJYRYYNWJBNGZZTMJXLTBSLYRZPYLSSCNXPHLL"
        + "HYLLQQZQLXYMRSYCXZLMMCZLTZSDWTJJLLNZGGQXPFSKYGYGHBFZPDKMWGHCXMSGDXJMCJZDYCABXJDLNBCDQYGSKYDQTXDJJYXM"
        + "SZQAZDZFSLQXYJSJZYLBTXXWXQQZBJZUFBBLYLWDSLJHXJYZJWTDJCZFQZQZZDZSXZZQLZCDZFJHYSPYMPQZMLPPLFFXJJNZZYLS"
        + "JEYQZFPFZKSYWJJJHRDJZZXTXXGLGHYDXCSKYSWMMZCWYBAZBJKSHFHJCXMHFQHYXXYZFTSJYZFXYXPZLCHMZMBXHZZSXYFYMNCW"
        + "DABAZLXKTCSHHXKXJJZJSTHYGXSXYYHHHJWXKZXSSBZZWHHHCWTZZZPJXSNXQQJGZYZYWLLCWXZFXXYXYHXMKYYSWSQMNLNAYCYS"
        + "PMJKHWCQHYLAJJMZXHMMCNZHBHXCLXTJPLTXYJHDYYLTTXFSZHYXXSJBJYAYRSMXYPLCKDUYHLXRLNLLSTYZYYQYGYHHSCCSMZCT"
        + "ZQXKYQFPYYRPFFLKQUNTSZLLZMWWTCQQYZWTLLMLMPWMBZSSTZRBPDDTLQJJBXZCSRZQQYGWCSXFWZLXCCRSZDZMCYGGDZQSGTJS"
        + "WLJMYMMZYHFBJDGYXCCPSHXNZCSBSJYJGJMPPWAFFYFNXHYZXZYLREMZGZCYZSSZDLLJCSQFNXZKPTXZGXJJGFMYYYSNBTYLBNLH"
        + "PFZDCYFBMGQRRSSSZXYSGTZRNYDZZCDGPJAFJFZKNZBLCZSZPSGCYCJSZLMLRSZBZZLDLSLLYSXSQZQLYXZLSKKBRXBRBZCYCXZZ"
        + "ZEEYFGKLZLYYHGZSGZLFJHGTGWKRAAJYZKZQTSSHJJXDCYZUYJLZYRZDQQHGJZXSSZBYKJPBFRTJXLLFQWJHYLQTYMBLPZDXTZYG"
        + "BDHZZRBGXHWNJTJXLKSCFSMWLSDQYSJTXKZSCFWJLBXFTZLLJZLLQBLSQMQQCGCZFPBPHZCZJLPYYGGDTGWDCFCZQYYYQYSSCLXZ"
        + "SKLZZZGFFCQNWGLHQYZJJCZLQZZYJPJZZBPDCCMHJGXDQDGDLZQMFGPSYTSDYFWWDJZJYSXYYCZCYHZWPBYKXRYLYBHKJKSFXTZJ"
        + "MMCKHLLTNYYMSYXYZPYJQYCSYCWMTJJKQYRHLLQXPSGTLYYCLJSCPXJYZFNMLRGJJTYZBXYZMSJYJHHFZQMSYXRSZCWTLRTQZSST"
        + "KXGQKGSPTGCZNJSJCQCXHMXGGZTQYDJKZDLBZSXJLHYQGGGTHQSZPYHJHHGYYGKGGCWJZZYLCZLXQSFTGZSLLLMLJSKCTBLLZZSZ"
        + "MMNYTPZSXQHJCJYQXYZXZQZCPSHKZZYSXCDFGMWQRLLQXRFZTLYSTCTMJCXJJXHJNXTNRZTZFQYHQGLLGCXSZSJDJLJCYDSJTLNY"
        + "XHSZXCGJZYQPYLFHDJSBPCCZHJJJQZJQDYBSSLLCMYTTMQTBHJQNNYGKYRQYQMZGCJKPDCGMYZHQLLSLLCLMHOLZGDYYFZSLJCQZ"
        + "LYLZQJESHNYLLJXGJXLYSYYYXNBZLJSSZCQQCJYLLZLTJYLLZLLBNYLGQCHXYYXOXCXQKYJXXXYKLXSXXYQXCYKQXQCSGYXXYQXY"
        + "GYTQOHXHXPYXXXULCYEYCHZZCBWQBBWJQZSCSZSSLZYLKDESJZWMYMCYTSDSXXSCJPQQSQYLYYZYCMDJDZYWCBTJSYDJKCYDDJLB"
        + "DJJSODZYSYXQQYXDHHGQQYQHDYXWGMMMAJDYBBBPPBCMUUPLJZSMTXERXJMHQNUTPJDCBSSMSSSTKJTSSMMTRCPLZSZMLQDSDMJM"
        + "QPNQDXCFYNBFSDQXYXHYAYKQYDDLQYYYSSZBYDSLNTFQTZQPZMCHDHCZCWFDXTMYQSPHQYYXSRGJCWTJTZZQMGWJJTJHTQJBBHWZ"
        + "PXXHYQFXXQYWYYHYSCDYDHHQMNMTMWCPBSZPPZZGLMZFOLLCFWHMMSJZTTDHZZYFFYTZZGZYSKYJXQYJZQBHMBZZLYGHGFMSHPZF"
        + "ZSNCLPBQSNJXZSLXXFPMTYJYGBXLLDLXPZJYZJYHHZCYWHJYLSJEXFSZZYWXKZJLUYDTMLYMQJPWXYHXSKTQJEZRPXXZHHMHWQPW"
        + "QLYJJQJJZSZCPHJLCHHNXJLQWZJHBMZYXBDHHYPZLHLHLGFWLCHYYTLHJXCJMSCPXSTKPNHQXSRTYXXTESYJCTLSSLSTDLLLWWYH"
        + "DHRJZSFGXTSYCZYNYHTDHWJSLHTZDQDJZXXQHGYLTZPHCSQFCLNJTCLZPFSTPDYNYLGMJLLYCQHYSSHCHYLHQYQTMZYPBYWRFQYK"
        + "QSYSLZDQJMPXYYSSRHZJNYWTQDFZBWWTWWRXCWHGYHXMKMYYYQMSMZHNGCEPMLQQMTCWCTMMPXJPJJHFXYYZSXZHTYBMSTSYJTTQ"
        + "QQYYLHYNPYQZLCYZHZWSMYLKFJXLWGXYPJYTYSYXYMZCKTTWLKSMZSYLMPWLZWXWQZSSAQSYXYRHSSNTSRAPXCPWCMGDXHXZDZYF"
        + "JHGZTTSBJHGYZSZYSMYCLLLXBTYXHBBZJKSSDMALXHYCFYGMQYPJYCQXJLLLJGSLZGQLYCJCCZOTYXMTMTTLLWTGPXYMZMKLPSZZ"
        + "ZXHKQYSXCTYJZYHXSHYXZKXLZWPSQPYHJWPJPWXQQYLXSDHMRSLZZYZWTTCYXYSZZSHBSCCSTPLWSSCJCHNLCGCHSSPHYLHFHHXJ"
        + "SXYLLNYLSZDHZXYLSXLWZYKCLDYAXZCMDDYSPJTQJZLNWQPSSSWCTSTSZLBLNXSMNYYMJQBQHRZWTYYDCHQLXKPZWBGQYBKFCMZW"
        + "PZLLYYLSZYDWHXPSBCMLJBSCGBHXLQHYRLJXYSWXWXZSLDFHLSLYNJLZYFLYJYCDRJLFSYZFSLLCQYQFGJYHYXZLYLMSTDJCYHBZ"
        + "LLNWLXXYGYYHSMGDHXXHHLZZJZXCZZZCYQZFNGWPYLCPKPYYPMCLQKDGXZGGWQBDXZZKZFBXXLZXJTPJPTTBYTSZZDWSLCHZHSLT"
        + "YXHQLHYXXXYYZYSWTXZKHLXZXZPYHGCHKCFSYHUTJRLXFJXPTZTWHPLYXFCRHXSHXKYXXYHZQDXQWULHYHMJTBFLKHTXCWHJFWJC"
        + "FPQRYQXCYYYQYGRPYWSGSUNGWCHKZDXYFLXXHJJBYZWTSXXNCYJJYMSWZJQRMHXZWFQSYLZJZGBHYNSLBGTTCSYBYXXWXYHXYYXN"
        + "SQYXMQYWRGYQLXBBZLJSYLPSYTJZYHYZAWLRORJMKSCZJXXXYXCHDYXRYXXJDTSQFXLYLTSFFYXLMTYJMJUYYYXLTZCSXQZQHZXL"
        + "YYXZHDNBRXXXJCTYHLBRLMBRLLAXKYLLLJLYXXLYCRYLCJTGJCMTLZLLCYZZPZPCYAWHJJFYBDYYZSMPCKZDQYQPBPCJPDCYZMDP"
        + "BCYYDYCNNPLMTMLRMFMMGWYZBSJGYGSMZQQQZTXMKQWGXLLPJGZBQCDJJJFPKJKCXBLJMSWMDTQJXLDLPPBXCWRCQFBFQJCZAHZG"
        + "MYKPHYYHZYKNDKZMBPJYXPXYHLFPNYYGXJDBKXNXHJMZJXSTRSTLDXSKZYSYBZXJLXYSLBZYSLHXJPFXPQNBYLLJQKYGZMCYZZYM"
        + "CCSLCLHZFWFWYXZMWSXTYNXJHPYYMCYSPMHYSMYDYSHQYZCHMJJMZCAAGCFJBBHPLYZYLXXSDJGXDHKXXTXXNBHRMLYJSLTXMRHN"
        + "LXQJXYZLLYSWQGDLBJHDCGJYQYCMHWFMJYBMBYJYJWYMDPWHXQLDYGPDFXXBCGJSPCKRSSYZJMSLBZZJFLJJJLGXZGYXYXLSZQYX"
        + "BEXYXHGCXBPLDYHWETTWWCJMBTXCHXYQXLLXFLYXLLJLSSFWDPZSMYJCLMWYTCZPCHQEKCQBWLCQYDPLQPPQZQFJQDJHYMMCXTXD"
        + "RMJWRHXCJZYLQXDYYNHYYHRSLSRSYWWZJYMTLTLLGTQCJZYABTCKZCJYCCQLJZQXALMZYHYWLWDXZXQDLLQSHGPJFJLJHJABCQZD"
        + "JGTKHSSTCYJLPSWZLXZXRWGLDLZRLZXTGSLLLLZLYXXWGDZYGBDPHZPBRLWSXQBPFDWOFMWHLYPCBJCCLDMBZPBZZLCYQXLDOMZB"
        + "LZWPDWYYGDSTTHCSQSCCRSSSYSLFYBFNTYJSZDFNDPDHDZZMBBLSLCMYFFGTJJQWFTMTPJWFNLBZCMMJTGBDZLQLPYFHYYMJYLSD"
        + "CHDZJWJCCTLJCLDTLJJCPDDSQDSSZYBNDBJLGGJZXSXNLYCYBJXQYCBYLZCFZPPGKCXZDZFZTJJFJSJXZBNZYJQTTYJYHTYCZHYM"
        + "DJXTTMPXSPLZCDWSLSHXYPZGTFMLCJTYCBPMGDKWYCYZCDSZZYHFLYCTYGWHKJYYLSJCXGYWJCBLLCSNDDBTZBSCLYZCZZSSQDLL"
        + "MQYYHFSLQLLXFTYHABXGWNYWYYPLLSDLDLLBJCYXJZMLHLJDXYYQYTDLLLBUGBFDFBBQJZZMDPJHGCLGMJJPGAEHHBWCQXAXHHHZ"
        + "CHXYPHJAXHLPHJPGPZJQCQZGJJZZUZDMQYYBZZPHYHYBWHAZYJHYKFGDPFQSDLZMLJXKXGALXZDAGLMDGXMWZQYXXDXXPFDMMSSY"
        + "MPFMDMMKXKSYZYSHDZKXSYSMMZZZMSYDNZZCZXFPLSTMZDNMXCKJMZTYYMZMZZMSXHHDCZJEMXXKLJSTLWLSQLYJZLLZJSSDPPMH"
        + "NLZJCZYHMXXHGZCJMDHXTKGRMXFWMCGMWKDTKSXQMMMFZZYDKMSCLCMPCGMHSPXQPZDSSLCXKYXTWLWJYAHZJGZQMCSNXYYMMPML"
        + "KJXMHLMLQMXCTKZMJQYSZJSYSZHSYJZJCDAJZYBSDQJZGWZQQXFKDMSDJLFWEHKZQKJPEYPZYSZCDWYJFFMZZYLTTDZZEFMZLBNP"
        + "PLPLPEPSZALLTYLKCKQZKGENQLWAGYXYDPXLHSXQQWQCQXQCLHYXXMLYCCWLYMQYSKGCHLCJNSZKPYZKCQZQLJPDMDZHLASXLBYD"
        + "WQLWDNBQCRYDDZTJYBKBWSZDXDTNPJDTCTQDFXQQMGNXECLTTBKPWSLCTYQLPWYZZKLPYGZCQQPLLKCCYLPQMZCZQCLJSLQZDJXL"
        + "DDHPZQDLJJXZQDXYZQKZLJCYQDYJPPYPQYKJYRMPCBYMCXKLLZLLFQPYLLLMBSGLCYSSLRSYSQTMXYXZQZFDZUYSYZTFFMZZSMZQ"
        + "HZSSCCMLYXWTPZGXZJGZGSJSGKDDHTQGGZLLBJDZLCBCHYXYZHZFYWXYZYMSDBZZYJGTSMTFXQYXQSTDGSLNXDLRYZZLRYYLXQHT"
        + "XSRTZNGZXBNQQZFMYKMZJBZYMKBPNLYZPBLMCNQYZZZSJZHJCTZKHYZZJRDYZHNPXGLFZTLKGJTCTSSYLLGZRZBBQZZKLPKLCZYS"
        + "SUYXBJFPNJZZXCDWXZYJXZZDJJKGGRSRJKMSMZJLSJYWQSKYHQJSXPJZZZLSNSHRNYPZTWCHKLPSRZLZXYJQXQKYSJYCZTLQZYBB"
        + "YBWZPQDWWYZCYTJCJXCKCWDKKZXSGKDZXWWYYJQYYTCYTDLLXWKCZKKLCCLZCQQDZLQLCSFQCHQHSFSMQZZLNBJJZBSJHTSZDYSJ"
        + "QJPDLZCDCWJKJZZLPYCGMZWDJJBSJQZSYZYHHXJPBJYDSSXDZNCGLQMBTSFSBPDZDLZNFGFJGFSMPXJQLMBLGQCYYXBQKDJJQYRF"
        + "KZTJDHCZKLBSDZCFJTPLLJGXHYXZCSSZZXSTJYGKGCKGYOQXJPLZPBPGTGYJZGHZQZZLBJLSQFZGKQQJZGYCZBZQTLDXRJXBSXXP"
        + "ZXHYZYCLWDXJJHXMFDZPFZHQHQMQGKSLYHTYCGFRZGNQXCLPDLBZCSCZQLLJBLHBZCYPZZPPDYMZZSGYHCKCPZJGSLJLNSCDSLDL"
        + "XBMSTLDDFJMKDJDHZLZXLSZQPQPGJLLYBDSZGQLBZLSLKYYHZTTNTJYQTZZPSZQZTLLJTYYLLQLLQYZQLBDZLSLYYZYMDFSZSNHL"
        + "XZNCZQZPBWSKRFBSYZMTHBLGJPMCZZLSTLXSHTCSYZLZBLFEQHLXFLCJLYLJQCBZLZJHHSSTBRMHXZHJZCLXFNBGXGTQJCZTMSFZ"
        + "KJMSSNXLJKBHSJXNTNLZDNTLMSJXGZJYJCZXYJYJWRWWQNZTNFJSZPZSHZJFYRDJSFSZJZBJFZQZZHZLXFYSBZQLZSGYFTZDCSZX"
        + "ZJBQMSZKJRHYJZCKMJKHCHGTXKXQGLXPXFXTRTYLXJXHDTSJXHJZJXZWZLCQSBTXWXGXTXXHXFTSDKFJHZYJFJXRZSDLLLTQSQQZ"
        + "QWZXSYQTWGWBZCGZLLYZBCLMQQTZHZXZXLJFRMYZFLXYSQXXJKXRMQDZDMMYYBSQBHGZMWFWXGMXLZPYYTGZYCCDXYZXYWGSYJYZ"
        + "NBHPZJSQSYXSXRTFYZGRHZTXSZZTHCBFCLSYXZLZQMZLMPLMXZJXSFLBYZMYQHXJSXRXSQZZZSSLYFRCZJRCRXHHZXQYDYHXSJJH"
        + "ZCXZBTYNSYSXJBQLPXZQPYMLXZKYXLXCJLCYSXXZZLXDLLLJJYHZXGYJWKJRWYHCPSGNRZLFZWFZZNSXGXFLZSXZZZBFCSYJDBRJ"
        + "KRDHHGXJLJJTGXJXXSTJTJXLYXQFCSGSWMSBCTLQZZWLZZKXJMLTMJYHSDDBXGZHDLBMYJFRZFSGCLYJBPMLYSMSXLSZJQQHJZFX"
        + "GFQFQBPXZGYYQXGZTCQWYLTLGWSGWHRLFSFGZJMGMGBGTJFSYZZGZYZAFLSSPMLPFLCWBJZCLJJMZLPJJLYMQDMYYYFBGYGYZMLY"
        + "ZDXQYXRQQQHSYYYQXYLJTYXFSFSLLGNQCYHYCWFHCCCFXPYLYPLLZYXXXXXKQHHXSHJZCFZSCZJXCPZWHHHHHAPYLQALPQAFYHXD"
        + "YLUKMZQGGGDDESRNNZLTZGCHYPPYSQJJHCLLJTOLNJPZLJLHYMHEYDYDSQYCDDHGZUNDZCLZYZLLZNTNYZGSLHSLPJJBDGWXPCDU"
        + "TJCKLKCLWKLLCASSTKZZDNQNTTLYYZSSYSSZZRYLJQKCQDHHCRXRZYDGRGCWCGZQFFFPPJFZYNAKRGYWYQPQXXFKJTSZZXSWZDDF"
        + "BBXTBGTZKZNPZZPZXZPJSZBMQHKCYXYLDKLJNYPKYGHGDZJXXEAHPNZKZTZCMXCXMMJXNKSZQNMNLWBWWXJKYHCPSTMCSQTZJYXT"
        + "PCTPDTNNPGLLLZSJLSPBLPLQHDTNJNLYYRSZFFJFQWDPHZDWMRZCCLODAXNSSNYZRESTYJWJYJDBCFXNMWTTBYLWSTSZGYBLJPXG"
        + "LBOCLHPCBJLTMXZLJYLZXCLTPNCLCKXTPZJSWCYXSFYSZDKNTLBYJCYJLLSTGQCBXRYZXBXKLYLHZLQZLNZCXWJZLJZJNCJHXMNZ"
        + "ZGJZZXTZJXYCYYCXXJYYXJJXSSSJSTSSTTPPGQTCSXWZDCSYFPTFBFHFBBLZJCLZZDBXGCXLQPXKFZFLSYLTUWBMQJHSZBMDDBCY"
        + "SCCLDXYCDDQLYJJWMQLLCSGLJJSYFPYYCCYLTJANTJJPWYCMMGQYYSXDXQMZHSZXPFTWWZQSWQRFKJLZJQQYFBRXJHHFWJJZYQAZ"
        + "MYFRHCYYBYQWLPEXCCZSTYRLTTDMQLYKMBBGMYYJPRKZNPBSXYXBHYZDJDNGHPMFSGMWFZMFQMMBCMZZCJJLCNUXYQLMLRYGQZCY"
        + "XZLWJGCJCGGMCJNFYZZJHYCPRRCMTZQZXHFQGTJXCCJEAQCRJYHPLQLSZDJRBCQHQDYRHYLYXJSYMHZYDWLDFRYHBPYDTSSCNWBX"
        + "GLPZMLZZTQSSCPJMXXYCSJYTYCGHYCJWYRXXLFEMWJNMKLLSWTXHYYYNCMMCWJDQDJZGLLJWJRKHPZGGFLCCSCZMCBLTBHBQJXQD"
        + "SPDJZZGKGLFQYWBZYZJLTSTDHQHCTCBCHFLQMPWDSHYYTQWCNZZJTLBYMBPDYYYXSQKXWYYFLXXNCWCXYPMAELYKKJMZZZBRXYYQ"
        + "JFLJPFHHHYTZZXSGQQMHSPGDZQWBWPJHZJDYSCQWZKTXXSQLZYYMYSDZGRXCKKUJLWPYSYSCSYZLRMLQSYLJXBCXTLWDQZPCYCYK"
        + "PPPNSXFYZJJRCEMHSZMSXLXGLRWGCSTLRSXBZGBZGZTCPLUJLSLYLYMTXMTZPALZXPXJTJWTCYYZLBLXBZLQMYLXPGHDSLSSDMXM"
        + "BDZZSXWHAMLCZCPJMCNHJYSNSYGCHSKQMZZQDLLKABLWJXSFMOCDXJRRLYQZKJMYBYQLYHETFJZFRFKSRYXFJTWDSXXSYSQJYSLY"
        + "XWJHSNLXYYXHBHAWHHJZXWMYLJCSSLKYDZTXBZSYFDXGXZJKHSXXYBSSXDPYNZWRPTQZCZENYGCXQFJYKJBZMLJCMQQXUOXSLYXX"
        + "LYLLJDZBTYMHPFSTTQQWLHOKYBLZZALZXQLHZWRRQHLSTMYPYXJJXMQSJFNBXYXYJXXYQYLTHYLQYFMLKLJTMLLHSZWKZHLJMLHL"
        + "JKLJSTLQXYLMBHHLNLZXQJHXCFXXLHYHJJGBYZZKBXSCQDJQDSUJZYYHZHHMGSXCSYMXFEBCQWWRBPYYJQTYZCYQYQQZYHMWFFHG"
        + "ZFRJFCDPXNTQYZPDYKHJLFRZXPPXZDBBGZQSTLGDGYLCQMLCHHMFYWLZYXKJLYPQHSYWMQQGQZMLZJNSQXJQSYJYCBEHSXFSZPXZ"
        + "WFLLBCYYJDYTDTHWZSFJMQQYJLMQXXLLDTTKHHYBFPWTYYSQQWNQWLGWDEBZWCMYGCULKJXTMXMYJSXHYBRWFYMWFRXYQMXYSZTZ"
        + "ZTFYKMLDHQDXWYYNLCRYJBLPSXCXYWLSPRRJWXHQYPHTYDNXHHMMYWYTZCSQMTSSCCDALWZTCPQPYJLLQZYJSWXMZZMMYLMXCLMX"
        + "CZMXMZSQTZPPQQBLPGXQZHFLJJHYTJSRXWZXSCCDLXTYJDCQJXSLQYCLZXLZZXMXQRJMHRHZJBHMFLJLMLCLQNLDXZLLLPYPSYJY"
        + "SXCQQDCMQJZZXHNPNXZMEKMXHYKYQLXSXTXJYYHWDCWDZHQYYBGYBCYSCFGPSJNZDYZZJZXRZRQJJYMCANYRJTLDPPYZBSTJKXXZ"
        + "YPFDWFGZZRPYMTNGXZQBYXNBUFNQKRJQZMJEGRZGYCLKXZDSKKNSXKCLJSPJYYZLQQJYBZSSQLLLKJXTBKTYLCCDDBLSPPFYLGYD"
        + "TZJYQGGKQTTFZXBDKTYYHYBBFYTYYBCLPDYTGDHRYRNJSPTCSNYJQHKLLLZSLYDXXWBCJQSPXBPJZJCJDZFFXXBRMLAZHCSNDLBJ"
        + "DSZBLPRZTSWSBXBCLLXXLZDJZSJPYLYXXYFTFFFBHJJXGBYXJPMMMPSSJZJMTLYZJXSWXTYLEDQPJMYGQZJGDJLQJWJQLLSJGJGY"
        + "GMSCLJJXDTYGJQJQJCJZCJGDZZSXQGSJGGCXHQXSNQLZZBXHSGZXCXYLJXYXYYDFQQJHJFXDHCTXJYRXYSQTJXYEFYYSSYYJXNCY"
        + "ZXFXMSYSZXYYSCHSHXZZZGZZZGFJDLTYLNPZGYJYZYYQZPBXQBDZTZCZYXXYHHSQXSHDHGQHJHGYWSZTMZMLHYXGEBTYLZKQWYTJ"
        + "ZRCLEKYSTDBCYKQQSAYXCJXWWGSBHJYZYDHCSJKQCXSWXFLTYNYZPZCCZJQTZWJQDZZZQZLJJXLSBHPYXXPSXSHHEZTXFPTLQYZZ"
        + "XHYTXNCFZYYHXGNXMYWXTZSJPTHHGYMXMXQZXTSBCZYJYXXTYYZYPCQLMMSZMJZZLLZXGXZAAJZYXJMZXWDXZSXZDZXLEYJJZQBH"
        + "ZWZZZQTZPSXZTDSXJJJZNYAZPHXYYSRNQDTHZHYYKYJHDZXZLSWCLYBZYECWCYCRYLCXNHZYDZYDYJDFRJJHTRSQTXYXJRJHOJYN"
        + "XELXSFSFJZGHPZSXZSZDZCQZBYYKLSGSJHCZSHDGQGXYZGXCHXZJWYQWGYHKSSEQZZNDZFKWYSSTCLZSTSYMCDHJXXYWEYXCZAYD"
        + "MPXMDSXYBSQMJMZJMTZQLPJYQZCGQHXJHHLXXHLHDLDJQCLDWBSXFZZYYSCHTYTYYBHECXHYKGJPXHHYZJFXHWHBDZFYZBCAPNPG"
        + "NYDMSXHMMMMAMYNBYJTMPXYYMCTHJBZYFCGTYHWPHFTWZZEZSBZEGPFMTSKFTYCMHFLLHGPZJXZJGZJYXZSBBQSCZZLZCCSTPGXM"
        + "JSFTCCZJZDJXCYBZLFCJSYZFGSZLYBCWZZBYZDZYPSWYJZXZBDSYUXLZZBZFYGCZXBZHZFTPBGZGEJBSTGKDMFHYZZJHZLLZZGJQ"
        + "ZLSFDJSSCBZGPDLFZFZSZYZYZSYGCXSNXXCHCZXTZZLJFZGQSQYXZJQDCCZTQCDXZJYQJQCHXZTDLGSCXZSYQJQTZWLQDQZTQCHQ"
        + "QJZYEZZZPBWKDJFCJPZTYPQYQTTYNLMBDKTJZPQZQZZFPZSBNJLGYJDXJDZZKZGQKXDLPZJTCJDQBXDJQJSTCKNXBXZMSLYJCQMT"
        + "JQWWCJQNJNLLLHJCWQTBZQYDZCZPZZDZYDDCYZZZCCJTTJFZDPRRTZTJDCQTQZDTJNPLZBCLLCTZSXKJZQZPZLBZRBTJDCXFCZDB"
        + "CCJJLTQQPLDCGZDBBZJCQDCJWYNLLZYZCCDWLLXWZLXRXNTQQCZXKQLSGDFQTDDGLRLAJJTKUYMKQLLTZYTDYYCZGJWYXDXFRSKS"
        + "TQTENQMRKQZHHQKDLDAZFKYPBGGPZREBZZYKZZSPEGJXGYKQZZZSLYSYYYZWFQZYLZZLZHWCHKYPQGNPGBLPLRRJYXCCSYYHSFZF"
        + "YBZYYTGZXYLXCZWXXZJZBLFFLGSKHYJZEYJHLPLLLLCZGXDRZELRHGKLZZYHZLYQSZZJZQLJZFLNBHGWLCZCFJYSPYXZLZLXGCCP"
        + "ZBLLCYBBBBUBBCBPCRNNZCZYRBFSRLDCGQYYQXYGMQZWTZYTYJXYFWTEHZZJYWLCCNTZYJJZDEDPZDZTSYQJHDYMBJNYJZLXTSST"
        + "PHNDJXXBYXQTZQDDTJTDYYTGWSCSZQFLSHLGLBCZPHDLYZJYCKWTYTYLBNYTSDSYCCTYSZYYEBHEXHQDTWNYGYCLXTSZYSTQMYGZ"
        + "AZCCSZZDSLZCLZRQXYYELJSBYMXSXZTEMBBLLYYLLYTDQYSHYMRQWKFKBFXNXSBYCHXBWJYHTQBPBSBWDZYLKGZSKYHXQZJXHXJX"
        + "GNLJKZLYYCDXLFYFGHLJGJYBXQLYBXQPQGZTZPLNCYPXDJYQYDYMRBESJYYHKXXSTMXRCZZYWXYQYBMCLLYZHQYZWQXDBXBZWZMS"
        + "LPDMYSKFMZKLZCYQYCZLQXFZZYDQZPZYGYJYZMZXDZFYFYTTQTZHGSPCZMLCCYTZXJCYTJMKSLPZHYSNZLLYTPZCTZZCKTXDHXXT"
        + "QCYFKSMQCCYYAZHTJPCYLZLYJBJXTPNYLJYYNRXSYLMMNXJSMYBCSYSYLZYLXJJQYLDZLPQBFZZBLFNDXQKCZFYWHGQMRDSXYCYT"
        + "XNQQJZYYPFZXDYZFPRXEJDGYQBXRCNFYYQPGHYJDYZXGRHTKYLNWDZNTSMPKLBTHBPYSZBZTJZSZZJTYYXZPHSSZZBZCZPTQFZMY"
        + "FLYPYBBJQXZMXXDJMTSYSKKBJZXHJCKLPSMKYJZCXTMLJYXRZZQSLXXQPYZXMKYXXXJCLJPRMYYGADYSKQLSNDHYZKQXZYZTCGHZ"
        + "TLMLWZYBWSYCTBHJHJFCWZTXWYTKZLXQSHLYJZJXTMPLPYCGLTBZZTLZJCYJGDTCLKLPLLQPJMZPAPXYZLKKTKDZCZZBNZDYDYQZ"
        + "JYJGMCTXLTGXSZLMLHBGLKFWNWZHDXUHLFMKYSLGXDTWWFRJEJZTZHYDXYKSHWFZCQSHKTMQQHTZHYMJDJSKHXZJZBZZXYMPAGQM"
        + "STPXLSKLZYNWRTSQLSZBPSPSGZWYHTLKSSSWHZZLYYTNXJGMJSZSUFWNLSOZTXGXLSAMMLBWLDSZYLAKQCQCTMYCFJBSLXCLZZCL"
        + "XXKSBZQCLHJPSQPLSXXCKSLNHPSFQQYTXYJZLQLDXZQJZDYYDJNZPTUZDSKJFSLJHYLZSQZLBTXYDGTQFDBYAZXDZHZJNHHQBYKN"
        + "XJJQCZMLLJZKSPLDYCLBBLXKLELXJLBQYCXJXGCNLCQPLZLZYJTZLJGYZDZPLTQCSXFDMNYCXGBTJDCZNBGBQYQJWGKFHTNPYQZQ"
        + "GBKPBBYZMTJDYTBLSQMPSXTBNPDXKLEMYYCJYNZCTLDYKZZXDDXHQSHDGMZSJYCCTAYRZLPYLTLKXSLZCGGEXCLFXLKJRTLQJAQZ"
        + "NCMBYDKKCXGLCZJZXJHPTDJJMZQYKQSECQZDSHHADMLZFMMZBGNTJNNLGBYJBRBTMLBYJDZXLCJLPLDLPCQDHLXZLYCBLCXZZJAD"
        + "JLNZMMSSSMYBHBSQKBHRSXXJMXSDZNZPXLGBRHWGGFCXGMSKLLTSJYYCQLTSKYWYYHYWXBXQYWPYWYKQLSQPTNTKHQCWDQKTWPXX"
        + "HCPTHTWUMSSYHBWCRWXHJMKMZNGWTMLKFGHKJYLSYYCXWHYECLQHKQHTTQKHFZLDXQWYZYYDESBPKYRZPJFYYZJCEQDZZDLATZBB"
        + "FJLLCXDLMJSSXEGYGSJQXCWBXSSZPDYZCXDNYXPPZYDLYJCZPLTXLSXYZYRXCYYYDYLWWNZSAHJSYQYHGYWWAXTJZDAXYSRLTDPS"
        + "SYYFNEJDXYZHLXLLLZQZSJNYQYQQXYJGHZGZCYJCHZLYCDSHWSHJZYJXCLLNXZJJYYXNFXMWFPYLCYLLABWDDHWDXJMCXZTZPMLQ"
        + "ZHSFHZYNZTLLDYWLSLXHYMMYLMBWWKYXYADTXYLLDJPYBPWUXJMWMLLSAFDLLYFLBHHHBQQLTZJCQJLDJTFFKMMMBYTHYGDCQRDD"
        + "WRQJXNBYSNWZDBYYTBJHPYBYTTJXAAHGQDQTMYSTQXKBTZPKJLZRBEQQSSMJJBDJOTGTBXPGBKTLHQXJJJCTHXQDWJLWRFWQGWSH"
        + "CKRYSWGFTGYGBXSDWDWRFHWYTJJXXXJYZYSLPYYYPAYXHYDQKXSHXYXGSKQHYWFDDDPPLCJLQQEEWXKSYYKDYPLTJTHKJLTCYYHH"
        + "JTTPLTZZCDLTHQKZXQYSTEEYWYYZYXXYYSTTJKLLPZMCYHQGXYHSRMBXPLLNQYDQHXSXXWGDQBSHYLLPJJJTHYJKYPPTHYYKTYEZ"
        + "YENMDSHLCRPQFDGFXZPSFTLJXXJBSWYYSKSFLXLPPLBBBLBSFXFYZBSJSSYLPBBFFFFSSCJDSTZSXZRYYSYFFSYZYZBJTBCTSBSD"
        + "HRTJJBYTCXYJEYLXCBNEBJDSYXYKGSJZBXBYTFZWGENYHHTHZHHXFWGCSTBGXKLSXYWMTMBYXJSTZSCDYQRCYTWXZFHMYMCXLZNS"
        + "DJTTTXRYCFYJSBSDYERXJLJXBBDEYNJGHXGCKGSCYMBLXJMSZNSKGXFBNBPTHFJAAFXYXFPXMYPQDTZCXZZPXRSYWZDLYBBKTYQP"
        + "QJPZYPZJZNJPZJLZZFYSBTTSLMPTZRTDXQSJEHBZYLZDHLJSQMLHTXTJECXSLZZSPKTLZKQQYFSYGYWPCPQFHQHYTQXZKRSGTTSQ"
        + "CZLPTXCDYYZXSQZSLXLZMYCPCQBZYXHBSXLZDLTCDXTYLZJYYZPZYZLTXJSJXHLPMYTXCQRBLZSSFJZZTNJYTXMYJHLHPPLCYXQJ"
        + "QQKZZSCPZKSWALQSBLCCZJSXGWWWYGYKTJBBZTDKHXHKGTGPBKQYSLPXPJCKBMLLXDZSTBKLGGQKQLSBKKTFXRMDKBFTPZFRTBBR"
        + "FERQGXYJPZSSTLBZTPSZQZSJDHLJQLZBPMSMMSXLQQNHKNBLRDDNXXDHDDJCYYGYLXGZLXSYGMQQGKHBPMXYXLYTQWLWGCPBMQXC"
        + "YZYDRJBHTDJYHQSHTMJSBYPLWHLZFFNYPMHXXHPLTBQPFBJWQDBYGPNZTPFZJGSDDTQSHZEAWZZYLLTYYBWJKXXGHLFKXDJTMSZS"
        + "QYNZGGSWQSPHTLSSKMCLZXYSZQZXNCJDQGZDLFNYKLJCJLLZLMZZNHYDSSHTHZZLZZBBHQZWWYCRZHLYQQJBEYFXXXWHSRXWQHWP"
        + "SLMSSKZTTYGYQQWRSLALHMJTQJSMXQBJJZJXZYZKXBYQXBJXSHZTSFJLXMXZXFGHKZSZGGYLCLSARJYHSLLLMZXELGLXYDJYTLFB"
        + "HBPNLYZFBBHPTGJKWETZHKJJXZXXGLLJLSTGSHJJYQLQZFKCGNNDJSSZFDBCTWWSEQFHQJBSAQTGYPQLBXBMMYWXGSLZHGLZGQYF"
        + "LZBYFZJFRYSFMBYZHQGFWZSYFYJJPHZBYYZFFWODGRLMFTWLBZGYCQXCDJYGZYYYYTYTYDWEGAZYHXJLZYYHLRMGRXXZCLHNELJJ"
        + "TJTPWJYBJJBXJJTJTEEKHWSLJPLPSFYZPQQBDLQJJTYYQLYZKDKSQJYYQZLDQTGJQYZJSUCMRYQTHTEJMFCTYHYPKMHYZWJDQFHY"
        + "YXWSHCTXRLJHQXHCCYYYJLTKTTYTMXGTCJTZAYYOCZLYLBSZYWJYTSJYHBYSHFJLYGJXXTMZYYLTXXYPZLXYJZYZYYPNHMYMDYYL"
        + "BLHLSYYQQLLNJJYMSOYQBZGDLYXYLCQYXTSZEGXHZGLHWBLJHEYXTWQMAKBPQCGYSHHEGQCMWYYWLJYJHYYZLLJJYLHZYHMGSLJL"
        + "JXCJJYCLYCJPCPZJZJMMYLCQLNQLJQJSXYJMLSZLJQLYCMMHCFMMFPQQMFYLQMCFFQMMMMHMZNFHHJGTTHHKHSLNCHHYQDXTMMQD"
        + "CYZYXYQMYQYLTDCYYYZAZZCYMZYDLZFFFMMYCQZWZZMABTBYZTDMNZZGGDFTYPCGQYTTSSFFWFDTZQSSYSTWXJHXYTSXXYLBYQHW"
        + "WKXHZXWZNNZZJZJJQJCCCHYYXBZXZCYZTLLCQXYNJYCYYCYNZZQYYYEWYCZDCJYCCHYJLBTZYYCQWMPWPYMLGKDLDLGKQQBGYCHJ"
        + "XY";
        #endregion

        /// <summary>
        /// 获得一个字符串的汉语拼音声母串,该字符串只包含大写的英文字母.
        /// </summary>
        /// <param name="strText"></param>
        /// <returns></returns>
        public string GetChineseSpell(string strText)
        {
            var uiFO = FormulaHelper.CreateFO<LayoutUIFO>();
            if (strText == null || strText.Length == 0)
                return "";
            System.Text.StringBuilder pinYin = new System.Text.StringBuilder();
            foreach (char vChar in strText)
            {
                if ((vChar >= 'a' && vChar <= 'z') || (vChar >= 'A' && vChar <= 'Z'))
                    pinYin.Append(char.ToUpper(vChar));
                else if ((int)vChar >= 19968 && (int)vChar <= 40869)
                    pinYin.Append(ChineseFirstPY[(int)vChar - 19968]);
                else
                    pinYin.Append(vChar.ToString());
            }
            return uiFO.FilterSqlKeys(pinYin.ToString());
        }


        protected override System.Data.Entity.DbContext entities
        {
            get
            {
                if (_entities == null)
                {
                    _entities = FormulaHelper.GetEntities<BaseEntities>();
                }
                return _entities;
            }
        }

        public ActionResult CreateUse()
        {
            var result = Formula.AuthCodeHelper.CheckConfigFuncLimited();
            if (!result)
            {
                this.Response.Clear();
                this.Server.Transfer("/MvcConfig/ConfigDenied.html");
            }
            return View();
        }

        public virtual JsonResult GetModel(string id)
        {
            var entity = GetEntity<S_UI_List>(id);
            if (!string.IsNullOrEmpty(entity.Code))
            {
                var dic = Formula.FormulaHelper.ModelToDic<S_UI_List>(entity);
                if (String.IsNullOrEmpty(entity.Settings))
                {
                    dic.SetValue("ShowQueryForm", "F");
                }
                else
                {
                    var settings = JsonHelper.ToObject(entity.Settings);
                    var showQueryForm = settings.GetValue("ShowQueryForm");
                    if (String.IsNullOrEmpty(showQueryForm))
                        dic.SetValue("ShowQueryForm", "F");
                    else
                    {
                        dic.SetValue("ShowQueryForm", showQueryForm);
                        dic.SetValue("QueryFormColmuns", settings.GetValue("QueryFormColmuns"));
                    }
                }
                return Json(dic);
            }
            else
            {
                var layout = GetEntity<S_UI_Layout>(id);
                var dic = Formula.FormulaHelper.ModelToDic<S_UI_Layout>(layout);
                if (String.IsNullOrEmpty(layout.Settings))
                {
                    dic.SetValue("ShowQueryForm", "F");
                }
                else
                {
                    var settings = JsonHelper.ToObject(layout.Settings);
                    var showQueryForm = settings.GetValue("ShowQueryForm");
                    if (String.IsNullOrEmpty(showQueryForm))
                        dic.SetValue("ShowQueryForm", "F");
                    else
                    {
                        dic.SetValue("ShowQueryForm", showQueryForm);
                        dic.SetValue("QueryFormColmuns", settings.GetValue("QueryFormColmuns"));
                    }
                    var child = entities.Set<S_UI_Layout>().SingleOrDefault(c => c.ID == layout.ParentID);
                    if (child != null)
                    {
                        dic.SetValue("CTableNames", child.TableNames);
                        dic.SetValue("Height", child.Height);
                        dic.SetValue("CSQL", child.SQL);
                        dic.SetValue("CConnName", child.ConnName);
                    }
                }
                return Json(dic);
            }
        }

        public virtual JsonResult SaveNode(string data, bool isEdit)
        {
            string fullID = Request["FullID"];
            string parentID = Request["ParentID"];
            var dic = JsonHelper.ToObject<Dictionary<string, string>>(data);
            string categoryCode = dic.GetValue("CategoryCode");
            if (string.IsNullOrEmpty(parentID) && !string.IsNullOrEmpty(fullID))
                parentID = fullID.Split('.').Last();
            if (isEdit)
            {
                if (entities.Set<S_M_Category>().FirstOrDefault(c => c.CategoryCode == categoryCode) != null)
                    throw new Exception(string.Format("应用编号不能重复：“{0}”", categoryCode));
                string ID = FormulaHelper.CreateGuid();
                S_M_Category category = new S_M_Category();
                category.ID = ID;
                category.ParentID = parentID;
                category.FullID = fullID + "." + ID;
                category.Code = Request["Code"];
                category.Name = dic.GetValue("Name");
                category.SortIndex = 0;
                category.Description = dic.GetValue("Description");
                category.CategoryCode = categoryCode;
                category.IconClass = "icon-module";

                entities.Set<S_M_Category>().Add(category);
                entities.SaveChanges();
                return Json(category);
            }
            else
            {
                string id = dic.GetValue("ID");
                var category = entities.Set<S_M_Category>().FirstOrDefault(c => c.ID == id);
                category.CategoryCode = dic.GetValue("CategoryCode");
                category.Name = dic.GetValue("Name");
                category.Description = dic.GetValue("Description");
                entities.SaveChanges();
                return Json(category);
            }
        }

        public JsonResult GetCategory(string categoryID)
        {
            return Json(entities.Set<S_M_Category>().FirstOrDefault(c => c.ID == categoryID));
        }

        public JsonResult Delete(string listIDs)
        {
            return base.JsonDelete<S_UI_Form>(listIDs);
        }
        public JsonResult HistoryForm(string ID)
        {
            var form = entities.Set<S_UI_Form>().SingleOrDefault(c => c.ID == ID);
            var wfEntities = FormulaHelper.GetEntities<WorkflowEntities>();
            var defFlow = wfEntities.Set<S_WF_DefFlow>().FirstOrDefault(c => c.Code == form.Code);
            return Json(new { ID = form.ID, Items = form.Items, Layout = form.Layout, TmplCode = form.Code, FlowID = defFlow != null ? defFlow.ID : "" });
        }

        //public JsonResult CreateLayout(string id, string data, bool isExistFlow)
        //{
        //    return Json(new { layout = CreateHtml(id, data, isExistFlow) });
        //}

        private string CreateHtml(string id, string data, bool isExistFlow, string title = "", string trHtml = "")
        {
            var dictionary = JsonHelper.ToObject<Dictionary<string, string>>(data);
            string decorative = dictionary.GetValue("LayoutMode"); //fieldset装饰或table装饰
            int cols = int.Parse(dictionary.GetValue("Cols"));
            int rows = int.Parse(dictionary.GetValue("Rows"));

            #region 装饰

            string strDecorativeStart = @"
            <fieldset class='formDiv'>
                <legend>{0}</legend>
            ";
            string strDecorativeEnd = @"
            </fieldset>
            ";
            string strDecorativeTable = "style='width:100%;'cellpadding='2' border='0'";

            if (decorative == "table")
            {
                strDecorativeStart = @"
                <table class='ke-zeroborder' style='width:100%;table-layout:fixed' cellspacing='0' cellpadding='2' border='0'>
	                <tbody>
		                <tr>
			                <td style='text-align:left;width:30%;'>		
                                版本/修改码：D/1		
			                </td>
			                <td style='text-align:center;'>		
                                QM-P-03-02
			                </td>
                            <td style='text-align:right;width:30%;'>
                                编号：{{流水号}}
			                </td>
		                </tr>
	                </tbody>
                </table>
                ";
                strDecorativeEnd = "";
                strDecorativeTable = "style='width:100%;table-layout:fixed'cellpadding='2' border='1'";
            }

            #endregion

            var form = entities.Set<S_UI_Form>().SingleOrDefault(c => c.ID == id);
            StringBuilder sb = new StringBuilder();
            if (!isExistFlow)
                sb.AppendFormat("<h1 align='center'>{0}</h1>", !string.IsNullOrEmpty(title) ? title : (form != null ? form.Name : dictionary.GetValue("Title")));


            //开始装饰
            if (!string.IsNullOrEmpty(dictionary.GetValue("Title")))
                sb.AppendFormat(strDecorativeStart, dictionary.GetValue("Title"));

            //开始内容
            sb.AppendFormat(@"
                <table class='ke-zeroborder' {0}>", strDecorativeTable);

            string labelStyle = "style='width: 15%'";
            string inputStyle = "style='width: 35%'";
            if (cols == 3)
                inputStyle = "style='width: 18%'";

            if (string.IsNullOrEmpty(trHtml))
            {
                bool firstRow = true;
                for (int i = 0; i < cols * rows; i++)
                {
                    if (i % cols == 0)
                    {
                        sb.Append("<tr>");
                        if (firstRow == false)
                        {
                            labelStyle = "";
                            inputStyle = "";
                        }
                        firstRow = false;
                    }

                    if (i % cols > 0)
                    {
                        labelStyle = "style='padding-left:20px'";
                    }
                    sb.AppendFormat("<td {0}></td><td {1}></td>", labelStyle, inputStyle);

                    if (i % cols == cols - 1)
                        sb.Append("</tr>");
                }
            }
            else
            {
                sb.Append(trHtml);
            }
            sb.Append(@"
                </table>
            ");
            //结束内容
            sb.Append(strDecorativeEnd);
            //结束装饰
            return sb.ToString();
        }


        public static string NoHTML(string Htmlstring)
        {
            //删除脚本
            Htmlstring = Regex.Replace(Htmlstring, @"<script[^>]*?>.*?</script>", "",
             RegexOptions.IgnoreCase);
            //删除HTML
            Htmlstring = Regex.Replace(Htmlstring, @"<(.[^>]*)>", "",
               RegexOptions.IgnoreCase);
            Htmlstring = Regex.Replace(Htmlstring, @"([\r\n])[\s]+", "",
           RegexOptions.IgnoreCase);
            Htmlstring = Regex.Replace(Htmlstring, @"-->", "", RegexOptions.IgnoreCase);
            Htmlstring = Regex.Replace(Htmlstring, @"<!--.*", "", RegexOptions.IgnoreCase);
            Htmlstring = Regex.Replace(Htmlstring, @"&(quot|#34);", "\"",
               RegexOptions.IgnoreCase);
            Htmlstring = Regex.Replace(Htmlstring, @"&(amp|#38);", "&",
              RegexOptions.IgnoreCase);
            Htmlstring = Regex.Replace(Htmlstring, @"&(lt|#60);", "<",
               RegexOptions.IgnoreCase);
            Htmlstring = Regex.Replace(Htmlstring, @"&(gt|#62);", ">",
             RegexOptions.IgnoreCase);
            Htmlstring = Regex.Replace(Htmlstring, @"&(nbsp|#160);", "   ",
               RegexOptions.IgnoreCase);
            Htmlstring = Regex.Replace(Htmlstring, @"&(iexcl|#161);", "\xa1",
              RegexOptions.IgnoreCase);
            Htmlstring = Regex.Replace(Htmlstring, @"&(cent|#162);", "\xa2",
             RegexOptions.IgnoreCase);
            Htmlstring = Regex.Replace(Htmlstring, @"&(pound|#163);", "\xa3",
             RegexOptions.IgnoreCase);
            Htmlstring = Regex.Replace(Htmlstring, @"&(copy|#169);", "\xa9",
            RegexOptions.IgnoreCase);
            Htmlstring = Regex.Replace(Htmlstring, @"&#(\d+);", "",
              RegexOptions.IgnoreCase);

            Htmlstring.Replace("<", "");
            Htmlstring.Replace(">", "");
            Htmlstring.Replace("\r\n", "");

            return Htmlstring;
        }

        private string ReplaceEmpty(string layout)
        {
            return NoHTML(layout).Replace(replace_empty, "").Trim();
        }

        //整行TD是否都不为空
        private bool IsExistTRValue(string layout)
        {
            List<bool> bools = new List<bool>();
            foreach (Match td in regTD.Matches(layout))
            {
                string tdTitle = ReplaceEmpty(td.Value);
                if (!string.IsNullOrEmpty(tdTitle) && tdTitle.IndexOf(replace_unit) < 0)
                {
                    bools.Add(true);
                }
            }
            return bools.Count == regTD.Matches(layout).Count;
        }

        //是否枚举
        private bool IsEnum(string lLayout, string cLayout, string title)
        {
            Dictionary<S_M_EnumDef, List<S_M_EnumItem>> enumDic = new Dictionary<S_M_EnumDef, List<S_M_EnumItem>>();
            cLayout = NoHTML(cLayout);
            if (cLayout.IndexOf(replace_enum) > -1)
            {
                if (!string.IsNullOrEmpty(ReplaceEmpty(NoHTML(lLayout))))
                {
                    title = string.IsNullOrEmpty(title) ? NoHTML(lLayout) : title;
                    string code = GetChineseSpell(title);
                    S_M_EnumDef enumDef = new S_M_EnumDef();
                    enumDef.ID = FormulaHelper.CreateGuid();
                    enumDef.Code = "Flow." + code;
                    enumDef.Name = title;
                    enumDef.Type = RoutingType.Normal.ToString();

                    if (!enumDic.ContainsKey(enumDef))
                    {
                        List<S_M_EnumItem> list = new List<S_M_EnumItem>();
                        foreach (string item in cLayout.Replace(replace_enum, ",").Split(','))
                        {
                            string name = item.Trim();
                            if (!string.IsNullOrEmpty(name))
                            {
                                S_M_EnumItem enumItem = new S_M_EnumItem();
                                enumItem.ID = FormulaHelper.CreateGuid();
                                enumItem.EnumDefID = enumDef.ID;
                                enumItem.Code = GetChineseSpell(name);
                                enumItem.Name = name;
                                list.Add(enumItem);
                            }
                        }
                        enumDic.Add(enumDef, list);
                    }
                    //缓存
                    CacheHelper.Remove(code);
                    CacheHelper.Set(code, enumDic);
                }
                return true;
            }
            else
                return false;
        }

        private string subStr(string title)
        {
            if (!string.IsNullOrEmpty(title) && title.IndexOf(':') > -1)
                title = title.Substring(0, title.IndexOf(':'));
            return title;
        }

        public void UploadWord(string categoryID, string title)
        {
            var FileData = Request.Files["FileData"];
            bool isExistForm = false;
            string flowTitle = "示例", categoryTitle = "分类标题";
            if (FileData != null)
            {
                string fileName = FileData.FileName.Substring(0, FileData.FileName.LastIndexOf('.'));
                var stream = Request.Files["FileData"].InputStream;
                Document doc = new Document(stream);
                using (MemoryStream ms = new MemoryStream())
                {
                    doc.Save(ms, SaveFormat.Html);
                    string text = Encoding.UTF8.GetString(ms.ToArray());

                    StringBuilder rsb = new StringBuilder();
                    int sublistIndex = 1, maxTableTD = 0;
                    bool isExistTitle = false;

                    if (!isExistTitle)
                    {
                        Regex reg = new Regex(@"<span[^>]*>[\s\S]*?</span>");
                        flowTitle = ReplaceEmpty(reg.Match(text).Value);
                        if (string.IsNullOrEmpty(flowTitle))
                            flowTitle = fileName;
                    }
                    string tmplCode = GetChineseSpell(title);
                    if (entities.Set<S_UI_Form>().Count(c => c.Code == tmplCode) > 0)
                        isExistForm = true;

                    S_UI_Form form = AddForm(categoryID, title, tmplCode, "T_UI_" + GetChineseSpell(title));
                    foreach (Match table in regTable.Matches(text))
                    {
                        StringBuilder sb = new StringBuilder();
                        int maxTD = 0;
                        foreach (Match tr in regTR.Matches(table.Value))
                        {
                            int count = regTD.Matches(tr.Value).Count;
                            if (maxTD < count)
                                maxTD = count;
                        }
                        string lastLayout = "";

                        //取TABLE的最大TD
                        foreach (Match tr in regTR.Matches(table.Value))
                        {
                            int count = regTD.Matches(tr.Value).Count;
                            if (maxTableTD < count)
                                maxTableTD = count;
                        }

                        foreach (Match tr in regTR.Matches(table.Value))
                        {
                            int count = regTD.Matches(tr.Value).Count;
                            if (!string.IsNullOrEmpty(ReplaceEmpty(tr.Value)) && !IsExistTRValue(tr.Value))
                            {
                                int cid = 1;
                                string lastTitle = "上个TD标题", currentTitle = "";
                                sb.Append("<tr>");
                                foreach (Match td in regTD.Matches(tr.Value))
                                {
                                    currentTitle = ReplaceEmpty(td.Value);
                                    sb.Append(string.Format("<td {0}>", maxTD - count > 0 && cid == count ? "colspan='" + ((maxTD - count) + 1).ToString() + "'"
                                        : cid == count && maxTableTD > count ? "colspan='" + ((maxTableTD - count) + 1).ToString() + "'" : string.IsNullOrEmpty(currentTitle) && !string.IsNullOrEmpty(lastTitle) ? "" : "style='width:15%;'"));
                                    if (string.IsNullOrEmpty(currentTitle) && !string.IsNullOrEmpty(lastTitle))
                                        sb.Append("{" + subStr(lastTitle) + "}");
                                    else
                                    {
                                        if (currentTitle.ToUpper().IndexOf(replace_unit) > -1)
                                            sb.Append("{" + subStr(lastTitle) + "}").Append(currentTitle.ToUpper().Replace(replace_unit, ""));
                                        else
                                        {
                                            if (IsEnum(td.Value, td.Value, lastTitle))
                                            {
                                                sb.Append("{" + subStr(lastTitle) + "}");
                                            }
                                            else
                                            {
                                                sb.Append(currentTitle);
                                            }
                                        }
                                    }
                                    sb.Append("</td>");
                                    cid += 1;
                                    lastTitle = currentTitle;
                                }
                                sb.Append("</tr>");
                            }
                            else
                            {
                                sb.Append("<tr>");
                                if (IsExistTRValue(tr.Value) && string.IsNullOrEmpty(ReplaceEmpty(tr.NextMatch().Value))
                                    && ReplaceEmpty(tr.Value).IndexOf(replace_enum) < 0 && ReplaceEmpty(tr.Value).IndexOf(replace_description) < 0)
                                {
                                    string code = "子表" + sublistIndex.ToString();
                                    List<string> list = new List<string>();
                                    foreach (Match td in regTD.Matches(tr.Value))
                                    {
                                        list.Add(ReplaceEmpty(td.Value));
                                    }
                                    sb.Append(string.Format("<td class='SubTable' {0}>", "colspan='" + maxTD.ToString() + "'"));
                                    sb.Append("{" + code + "}");
                                    sb.Append("</td>");
                                    //缓存
                                    CacheHelper.Remove(GetChineseSpell(code));
                                    CacheHelper.Set(GetChineseSpell(code), list);
                                    sublistIndex += 1;
                                }
                                else
                                {
                                    foreach (Match td in regTD.Matches(tr.Value))
                                    {
                                        if (IsEnum(td.Value, td.NextMatch().Value, ""))
                                        {
                                            sb.Append("<td style='width:15%;'>");
                                            sb.Append(ReplaceEmpty(td.Value));
                                            sb.Append("</td>");
                                            sb.AppendFormat("<td {0}>", maxTD > 1 && maxTableTD >= count ? "colspan='" + ((maxTableTD - count) + 1).ToString() + "'"
                                                : maxTD > 1 ? "colspan='" + maxTD.ToString() + "'" : "");
                                            sb.Append("{" + subStr(ReplaceEmpty(td.Value)) + "}");
                                            sb.Append("</td>");
                                        }
                                        if (ReplaceEmpty(td.NextMatch().Value).IndexOf(replace_description) > -1 && !string.IsNullOrEmpty(ReplaceEmpty(td.Value)))
                                        {
                                            sb.Append("<td style='width:15%;'>");
                                            sb.Append(ReplaceEmpty(td.Value));
                                            sb.Append("</td>");
                                            sb.AppendFormat("<td {0}>", maxTD > 1 && maxTableTD >= count ? "colspan='" + ((maxTableTD - count) + 1).ToString() + "'"
                                                : maxTD > 1 ? "colspan='" + maxTD.ToString() + "'" : "");
                                            sb.Append(ReplaceEmpty(td.NextMatch().Value).Replace(replace_description, ""));
                                            sb.Append("</td>");
                                        }
                                        else if (ReplaceEmpty(td.Value).IndexOf(replace_description) > -1)
                                        {
                                            sb.AppendFormat("<td {0}>", maxTD > 1 && maxTableTD >= count ? "colspan='" + ((maxTableTD - count) + 1).ToString() + "'"
                                                : maxTD > 1 ? "colspan='" + maxTD.ToString() + "'" : "");
                                            sb.Append(ReplaceEmpty(td.Value).Replace(replace_description, ""));
                                            sb.Append("</td>");
                                        }
                                    }
                                }
                                sb.Append("</tr>");
                                if (sb.ToString().IndexOf("</td>") < 0)
                                    sb = new StringBuilder();
                            }
                            lastLayout = tr.Value;
                        }


                        if (!string.IsNullOrEmpty(regTR.Match(table.Value).Value))
                        {
                            if (!string.IsNullOrEmpty(regTD.Match(regTR.Match(table.Value).Value).Value))
                            {
                                if (regTD.Matches(regTR.Match(table.Value).Value).Count == 1)
                                    categoryTitle = ReplaceEmpty(regTD.Match(regTR.Match(table.Value).Value).Value);
                                else
                                    categoryTitle = "";
                            }
                        }
                        Dictionary<string, string> data = new Dictionary<string, string>() {
                             { "Title", categoryTitle },{ "Rows", "0" },{ "Cols", "0" },{ "LayoutMode", "fieldset" }
                        };
                        rsb.Append(CreateHtml(form.ID, JsonHelper.ToJson(data), isExistTitle, flowTitle, sb.ToString()));
                        isExistTitle = true;
                    }
                    if (form != null)
                    {
                        form.Layout = rsb.ToString();
                        form.Items = GetItems(form.ID, rsb.ToString(), "");
                    }

                    entities.SaveChanges();
                    HttpContext.Response.Write(form.ID + ";" + form.Code + ";" + isExistForm);
                    ms.Close();
                }
            }

        }


        public JsonResult GetItemList()
        {
            string id = Convert.ToString(Request["ID"]);
            if (string.IsNullOrEmpty(id) || id == "null")
                return Json("");
            return Json(entities.Set<S_UI_Form>().SingleOrDefault(c => c.ID == id).Items);
        }

        public JsonResult SaveItemList(string itemList, string formID)
        {
            var uiFO = FormulaHelper.CreateFO<UIFO>();

            var list = JsonHelper.ToObject<List<FormItem>>(itemList);
            foreach (var item in list)
            {
                if (string.IsNullOrEmpty(item.Name))
                    continue;

                item.Name = item.Name.Trim();
                if (item.Name.Contains('\\') || item.Name.Contains('/'))
                    throw new Exception(string.Format("名称中不能包含特殊字符\\或/,出错的字段名：{0}", item.Name));
                if (item.Name == "流水号")
                    item.Code = "SerialNumber";
                else if (string.IsNullOrEmpty(item.Code))
                    item.Code = uiFO.GetHanZiPinYinString(item.Name);
                item.Code = item.Code.Trim();
                #region 子表字段

                if (item.ItemType == "SubTable" && !string.IsNullOrEmpty(item.Settings))
                {
                    var itemDic = JsonHelper.ToObject<Dictionary<string, object>>(item.Settings);
                    if (!string.IsNullOrEmpty(itemDic.GetValue("listData")))
                    {
                        var itemSubList = JsonHelper.ToObject<List<FormItem>>(itemDic["listData"].ToString());
                        foreach (var subItem in itemSubList)
                        {
                            if (string.IsNullOrEmpty(subItem.Name))
                                continue;

                            subItem.Name = subItem.Name.Trim();
                            if (subItem.Name.Contains('\\') || subItem.Name.Contains('/'))
                                throw new Exception(string.Format("名称中不能包含特殊字符\\或/,出错的字段名：{0}", subItem.Name));
                            if (string.IsNullOrEmpty(subItem.Code))
                                subItem.Code = uiFO.GetHanZiPinYinString(subItem.Name);
                            subItem.Code = subItem.Code.Trim();
                        }

                        #region 验证编号名称不能重复

                        var subFieldNameList = itemSubList.Select(c => c.Name).Distinct().ToList();
                        if (subFieldNameList.Count() < itemSubList.Count)
                        {
                            foreach (var c in itemSubList)
                            {
                                if (!subFieldNameList.Contains(c.Name))
                                    throw new Exception(string.Format("控件编号不能重复：“{0}”", c.Name));
                                else subFieldNameList.Remove(c.Name);
                            }
                        }

                        var subFieldCodeList = itemSubList.Select(c => c.Code).Distinct().ToList();
                        if (subFieldCodeList.Count() < itemSubList.Count)
                        {
                            foreach (var c in itemSubList)
                            {
                                if (!subFieldCodeList.Contains(c.Code))
                                    throw new Exception(string.Format("控件编号不能重复：“{0}”", c.Code));
                                else subFieldCodeList.Remove(c.Code);
                            }
                        }

                        #endregion

                        //修改完成赋值回去
                        itemDic["listData"] = itemSubList;
                        item.Settings = JsonHelper.ToJson(itemDic);
                    }
                }

                #endregion
            }

            #region 校验编号名称不能重复

            var fieldNameList = list.Select(c => c.Name).Distinct().ToList();
            if (fieldNameList.Count() < list.Count)
            {
                foreach (var c in list)
                {
                    if (!fieldNameList.Contains(c.Name))
                        throw new Exception(string.Format("控件名称不能重复：“{0}”", c.Name));
                    else fieldNameList.Remove(c.Name);
                }
            }

            var fieldCodeList = list.Select(c => c.Code).Distinct().ToList();
            if (fieldCodeList.Count() < list.Count)
            {
                foreach (var c in list)
                {
                    if (!fieldCodeList.Contains(c.Code))
                        throw new Exception(string.Format("控件编号不能重复：“{0}”", c.Code));
                    else fieldCodeList.Remove(c.Code);
                }
            }

            #endregion

            //Oracle的字段名大写
            if (Config.Constant.IsOracleDb)
            {
                foreach (var item in list)
                {
                    item.Code = item.Code.ToUpper();
                }
            }

            var form = entities.Set<S_UI_Form>().SingleOrDefault(c => c.ID == formID);
            form.Items = JsonHelper.ToJson(list);

            var user = FormulaHelper.GetUserInfo();
            form.ModifyUserID = user.UserID;
            form.ModifyUserName = user.UserName;
            form.ModifyTime = DateTime.Now;
            entities.SaveChanges();
            return Json("");
        }

        public JsonResult GetLayout(string formID)
        {
            var entity = entities.Set<S_UI_Form>().SingleOrDefault(c => c.ID == formID);
            if (entity == null || string.IsNullOrEmpty(formID))
                return Json("");
            return Json(new { layout = entity.Layout ?? "" });
        }

        private string GetSubTableStr(string name)
        {
            System.Random Random = new System.Random();
            List<string> list = CacheHelper.Get(GetChineseSpell(name)) as List<string>;
            List<FormItem> formItemList = new List<FormItem>();
            if (list != null)
                foreach (var item in list)
                {
                    FormItem formItem = new FormItem();
                    formItem.ID = FormulaHelper.CreateGuid();
                    formItem.Code = "F" + Random.Next(0, 999999).ToString();
                    formItem.Name = item;
                    formItem.FieldType = "nvarchar(200)";
                    formItem.ItemType = "TextBox";
                    formItem.Enabled = "true";
                    formItem.Visible = "true";
                    formItemList.Add(formItem);
                }
            return JsonHelper.ToJson(formItemList);
        }

        private string GetFieldType(string name)
        {
            if (name.Contains("日期") || name.Contains("时间"))
                return "datetime.DatePicker";
            else if (name.Contains("附件"))
                return "nvarchar(max).MultiFile";
            else if (name.Contains("意见") || name.Contains("签字"))
                return "nvarchar(500).AuditSign";
            else if (name.Contains("元") || name.Contains("金额"))
                return "decimal(18 2).TextBox";
            else if (name.Contains("数量") || name.Contains("个"))
                return "int.TextBox";
            else
                return "nvarchar(500).TextBox";
        }

        private string GetItems(string formID, string layout, string itemList)
        {
            int i = 0;
            Regex reg = new Regex(@"\{(.+?)}");
            Regex regLegend = new Regex(@"<legend[^>]*>[\s\S]*?</legend>");
            MatchCollection mcLegend = regLegend.Matches(layout);
            List<FormItem> formList = new List<FormItem>();
            var listItems = JsonHelper.ToObject<List<FormItem>>(string.IsNullOrEmpty(itemList) ? "[]" : itemList);
            foreach (Match m in regTable.Matches(layout))
            {
                string group = "基本信息";
                if (mcLegend.Count > 0 && mcLegend.Count != i)
                {
                    if (mcLegend[i].Length > 0)
                        group = mcLegend[i].ToString().Replace("legend", "").Replace("<", "").Replace(">", "").Replace("/", "");
                }
                foreach (Match tr in regTR.Matches(m.Value))
                {
                    foreach (Match td in regTD.Matches(tr.Value))
                    {
                        if (reg.Matches(td.Value).Count > 0)
                        {
                            if (td.Value.IndexOf("SubTable") > -1 || (reg.Matches(m.Value).Count == 1 && regTD.Matches(regTR.Match(m.Value).Value).Count == 1)) //子表
                            {
                                FormItem fItem = null;
                                StringBuilder sbGH = new StringBuilder();
                                sbGH.Append("{\"formData\":{\"multiSelect\":\"true\",\"allowAlternating\":\"false\",\"style_width\":\"100%\",\"style_height\":\"150px\",\"showSummaryRow\":\"true\",\"ShowToolbar\":\"true\",\"ShowBtnAdd\":\"true\",\"ShowBtnRemove\":\"true\",\"ShowBtnUp\":\"true\",\"ShowBtnDown\":\"true\",\"showIndexColumn\":\"false\",\"showCheckColumn\":\"false\",\"pagesize\":50},\"listData\":");
                                if (listItems.Count > 0 && listItems.Where(c => c.Group == group).Count() > 0)
                                {
                                    fItem = listItems.Where(c => c.Group == group).First();
                                }
                                string name = NoHTML(td.Value).Replace("{", "").Replace("}", "");
                                bool isExistGroup = fItem != null;
                                FormItem formItem = new FormItem();
                                formItem.ID = isExistGroup ? fItem.ID : FormulaHelper.CreateGuid();
                                formItem.Code = isExistGroup ? fItem.Code : "ST" + GetChineseSpell(name);
                                formItem.Name = isExistGroup ? fItem.Name : name;
                                formItem.FieldType = isExistGroup ? fItem.FieldType : "";
                                formItem.ItemType = "SubTable";
                                formItem.Enabled = isExistGroup ? fItem.Enabled : "true";
                                formItem.Visible = isExistGroup ? fItem.Visible : "true";
                                formItem.Group = isExistGroup ? fItem.Group : group;
                                sbGH.Append(GetSubTableStr(name));
                                sbGH.Append("}");
                                formItem.Settings = isExistGroup ? fItem.Settings : sbGH.ToString();
                                if (isExistGroup)
                                {
                                    formItem.readOnly = fItem.readOnly;
                                    formItem.Unique = fItem.Unique;
                                    formItem.DefaultValue = fItem.DefaultValue;
                                    formItem.SummaryType = fItem.SummaryType;
                                    formItem.width = fItem.width;
                                    formItem.align = fItem.align;
                                    formItem.ColumnSettings = fItem.ColumnSettings;
                                }
                                if (formList.Where(c => c.Code == formItem.Code).Count() == 0)
                                    formList.Add(formItem);
                            }
                            else
                            {
                                string name = subStr(NoHTML(td.Value).Replace("{", "").Replace("}", ""));
                                FormItem fItem = null;
                                if (listItems != null && listItems.Where(c => c.Name == name).Count() > 0)
                                {
                                    fItem = listItems.Where(c => c.Name == name).First();
                                }
                                bool isExistGroup = fItem != null;
                                FormItem formItem = new FormItem();
                                formItem.ID = isExistGroup ? fItem.ID : FormulaHelper.CreateGuid();
                                formItem.Code = isExistGroup ? fItem.Code : GetChineseSpell(name);
                                formItem.Name = isExistGroup ? fItem.Name : name;
                                string pinyin = GetChineseSpell(name);
                                Dictionary<S_M_EnumDef, List<S_M_EnumItem>> dic = CacheHelper.Get(pinyin) as Dictionary<S_M_EnumDef, List<S_M_EnumItem>>;
                                string itemType = "";
                                StringBuilder settings = new StringBuilder();
                                if (dic != null)
                                    foreach (var item in dic)
                                    {
                                        string key = "Flow." + pinyin;
                                        if (item.Key.Code == key)
                                        {
                                            itemType = "ComboBox";
                                            settings.Append("{\"required\":\"false\",\"allowInput\":\"false\",\"multiSelect\":\"false\",\"showNullItem\":\"false\",\"nullItemText\":\"\",\"valueFromSelect\":\"true\",\"textName\":\"\",\"style_width\":\"100%\",\"data\":\"");
                                            settings.Append(key);
                                            settings.Append("\",\"onvaluechanged\":\"\",\"onitemclick\":\"\"}");
                                            if (entities.Set<S_M_EnumDef>().SingleOrDefault(c => c.Code == key) == null)
                                            {
                                                entities.Set<S_M_EnumDef>().Add(item.Key);
                                                foreach (var items in item.Value)
                                                {
                                                    entities.Set<S_M_EnumItem>().Add(items);
                                                }
                                            }
                                        }
                                    }
                                formItem.FieldType = isExistGroup ? fItem.FieldType : GetFieldType(name).Split('.')[0];
                                formItem.ItemType = isExistGroup ? fItem.ItemType : string.IsNullOrEmpty(itemType) ? GetFieldType(name).Split('.')[1] : itemType;
                                formItem.Enabled = isExistGroup ? fItem.Enabled : "true";
                                formItem.Visible = isExistGroup ? fItem.Visible : "true";
                                formItem.Group = isExistGroup ? fItem.Group : group;
                                if (isExistGroup)
                                {
                                    formItem.readOnly = fItem.readOnly;
                                    formItem.Unique = fItem.Unique;
                                    formItem.DefaultValue = fItem.DefaultValue;
                                    formItem.SummaryType = fItem.SummaryType;
                                    formItem.width = fItem.width;
                                    formItem.align = fItem.align;
                                    formItem.ColumnSettings = fItem.ColumnSettings;
                                }
                                formItem.Settings = isExistGroup ? fItem.Settings : settings.ToString();
                                if (formList.Where(c => c.Code == formItem.Code).Count() == 0)
                                    formList.Add(formItem);
                            }
                        }
                    }
                }
                i += 1;
            }
            var form = entities.Set<S_UI_Form>().SingleOrDefault(c => c.ID == formID);
            if (form != null)
            {
                var items = JsonHelper.ToObject<List<FormItem>>(form.Items);
                foreach (var item in items)
                {
                    if (formList.Where(c => c.Code == item.Code).Count() == 0)
                        formList.Add(item);
                }
            }
            return JsonHelper.ToJson(formList);
        }

        [ValidateInput(false)]
        public JsonResult SaveFormList(string formID, string layout, string itemList, bool isCreateFlow)
        {
            string TmplCode = "", Items = "", FlowID = "";
            if (!string.IsNullOrEmpty(layout))
            {
                SaveItemList(itemList, formID);
                var uiFO = FormulaHelper.CreateFO<LayoutUIFO>();
                var form = entities.Set<S_UI_Form>().SingleOrDefault(c => c.ID == formID);
                if (form != null)
                {
                    form.Layout = layout;
                    TmplCode = form.Code;
                    form.Items = Items = GetItems(formID, layout, itemList);
                }
                entities.SaveChanges();
                uiFO.ReleaseForm(formID);
            }
            if (isCreateFlow)
                CreateFlowDef(formID);
            else
            {
                var wfEntities = FormulaHelper.GetEntities<WorkflowEntities>();
                var form = entities.Set<S_UI_Form>().SingleOrDefault(c => c.ID == formID);
                var defFlow = wfEntities.Set<S_WF_DefFlow>().SingleOrDefault(c => c.Code == form.Code);
                if (defFlow != null)
                    FlowID = defFlow.ID;
            }
            return Json(new { ID = formID, TmplCode = TmplCode, Items = Items, FlowID = FlowID });
        }

        public JsonResult DeleteForm(string id)
        {
            var form = entities.Set<S_UI_Form>().FirstOrDefault(c => c.ID == id);
            if (form == null)
                throw new Exception("表单不存在,请确认!");
            entities.Set<S_UI_Form>().Remove(form);
            entities.SaveChanges();
            return Json("");
        }

        public JsonResult GetUseFormList(MvcAdapter.QueryBuilder qb)
        {
            if (!string.IsNullOrEmpty(Request["CategoryID"]))
            {
                string categoryID = Request["CategoryID"];
                qb.Add("CategoryID", QueryMethod.In, categoryID);
            }
            var list = entities.Set<S_UI_Form>().Where(qb);

            return Json(list);
        }


        #region 流程设计
        public JsonResult GetUseFlowList()
        {
            string categoryID = Request["CategoryID"];
            var wfEntities = FormulaHelper.GetEntities<WorkflowEntities>();
            return Json(wfEntities.Set<S_WF_DefFlow>().Where(c => c.CategoryID == categoryID));
        }

        public S_WF_DefFlow CreateFlow(string categoryID, Dictionary<string, object> formDic)
        {
            var entity = entities.Set<S_M_Category>().SingleOrDefault(c => c.ID == categoryID);
            var wfEntities = FormulaHelper.GetEntities<WorkflowEntities>();
            S_WF_DefFlow def = new S_WF_DefFlow();
            var userInfo = FormulaHelper.GetUserInfo();
            def.ID = FormulaHelper.CreateGuid();
            def.Code = formDic.GetValue("FlowCode");
            def.Name = formDic.GetValue("Title");
            def.ConnName = entity.Code;
            def.TableName = formDic.GetValue("TableName");
            def.FormUrl = "/MvcConfig/UI/Form/PageView?TmplCode=" + formDic.GetValue("FlowCode");
            def.FlowNameTemplete = formDic.GetValue("Title");
            def.TaskNameTemplete = "{StepName}-表单名(业务字段：{ID})";
            def.ModifyTime = DateTime.Now;
            def.ModifyUserID = userInfo.UserID;
            def.ModifyUserName = userInfo.UserName;
            def.CreateTime = DateTime.Now;
            def.CreateUserID = userInfo.UserID;
            def.CreateUserName = userInfo.UserName;
            def.CategoryID = categoryID;
            wfEntities.Set<S_WF_DefFlow>().Add(def);
            return def;
        }

        public string CreateFlowDef(string id)
        {
            string flowID = "";
            var form = entities.Set<S_UI_Form>().SingleOrDefault(c => c.ID == id);
            if (form != null)
            {
                var wfEntities = FormulaHelper.GetEntities<WorkflowEntities>();
                S_WF_DefFlow def = new S_WF_DefFlow();
                var userInfo = FormulaHelper.GetUserInfo();
                def.ID = FormulaHelper.CreateGuid();
                def.Code = form.Code;
                def.Name = form.Name;
                def.ConnName = form.ConnName;
                def.TableName = form.TableName;
                def.FormUrl = "/MvcConfig/UI/Form/PageView?TmplCode=" + form.Code;
                def.FlowNameTemplete = form.Name;
                def.TaskNameTemplete = "{StepName}-表单名(业务字段：{ID})";
                def.ModifyTime = DateTime.Now;
                def.ModifyUserID = userInfo.UserID;
                def.ModifyUserName = userInfo.UserName;
                def.CreateTime = DateTime.Now;
                def.CreateUserID = userInfo.UserID;
                def.CreateUserName = userInfo.UserName;
                def.CategoryID = form.CategoryID;
                wfEntities.Set<S_WF_DefFlow>().Add(def);
                flowID = def.ID;
                wfEntities.SaveChanges();
            }
            return flowID;
        }

        public JsonResult DeleteFlow(string id)
        {
            var wfEntities = FormulaHelper.GetEntities<WorkflowEntities>();
            var flow = wfEntities.Set<S_WF_DefFlow>().FirstOrDefault(c => c.ID == id);
            if (flow == null)
                throw new Exception("流程不存在,请确认!");
            wfEntities.Set<S_WF_DefFlow>().Remove(flow);
            wfEntities.SaveChanges();
            return Json("");
        }

        public JsonResult EditFlow(string categoryID, string flowID, bool isEdit)
        {
            var wfEntities = FormulaHelper.GetEntities<WorkflowEntities>();
            S_WF_DefFlow flow = null;
            var formDic = JsonHelper.ToObject<Dictionary<string, object>>(Request["data"]);
            string title = formDic.GetValue("Title");
            string tableName = formDic.GetValue("TableName");
            if (!isEdit)
            {
                string code = formDic.GetValue("FlowCode");
                if (wfEntities.Set<S_WF_DefFlow>().Where(c => c.Code == code && c.CategoryID == categoryID).Count() > 0)
                    throw new Exception("流程已存在!");
                flow = CreateFlow(categoryID, formDic);
            }
            else
            {
                flow = wfEntities.Set<S_WF_DefFlow>().FirstOrDefault(c => c.ID == flowID);
                if (flow == null)
                    throw new Exception("流程不存在,请确认!");
                flow.Code = formDic.GetValue("FlowCode");
                flow.Name = title;
                flow.TableName = tableName;
            }
            wfEntities.SaveChanges();
            return Json(flow);
        }
        #endregion

        private S_UI_Form AddForm(string categoryID, string name, string tmplCode, string tableName)
        {
            var entity = entities.Set<S_M_Category>().SingleOrDefault(c => c.ID == categoryID);
            if (entities.Set<S_UI_Form>().Count(c => c.Code == tmplCode) == 0)
            {
                S_UI_Form form = new S_UI_Form();
                form.ID = FormulaHelper.CreateGuid();
                form.Code = tmplCode;
                form.Name = name;
                form.ConnName = entity.Code;
                form.TableName = tableName;
                form.CategoryID = entity.ID;
                form.Items = "[]";
                form.DefaultValueSettings = "[]";
                form.FlowLogic = "[]";
                form.Setttings = "{}";
                form.SerialNumberSettings = "{\"Tmpl\":\"{YY}{MM}{DD}-{NNNN}\",\"ResetRule\":\"YearCode,MonthCode\"}";

                var user = FormulaHelper.GetUserInfo();
                form.ModifyUserID = user.UserID;
                form.ModifyTime = DateTime.Now;
                form.ModifyUserName = user.UserName;
                form.CreateTime = DateTime.Now;
                form.CreateUserID = user.UserID;
                form.CreateUserName = user.UserName;
                form.Layout = "";
                entities.Set<S_UI_Form>().Add(form);
                return form;
            }
            else
            {
                return entities.Set<S_UI_Form>().FirstOrDefault(c => c.Code == tmplCode);
            }

        }

        public JsonResult EditForm(string categoryID, string name, string tmplCode, string tableName, string formID, bool IsEdit)
        {
            if (!IsEdit)
            {
                if (entities.Set<S_UI_Form>().FirstOrDefault(c => c.Code == tmplCode) != null)
                    throw new Exception("存在相同的表单编号(" + tmplCode + ")!");
                S_UI_Form form = AddForm(categoryID, name, tmplCode, tableName);
                entities.SaveChanges();
                SQLHelper sqlHelper = SQLHelper.CreateSqlHelper(ConnEnum.Base);
                sqlHelper.ExecuteNonQuery(string.Format(@"UPDATE dbo.S_UI_Form SET IsUEditor=NULL WHERE ID='{0}'", form.ID));
                return Json(form);
            }
            else
            {
                var form = entities.Set<S_UI_Form>().FirstOrDefault(c => c.ID == formID);
                form.Name = name;
                form.Code = tmplCode;
                form.TableName = tableName;
                entities.SaveChanges();
                SQLHelper sqlHelper = SQLHelper.CreateSqlHelper(ConnEnum.Base);
                sqlHelper.ExecuteNonQuery(string.Format(@"UPDATE dbo.S_UI_Form SET IsUEditor=NULL WHERE ID='{0}'", formID));
                return Json(form);
            }

        }

        public JsonResult CloneForm(string formID, string categoryID)
        {
            S_UI_Form form = new S_UI_Form();
            var list = entities.Set<S_UI_Form>().FirstOrDefault(c => c.ID == formID);
            var category = entities.Set<S_M_Category>().FirstOrDefault(c => c.ID == categoryID);
            string code = list.Code + "_clone";
            if (entities.Set<S_UI_Form>().FirstOrDefault(c => c.Code == code) != null)
                throw new Exception("存在相同的表单编号(" + form.Code + ")!");
            form.ID = FormulaHelper.CreateGuid();
            form.Code = list.Code + "_clone";
            form.Name = list.Name;
            form.ConnName = category != null ? category.Code : list.ConnName;
            form.TableName = list.TableName;
            form.CategoryID = categoryID;
            form.Items = list.Items;
            form.DefaultValueSettings = list.DefaultValueSettings;
            form.FlowLogic = list.FlowLogic;
            form.Setttings = list.Setttings;
            form.Script = list.Script;
            form.ScriptText = list.ScriptText;
            form.MobileScriptText = list.MobileScriptText;
            form.SerialNumberSettings = list.SerialNumberSettings;

            var user = FormulaHelper.GetUserInfo();
            form.ModifyUserID = user.UserID;
            form.ModifyTime = DateTime.Now;
            form.ModifyUserName = user.UserName;
            form.CreateTime = DateTime.Now;
            form.CreateUserID = user.UserID;
            form.CreateUserName = user.UserName;
            form.Layout = list.Layout;
            entities.Set<S_UI_Form>().Add(form);
            entities.SaveChanges();
            return Json(form);
        }


        public FileResult SqlFile(string defID, string tableName)
        {
            string sql = string.Format("select * from {1} where ID in('{0}')", defID.Replace(",", "','"), tableName);
            SQLHelper sqlHelper = SQLHelper.CreateSqlHelper(ConnEnum.Base);
            DataTable dt = sqlHelper.ExecuteDataTable(sql);
            string fileName = "T_";
            StringBuilder result = new StringBuilder(); ;
            if (Config.Constant.IsOracleDb)
            {
                //声明变量
                result.Append("DECLARE");
                result.AppendLine();
                foreach (DataColumn col in dt.Columns)
                {
                    if (col.DataType == typeof(string))
                    {
                        result.AppendFormat("{0} nclob;", col.ColumnName);
                        result.AppendLine();
                    }
                }

            }
            else
            {
                #region SqlServer版
                StringBuilder sb = new StringBuilder("\n\n");
                var uiFO = FormulaHelper.CreateFO<LayoutUIFO>();
                foreach (DataRow row in dt.Rows)
                {
                    fileName = fileName + (row.Table.Columns.Contains("CategoryCode") ? row["CategoryCode"] : row["Code"]);
                    sb.AppendFormat("USE [{0}_{1}]", sqlHelper.DbName.Split('_').First(), row["Code"]);
                    sb.AppendLine();
                    sb.Append(uiFO.CreateReleaseFormSql(row["ID"].ToString()));
                }

                result.AppendFormat(sb.ToString());

                #endregion
            }

            MemoryStream ms = new MemoryStream(System.Text.Encoding.Default.GetBytes(result.ToString()));
            ms.Position = 0;
            return File(ms, "application/octet-stream ; Charset=UTF8", fileName + ".sql");
        }

        public JsonResult GetTree()
        {
            SQLHelper sqlHelper = SQLHelper.CreateSqlHelper("Base");
            DataTable dt = sqlHelper.ExecuteDataTable(string.Format("select ID,ParentID,FullID,Code,Name,CategoryCode,IconClass from S_M_Category where IconClass in ('icon-system','icon-database') and FullID like '{0}%'", "0"));
            return Json(dt, JsonRequestBehavior.AllowGet);
        }

        #region 树和列表数据获取

        public JsonResult GetFormList(MvcAdapter.QueryBuilder qb)
        {
            string id = Request["ID"];
            if (!string.IsNullOrEmpty(id))
                qb.Add("CategoryID", QueryMethod.In, id);
            var list = entities.Set<S_UI_Form>().Where(qb).Select(c => new { ID = c.ID, Code = c.Code, Name = c.Name, ConnName = c.ConnName, TableName = c.TableName, ModifyTime = c.ModifyTime, Category = c.Category });
            GridData data = new GridData(list);
            data.total = qb.TotolCount;
            return Json(data);
        }

        #endregion

        public JsonResult GetUseList(MvcAdapter.QueryBuilder qb)
        {
            string categoryID = Request["CategoryID"];
            if (!string.IsNullOrEmpty(categoryID))
            {
                qb.Add("ParentID", QueryMethod.Equal, categoryID);
            }
            qb.SortField = "FullID,SortIndex";
            qb.SortOrder = "asc,asc";

            string sql = "select ID,Code,CategoryCode,Name,ParentID,FullID,SortIndex,Description from S_M_Category where ParentID<>'' and ParentID is not null";
            SQLHelper sqlHelper = SQLHelper.CreateSqlHelper(ConnEnum.Base);
            DataTable dt = sqlHelper.ExecuteDataTable(sql, qb);

            GridData data = new GridData(dt);
            data.total = qb.TotolCount;

            return Json(data);
        }
        public JsonResult DeleteUse(string ids)
        {
            foreach (string id in ids.Split(','))
            {
                var category = entities.Set<S_M_Category>().SingleOrDefault(c => c.ID == id);
                entities.Set<S_M_Category>().Remove(category);
            }
            entities.SaveChanges();
            return Json("");
        }


        public JsonResult AutoCreateLayout(string ID, string mode = "", string data = "")
        {
            int layoutMode = 2;
            string decorative = "", title = ""; //fieldset装饰或table装饰
            if (!string.IsNullOrEmpty(mode))
            {
                layoutMode = int.Parse(mode.Split(',')[0]);
                decorative = mode.Split(',')[1]; //fieldset装饰或table装饰

            }
            else if (!string.IsNullOrEmpty(data))
            {
                var dictionary = JsonHelper.ToObject<Dictionary<string, string>>(data);
                decorative = dictionary.GetValue("LayoutMode");
                layoutMode = int.Parse(dictionary.GetValue("Cols"));
                title = dictionary.GetValue("Title");
            }
            #region 装饰

            string strDecorativeStart = "";
            string strDecorativeEnd = "";
            string strDecorativeTable = "";

            if (decorative == "fieldset")
            {
                strDecorativeStart = @"
<fieldset class='formDiv'>
    <legend>{0}</legend>
";
                strDecorativeEnd = @"
</fieldset>
";
                strDecorativeTable = "style='width:100%;'cellpadding='2' border='0'";
            }
            else if (decorative == "table")
            {
                strDecorativeStart = @"
<table class='ke-zeroborder' style='width:100%;table-layout:fixed' cellspacing='0' cellpadding='2' border='0'>
	<tbody>
		<tr>
			<td style='text-align:left;width:30%;'>		
                版本/修改码：D/1		
			</td>
			<td style='text-align:center;'>		
                QM-P-03-02
			</td>
            <td style='text-align:right;width:30%;'>
                编号：{{流水号}}
			</td>
		</tr>
	</tbody>
</table>
";
                strDecorativeEnd = "";
                strDecorativeTable = "style='width:100%;table-layout:fixed'cellpadding='2' border='1'";
            }

            #endregion

            var form = entities.Set<S_UI_Form>().SingleOrDefault(c => c.ID == ID);
            var uiFO = FormulaHelper.CreateFO<LayoutUIFO>();
            var listItems = JsonHelper.ToObject<List<FormItem>>(form.Items);
            StringBuilder sb = new StringBuilder();
            sb.AppendFormat("<h1 align='center'>{0}</h1>", string.IsNullOrEmpty(title) ? form.Name : title);

            foreach (var group in listItems.Select(c => c.Group ?? "").Distinct().ToList())
            {
                var list = listItems.Where(c => c.Group == group).ToList();
                //补齐
                while (list.Count % layoutMode != 0)
                {
                    list.Add(new FormItem() { Code = "", Name = "" });
                }

                //开始装饰
                sb.AppendFormat(strDecorativeStart, group);

                //开始内容
                sb.AppendFormat(@"
    <table class='ke-zeroborder' {0}>", strDecorativeTable);

                string labelStyle = "style='width: 15%'";
                string inputStyle = "style='width: 35%'";
                if (layoutMode == 3)
                    inputStyle = "style='width: 18%'";

                bool firstRow = true;
                for (int i = 0; i < list.Count; i++)
                {
                    var item = list[i];
                    if (i % layoutMode == 0)
                    {
                        sb.Append("<tr>");
                        if (firstRow == false)
                        {
                            labelStyle = "";
                            inputStyle = "";
                        }
                        firstRow = false;
                    }

                    if (i % layoutMode > 0)
                    {
                        labelStyle = "style='padding-left:20px'";
                    }

                    sb.AppendFormat("<td {2}>{0}</td><td {3}>{1}</td>", item.Name, string.IsNullOrEmpty(item.Name) ? "" : "{" + item.Name + "}", labelStyle, inputStyle);

                    if (i % layoutMode == layoutMode - 1)
                        sb.Append("</tr>");
                }

                sb.Append(@"
    </table>
");
                //结束内容

                sb.Append(strDecorativeEnd);
                //结束装饰

            }


            return Json(new { layout = sb.ToString() });
        }

        #region 从数据库表导入

        public JsonResult ImportItemFormDB(string formID)
        {
            var formDef = entities.Set<S_UI_Form>().SingleOrDefault(c => c.ID == formID);

            SQLHelper sqlHelper = SQLHelper.CreateSqlHelper(formDef.ConnName);

            string sql = string.Format(@"SELECT  Code= a.name , Name= isnull(g.[value],''),FieldType1=b.name,sortIndex=a.column_id
,Enabled='true',Visible='true',[Group]='基本信息'
FROM  sys.columns a left join sys.extended_properties g on (a.object_id = g.major_id AND g.minor_id = a.column_id)
left join systypes b on a.user_type_id=b.xusertype  
WHERE  object_id =(SELECT object_id FROM sys.tables WHERE name = '{0}')", formDef.TableName);


            var dt = sqlHelper.ExecuteDataTable(sql);




            for (int i = dt.Rows.Count - 1; i >= 0; i--)
            {
                var row = dt.Rows[i];
                if ("ID,CreateUserID,CreateUserName,CreateTime,ModifyUserID,ModifyUserName,ModifyTime,CreateDate,ModifyDate,CreateUser,ModifyUser,OrgID,CompanyID,FlowInfo,FlowPhase,StepName".Split(',').Contains(row["Code"].ToString()))
                    dt.Rows.Remove(row);
            }

            var arr = dt.AsEnumerable().Select(c => c["Code"].ToString()).ToArray();

            foreach (var fieldCode in arr)
            {
                if (arr.Contains(fieldCode + "Name"))
                {
                    var row = dt.AsEnumerable().SingleOrDefault(c => c["Code"].ToString() == fieldCode + "Name");
                    dt.Rows.Remove(row);
                }
            }

            dt.Columns.Add("ID");
            List<FormItem> list = new List<FormItem>();
            foreach (DataRow row in dt.Rows)
            {
                row["ID"] = FormulaHelper.CreateGuid();
                list.Add(new FormItem
                {
                    ID = Convert.ToString(row["ID"]),
                    Code = Convert.ToString(row["Code"]),
                    Name = string.IsNullOrEmpty(Convert.ToString(row["Name"])) ? Convert.ToString(row["Code"]) : Convert.ToString(row["Name"]),
                    Enabled = Convert.ToString(row["Enabled"]),
                    Visible = Convert.ToString(row["Visible"]),
                    Group = Convert.ToString(row["Group"]),
                    DefaultValue = "",
                    ItemType = GetFieldType(Convert.ToString(row["Name"])).Split('.')[1],
                    FieldType = GetFieldType(Convert.ToString(row["Name"])).Split('.')[0]
                });
            }

            return Json(list);
        }

        #endregion

        public JsonResult GetList(string categoryID)
        {
            return Json(entities.Set<S_UI_List>().Where(c => c.CategoryID == categoryID).Select(c => new { ID = c.ID, code = c.Code, name = c.Name, title = c.Name, modifyTime = c.ModifyTime, url = "FlowUseTabs?ID=" + c.ID + "&TmplCode=" + c.Code }));
        }

        [ValidateInput(false)]
        public JsonResult ImportItemFromLayout(string formID, string layout)
        {
            var form = entities.Set<S_UI_Form>().SingleOrDefault(c => c.ID == formID);
            if (form == null)
                throw new Exception("不存在该表单!");
            UIFO uiFO = FormulaHelper.CreateFO<UIFO>();

            Regex reg = new Regex(UIFO.uiRegStr);
            var matchs = reg.Matches(layout, 0);

            var list = JsonHelper.ToObject<List<FormItem>>(form.Items ?? "[]");

            int index = list.Count;
            foreach (Match match in matchs)
            {
                string name = match.Value.Trim('{', '}');
                if (list.SingleOrDefault(c => c.Name == name) == null)
                    list.Add(new FormItem
                    {
                        ID = FormulaHelper.CreateGuid(),
                        Code = uiFO.GetHanZiPinYinString(name),
                        Name = name,
                        Enabled = "true",
                        Visible = "true",
                        DefaultValue = "",
                        ItemType = GetFieldType(name).Split('.')[1],
                        FieldType = GetFieldType(name).Split('.')[0]
                    });
            }
            return Json(list);
        }

        public JsonResult GetLayoutField(string id)
        {
            string LayoutField = "";
            var list = entities.Set<S_UI_List>().SingleOrDefault(c => c.ID == id);
            if (list != null)
                LayoutField = list.LayoutField;
            var layout = entities.Set<S_UI_Layout>().SingleOrDefault(c => c.ID == id);
            if (layout != null)
                LayoutField = layout.LayoutField;
            return Json(LayoutField);
        }

        public JsonResult SetFlowList(string id)
        {
            var list = entities.Set<S_UI_List>().SingleOrDefault(c => c.ID == id);
            if (list != null)
                list.LayoutGrid = Request["Data"];
            else
            {
                var layout = entities.Set<S_UI_Layout>().SingleOrDefault(c => c.ID == id);
                if (layout != null)
                    layout.LayoutGrid = Request["Data"];
            }
            entities.SaveChanges();
            return Json("");
        }

        public JsonResult GetNavLayoutField(string id, bool isField = true)
        {
            var sublist = entities.Set<S_UI_Layout>().FirstOrDefault(c => c.ID == id);
            var layout = entities.Set<S_UI_Layout>().FirstOrDefault(c => c.ID == sublist.ParentID);
            if (layout != null)
            {
                if (isField)
                    return Json(layout.LayoutField);
                else
                    return Json(layout);
            }
            else
                return Json(sublist.LayoutField);
        }

        public JsonResult upWord(string formID)
        {
            var form = entities.Set<S_UI_Form>().FirstOrDefault(c => c.ID == formID);
            var uiWord = entities.Set<S_UI_Word>().FirstOrDefault(c => c.Code == form.Code);
            if (uiWord == null)
            {
                S_UI_Word word = new S_UI_Word();
                var user = FormulaHelper.GetUserInfo();
                word.ID = FormulaHelper.CreateGuid();
                word.Code = form.Code;
                word.Name = form.Name;
                word.ConnName = form.ConnName;
                word.TableNames = form.TableName;
                word.SQL = "select * from " + form.TableName;
                word.CategoryID = form.CategoryID;
                word.CreateTime = DateTime.Now;
                word.CreateUserID = user.UserID;
                word.CreateUserName = user.UserOrgCode;

                entities.Set<S_UI_Word>().Add(word);
                entities.SaveChanges();
                return Json(word);
            }
            else
            {
                return Json(uiWord);
            }
        }

        public FileResult ExportWord(string fileName)
        {
            string tempPath = Server.MapPath("~/FlowFile/Help/" + fileName);
            return File(tempPath, "application/ms-excel", fileName);
        }

        public JsonResult GetLayoutButton(string id)
        {
            string LayoutButton = "";
            var list = entities.Set<S_UI_List>().FirstOrDefault(c => c.ID == id);
            if (list != null)
                LayoutButton = list.LayoutButton;
            var layout = entities.Set<S_UI_Layout>().FirstOrDefault(c => c.ID == id);
            if (layout != null)
                LayoutButton = layout.LayoutButton;
            return Json(LayoutButton);
        }

        #region 应用

        private object SaveList(Dictionary<string, object> formDic)
        {
            var entity = UpdateEntity<S_UI_List>();
            if (entities.Set<S_UI_List>().Count(c => c.Code == entity.Code && c.ID != entity.ID) > 0)
                throw new Exception(string.Format("列表编号重复，表单名称“{0}”，表单编号：“{1}”", entity.Name, entity.Code));
            var category = entities.Set<S_M_Category>().SingleOrDefault(c => c.ID == entity.CategoryID);
            entity.ConnName = category.Code;

            if (entity._state == EntityStatus.added.ToString())
            {
                entity.LayoutButton = LayoutButton;
                entity.LayoutButton.Replace("\r\n", "");

                entity.LayoutGrid = LayoutGrid;

                entity.LayoutField = "[]";

                entity.LayoutSearch = "[]";
            }
            var settings = new Dictionary<string, object>();
            settings.SetValue("ShowQueryForm", formDic.GetValue("ShowQueryForm"));
            settings.SetValue("QueryFormColmuns", formDic.GetValue("QueryFormColmuns"));
            entity.Settings = JsonHelper.ToJson(settings);  //settings.ToString(); 


            entity.ModifyTime = DateTime.Now;
            var user = FormulaHelper.GetUserInfo();
            entity.ModifyUserID = user.UserID;
            entity.ModifyUserName = user.UserName;

            entity.Script = Request["Script"];
            entity.ScriptText = Request["Script"];
            entities.SaveChanges();
            entity.Name = entity.Name;
            return entity;
        }

        private object SaveLists(Dictionary<string, object> formDic)
        {
            string id = FormulaHelper.CreateGuid();
            var entity = UpdateEntity<S_UI_Layout>();
            var user = FormulaHelper.GetUserInfo();
            var category = entities.Set<S_M_Category>().SingleOrDefault(c => c.ID == entity.CategoryID);

            if (entity._state == EntityStatus.added.ToString())
            {
                if (entities.Set<S_UI_Layout>().Count(c => c.Code == entity.Code && c.ID != entity.ID) > 0)
                    throw new Exception(string.Format("列表编号重复，表单名称“{0}”，表单编号：“{1}”", entity.Name, entity.Code));
                entity.LayoutButton = LayoutButton;
                entity.LayoutButton.Replace("\r\n", "");

                entity.LayoutGrid = LayoutGrid;

                entity.LayoutField = "[]";

                entity.LayoutSearch = "[]";
            }
            else if (entity._state == EntityStatus.modified.ToString())
            {
                var sub = entities.Set<S_UI_Layout>().FirstOrDefault(c => c.ID == entity.ParentID);
                sub.Name = entity.Name;
                sub.Height = entity.Height;
                sub.ConnName = formDic.GetValue("CConnName");
                sub.TableNames = formDic.GetValue("CTableNames");
                sub.SQL = formDic.GetValue("CSQL");
                sub.ModifyTime = DateTime.Now;
                sub.ModifyUserID = user.UserID;
                sub.ModifyUserName = user.UserName;
            }
            var settings = new Dictionary<string, object>();
            settings.SetValue("ShowQueryForm", formDic.GetValue("ShowQueryForm"));
            settings.SetValue("QueryFormColmuns", formDic.GetValue("QueryFormColmuns"));
            entity.Settings = JsonHelper.ToJson(settings);  //settings.ToString(); 


            entity.ModifyTime = DateTime.Now;

            entity.ModifyUserID = user.UserID;
            entity.ModifyUserName = user.UserName;

            entity.Script = Request["Script"];
            if (string.IsNullOrEmpty(entity.ParentID))
                entity.ParentID = id;
            entity.Type = EnumUseType.Lists.ToString();
            var layoutList = entities.Set<S_UI_Layout>().Where(c => c.Code.Contains(entity.Code));
            entity.Mode = formDic.GetValue("Mode");
            entity.UseType = EnumUseType.Lists.ToString();

            //子表
            if (layoutList.Count() == 0)
            {
                S_UI_Layout layout = new S_UI_Layout();
                layout.ID = id;
                layout.Code = "NavTable_" + entity.Code;
                layout.Name = entity.Name;
                layout.CategoryID = entity.CategoryID;
                layout.CreateUserID = entity.CreateUserID;
                layout.CreateTime = entity.CreateTime;
                layout.CreateUserName = entity.CreateUserName;
                layout.ModifyTime = entity.ModifyTime;
                layout.ModifyUserID = entity.ModifyUserID;
                layout.ModifyUserName = entity.ModifyUserName;
                layout.CreateUserID = entity.CreateUserID;
                layout.ConnName = formDic.GetValue("CConnName");
                layout.LayoutGrid = LayoutGrid;
                layout.LayoutField = "[]";
                layout.LayoutButton = "[]";
                layout.LayoutSearch = "[]";
                layout.Settings = entity.Settings;
                layout.SQL = formDic.GetValue("CSQL");
                layout.TableNames = formDic.GetValue("CTableNames");
                layout.OrderBy = "";
                layout.UseType = entity.UseType;
                layout.Mode = entity.Mode;
                layout.Type = entity.Type;
                layout.Height = formDic.GetValue("Height");

                entities.Set<S_UI_Layout>().Add(layout);
            }
            entities.SaveChanges();
            entity.Name = entity.Name;
            return entity;
        }

        private object SaveListTabs(Dictionary<string, object> formDic)
        {
            string id = FormulaHelper.CreateGuid();
            var entity = UpdateEntity<S_UI_Layout>();
            var user = FormulaHelper.GetUserInfo();
            var category = entities.Set<S_M_Category>().SingleOrDefault(c => c.ID == entity.CategoryID);

            if (entity._state == EntityStatus.added.ToString())
            {
                if (entities.Set<S_UI_Layout>().Count(c => c.Code == entity.Code && c.ID != entity.ID) > 0)
                    throw new Exception(string.Format("列表编号重复，表单名称“{0}”，表单编号：“{1}”", entity.Name, entity.Code));
                entity.LayoutButton = LayoutButton;
                entity.LayoutButton.Replace("\r\n", "");

                entity.LayoutGrid = LayoutGrid;

                entity.LayoutField = "[]";

                entity.LayoutSearch = "[]";
            }

            var settings = new Dictionary<string, object>();
            settings.SetValue("ShowQueryForm", formDic.GetValue("ShowQueryForm"));
            settings.SetValue("QueryFormColmuns", formDic.GetValue("QueryFormColmuns"));
            entity.Settings = JsonHelper.ToJson(settings);  //settings.ToString(); 


            entity.ModifyTime = DateTime.Now;

            entity.ModifyUserID = user.UserID;
            entity.ModifyUserName = user.UserName;

            entity.Script = Request["Script"];

            entity.Type = EnumUseType.ListTabs.ToString();
            entity.LayoutTab = Request.Form["TabData"];
            entity.SQL = formDic.GetValue("CSQL");
            entity.TableNames = formDic.GetValue("CTableNames");

            entities.SaveChanges();
            return entity;
        }

        private object SaveTabs(Dictionary<string, object> formDic)
        {
            string id = FormulaHelper.CreateGuid();
            var entity = UpdateEntity<S_UI_Layout>();
            var user = FormulaHelper.GetUserInfo();
            var category = entities.Set<S_M_Category>().SingleOrDefault(c => c.ID == entity.CategoryID);

            if (entity._state == EntityStatus.added.ToString())
            {
                if (entities.Set<S_UI_Layout>().Count(c => c.Code == entity.Code && c.ID != entity.ID) > 0)
                    throw new Exception(string.Format("列表编号重复，表单名称“{0}”，表单编号：“{1}”", entity.Name, entity.Code));
                entity.LayoutButton = LayoutButton;
                entity.LayoutButton.Replace("\r\n", "");

                entity.LayoutGrid = LayoutGrid;

                entity.LayoutField = "[]";

                entity.LayoutSearch = "[]";
            }

            var settings = new Dictionary<string, object>();
            settings.SetValue("ShowQueryForm", formDic.GetValue("ShowQueryForm"));
            settings.SetValue("QueryFormColmuns", formDic.GetValue("QueryFormColmuns"));
            entity.Settings = JsonHelper.ToJson(settings);  //settings.ToString(); 


            entity.ModifyTime = DateTime.Now;

            entity.ModifyUserID = user.UserID;
            entity.ModifyUserName = user.UserName;

            entity.Script = Request["Script"];

            entity.Type = EnumUseType.Tabs.ToString();
            entity.LayoutTab = Request.Form["TabData"];

            entities.SaveChanges();
            return entity;
        }

        private object SaveCustom(Dictionary<string, object> formDic, string type)
        {
            string id = FormulaHelper.CreateGuid();
            var entity = UpdateEntity<S_UI_Layout>();
            var user = FormulaHelper.GetUserInfo();
            var category = entities.Set<S_M_Category>().SingleOrDefault(c => c.ID == entity.CategoryID);

            if (entity._state == EntityStatus.added.ToString())
            {
                if (entities.Set<S_UI_Layout>().Count(c => c.Code == entity.Code && c.ID != entity.ID) > 0)
                    throw new Exception(string.Format("列表编号重复，表单名称“{0}”，表单编号：“{1}”", entity.Name, entity.Code));
                entity.LayoutButton = LayoutButton;
                entity.LayoutButton.Replace("\r\n", "");

                entity.LayoutGrid = LayoutGrid;

                entity.LayoutField = "[]";

                entity.LayoutSearch = "[]";
            }

            var settings = new Dictionary<string, object>();
            settings.SetValue("ShowQueryForm", formDic.GetValue("ShowQueryForm"));
            settings.SetValue("QueryFormColmuns", formDic.GetValue("QueryFormColmuns"));
            entity.Settings = JsonHelper.ToJson(settings);  //settings.ToString(); 


            entity.ModifyTime = DateTime.Now;

            entity.ModifyUserID = user.UserID;
            entity.ModifyUserName = user.UserName;

            entity.Script = Request["Script"];

            entity.Type = type;
            entity.LayoutTab = Request.Form["TabData"];
            entity.SQL = formDic.GetValue("CSQL");
            entity.TableNames = formDic.GetValue("CTableNames");

            entities.SaveChanges();
            return entity;
        }

        [ValidateInput(false)]
        public JsonResult Save()
        {
            object obj = null;
            string json = Request.Form["FormData"];
            var formDic = JsonHelper.ToObject<Dictionary<string, object>>(json);
            string UseType = formDic.GetValue("UseType");
            string Mode = formDic.GetValue("Mode");
            EnumUseType Type = (EnumUseType)Enum.Parse(typeof(EnumUseType), UseType);
            switch (Type)
            {
                case EnumUseType.List:
                    obj = SaveList(formDic);
                    break;
                case EnumUseType.Lists:
                    obj = SaveLists(formDic);
                    break;
                case EnumUseType.ListTabs:
                    obj = SaveListTabs(formDic);
                    break;
                case EnumUseType.Tabs:
                    obj = SaveTabs(formDic);
                    break;
                case EnumUseType.TreeCustom:
                    obj = SaveCustom(formDic, EnumUseType.TreeCustom.ToString());
                    break;
                case EnumUseType.TreeGridCustom:
                    obj = SaveCustom(formDic, EnumUseType.TreeGridCustom.ToString());
                    break;
                default:
                    break;
            }
            return Json(obj);
        }

        public JsonResult ImportField(string id, bool IsChild = false)
        {
            var entity = entities.Set<S_UI_List>().SingleOrDefault(c => c.ID == id);
            var layout = entities.Set<S_UI_Layout>().SingleOrDefault(c => c.ID == id);
            string layoutField = entity != null ? entity.LayoutField : layout.LayoutField;
            string connName = entity != null ? entity.ConnName : layout.ConnName;
            string tableName = entity != null ? entity.TableNames : layout.TableNames;
            string SQL = entity != null ? entity.SQL : layout.SQL;
            string[] fields = { "ID", "CreateDate", "ModifyDate", "CreateUserID", "CreateUser", "ModifyUserID", "ModifyUser", "OrgID", "CompanyID", "FlowPhase", "FlowInfo", "StepName" };
            if (IsChild)
            {
                var child = entities.Set<S_UI_Layout>().SingleOrDefault(c => c.ID == layout.ParentID);
                tableName = child.TableNames;
                connName = child.ConnName;
                SQL = child.SQL;
            }
            var list = JsonHelper.ToList(layoutField ?? "[]");
            SQLHelper sqlHelper = SQLHelper.CreateSqlHelper(connName);
            string sql = SQL.Split(new string[] { "ORDER BY", "order by", "Order By", "Order by" }, StringSplitOptions.RemoveEmptyEntries).FirstOrDefault();

            if (Config.Constant.IsOracleDb)
                sql = string.Format("select * from ({0}) table1 where 1=2", sql);
            else
                sql = string.Format("select * from ({0}) as table1 where 1=2", sql);

            DataTable dt = sqlHelper.ExecuteDataTable(sql);

            var tableNames = tableName.ToUpper().Split(',');
            var mFields = entities.Set<S_M_Field>().Where(c => tableNames.Contains(c.S_M_Table.Code.ToUpper())).ToList();


            foreach (DataColumn col in dt.Columns)
            {
                string code = col.ColumnName;
                if (fields.Where(c => c == code && code != "FlowPhase").Count() == 0)
                {
                    string name = code;
                    if (list.Where(c => c["field"].ToString() == code).Count() > 0)
                        continue;
                    var mField = mFields.FirstOrDefault(c => c.Code == code);
                    if (mField != null && !string.IsNullOrEmpty(mField.Name))
                        name = mField.Name;
                    var dic = new Dictionary<string, object>();
                    dic.Add("field", code);
                    dic.Add("header", name);
                    dic.Add("width", "");
                    dic.Add("align", "left");
                    dic.Add("Visible", fields.Where(c => c == code).Count() > 0 || (code.Contains("ID") && code.IndexOf("ID") + 2 == code.Length) ? "false" : "true");
                    dic.Add("allowSort", "true");
                    dic.Add("AllowSearch", "false");
                    dic.Add("QueryMode", "");

                    if (col.DataType == typeof(DateTime))
                        dic.Add("Settings", "{dateFormat:'yyyy-MM-dd'}");
                    else if (code == "FlowPhase")
                    {
                        dic.Add("Settings", "{EnumKey:'FlowPhase'}");
                    }
                    else
                        dic.Add("Settings", "{}");
                    list.Add(dic);
                }
            }

            return Json(list.OrderByDescending(c => c["Visible"]));
        }

        public JsonResult GetUseLists(string categoryID)
        {
            List<UseList> useLists = new List<UseList>();
            var lists = entities.Set<S_UI_List>().Where(c => c.CategoryID == categoryID).Select(c => new { ID = c.ID, code = c.Code, title = c.Name, modifyTime = c.ModifyTime });
            var layouts = entities.Set<S_UI_Layout>().Where(c => c.CategoryID == categoryID).Select(c => new { ID = c.ID, code = c.Code, title = c.Name, parentID = c.ParentID, useType = c.UseType, modifyTime = c.ModifyTime });
            string enumList = EnumUseType.List.ToString();
            string enumLists = EnumUseType.Lists.ToString();
            string enumListTabs = EnumUseType.ListTabs.ToString();
            string enumTabs = EnumUseType.Tabs.ToString();
            string enumTreeCustom = EnumUseType.TreeCustom.ToString();
            string enumTreeGridCustom = EnumUseType.TreeGridCustom.ToString();
            foreach (var item in lists)
            {
                UseList use = new UseList();
                use.ID = item.ID;
                use.title = item.title + "(列表)";
                use.code = item.code;
                use.type = enumList;
                use.modifyTime = Convert.ToDateTime(item.modifyTime);
                useLists.Add(use);
            }

            foreach (var item in layouts.Where(c => !string.IsNullOrEmpty(c.parentID) && c.useType == enumLists))
            {
                UseList use = new UseList();
                use.ID = item.ID;
                use.title = item.title + "(导航列表)";
                use.code = item.code;
                use.type = enumLists;
                use.modifyTime = Convert.ToDateTime(item.modifyTime);
                useLists.Add(use);
            }

            foreach (var item in layouts.Where(c => c.useType == enumListTabs))
            {
                UseList use = new UseList();
                use.ID = item.ID;
                use.title = item.title + "(导航Tab)";
                use.code = item.code;
                use.type = enumListTabs;
                use.modifyTime = Convert.ToDateTime(item.modifyTime);
                useLists.Add(use);
            }
            foreach (var item in layouts.Where(c => c.useType == enumTabs))
            {
                UseList use = new UseList();
                use.ID = item.ID;
                use.title = item.title + "(Tab)";
                use.code = item.code;
                use.type = enumTabs;
                use.modifyTime = Convert.ToDateTime(item.modifyTime);
                useLists.Add(use);
            }
            foreach (var item in layouts.Where(c => c.useType == enumTreeCustom))
            {
                UseList use = new UseList();
                use.ID = item.ID;
                use.title = item.title + "(树导航)";
                use.code = item.code;
                use.type = enumTreeCustom;
                use.modifyTime = Convert.ToDateTime(item.modifyTime);
                useLists.Add(use);
            }
            foreach (var item in layouts.Where(c => c.useType == enumTreeGridCustom))
            {
                UseList use = new UseList();
                use.ID = item.ID;
                use.title = item.title + "(树列表导航)";
                use.code = item.code;
                use.type = enumTreeGridCustom;
                use.modifyTime = Convert.ToDateTime(item.modifyTime);
                useLists.Add(use);
            }
            return Json(useLists);
        }

        public ActionResult FlowUseEdit()
        {
            string categoryID = GetQueryString("CategoryID");
            var form = entities.Set<S_UI_Form>().Where(c => c.CategoryID == categoryID);
            ViewBag.UseFormList = JsonHelper.ToJson(form.Select(c => new { ID = c.ID, Code = c.Code, Name = c.Name, TableName = c.TableName }));
            var list = entities.Set<S_UI_List>().Where(c => c.CategoryID == categoryID);
            var layout = entities.Set<S_UI_Layout>().Where(c => c.CategoryID == categoryID);
            List<UseList> useLists = new List<UseList>();
            foreach (var item in list)
            {
                UseList use = new UseList();
                use.ID = item.ID;
                use.title = item.Name + "(列表)";
                use.code = item.Code;
                use.url = "/MvcConfig/UI/List/PageView?TmplCode=" + item.Code;
                use.type = EnumUseType.List.ToString();
                useLists.Add(use);
            }
            foreach (var item in form)
            {
                UseList use = new UseList();
                use.ID = item.ID;
                use.title = item.Name + "(表单)";
                use.code = item.Code;
                use.url = "/MvcConfig/UI/Form/PageView?TmplCode=" + item.Code;
                use.type = EnumUseType.Form.ToString();
                useLists.Add(use);
            }
            string lists = EnumUseType.Lists.ToString();
            foreach (var item in layout.Where(c => c.UseType == lists && !string.IsNullOrEmpty(c.ParentID)))
            {
                UseList use = new UseList();
                use.ID = item.ID;
                use.title = item.Name + "(导航列表)";
                use.code = item.Code;
                use.url = "/MvcConfig/UI/Layout/LayoutView?TmplCode=" + item.Code;
                use.type = EnumUseType.Lists.ToString();
                useLists.Add(use);
            }

            string listTabs = EnumUseType.ListTabs.ToString();
            foreach (var item in layout.Where(c => c.UseType == listTabs))
            {
                UseList use = new UseList();
                use.ID = item.ID;
                use.title = item.Name + "(导航Tab)";
                use.code = item.Code;
                use.url = "/MvcConfig/UI/Layout/LayoutView?TmplCode=" + item.Code;
                use.type = EnumUseType.ListTabs.ToString();
                useLists.Add(use);
            }
            ViewBag.UseList = JsonHelper.ToJson(useLists);
            ViewBag.EnumCategory = JsonHelper.ToJson(entities.Set<S_M_Category>().Select(c => new { ID = c.ID, Code = c.Code, Name = c.Name }));
            var dataSource = entities.Set<S_UI_DataSource>().Where(c => c.CategoryID == categoryID);
            foreach (var item in dataSource)
            {
                item.Name = item.TableName + "-" + item.Name;
                SQLHelper sqlHelper = SQLHelper.CreateSqlHelper(item.ConnName);
                DataTable dt = sqlHelper.ExecuteDataTable(item.SQL);
                List<Dictionary<string, string>> cols = new List<Dictionary<string, string>>();
                foreach (DataColumn col in dt.Columns)
                {
                    string colName = col.ColumnName;
                    Dictionary<string, string> dic = new Dictionary<string, string>();
                    dic.Add("ID", colName);
                    dic.Add("Text", colName);
                    cols.Add(dic);
                }
                item.Fields = JsonHelper.ToJson(cols);
            }
            ViewBag.DataSource = JsonHelper.ToJson(dataSource);
            return View();
        }
        #endregion

        public ActionResult FlowDesign()
        {
            string categoryID = GetQueryString("CategoryID");
            var list = entities.Set<S_UI_Form>().Where(c => c.CategoryID == categoryID);
            ViewBag.UseFormList = JsonHelper.ToJson(list);
            return View();
        }
        public ActionResult FlowRoleEdit()
        {
            string categoryID = GetQueryString("CategoryID");
            ViewBag.UseList = JsonHelper.ToJson(GetAllList(categoryID));
            ViewBag.ResList = JsonHelper.ToJson(entities.Set<S_A_Res>().Select(c => new { ID = c.ID, Name = c.Name, FullID = c.FullID }));
            return View();
        }

        public JsonResult SaveLayoutField(string id)
        {
            var list = entities.Set<S_UI_List>().SingleOrDefault(c => c.ID == id);
            string layoutField = Request["layoutField"];
            var user = FormulaHelper.GetUserInfo();
            if (list != null)
            {
                list.LayoutField = layoutField;

                list.ModifyTime = DateTime.Now;
                list.ModifyUserID = user.UserID;
                list.ModifyUserName = user.UserName;
                entities.SaveChanges();
            }
            else
            {
                var layout = entities.Set<S_UI_Layout>().SingleOrDefault(c => c.ID == id);
                var navLayout = entities.Set<S_UI_Layout>().SingleOrDefault(c => c.ID == layout.ParentID);
                if (navLayout != null)
                {
                    StringBuilder sb = new StringBuilder();
                    SQLHelper sqlHelper = SQLHelper.CreateSqlHelper(layout.ConnName);
                    string tableName = navLayout.TableNames;
                    if (tableName.IndexOf('_') >= 0)
                        tableName = tableName.Substring(tableName.LastIndexOf('_') + 1, tableName.Length - tableName.LastIndexOf('_') - 1);
                    sb.AppendFormat(@"if not exists(select * from syscolumns where id=object_id('{0}') and name='{1}')
                     begin
	                    ALTER TABLE {0} ADD {1} NVARCHAR(50)
                     end", layout.TableNames, tableName + "ID");
                    sqlHelper.ExecuteNonQuery(sb.ToString());
                }
                layout.LayoutField = layoutField;

                layout.ModifyTime = DateTime.Now;
                layout.ModifyUserID = user.UserID;
                layout.ModifyUserName = user.UserName;
                entities.SaveChanges();
            }
            return Json("");
        }

        public JsonResult SaveNavLayout(string id)
        {
            var sublist = entities.Set<S_UI_Layout>().FirstOrDefault(c => c.ID == id);
            var layout = entities.Set<S_UI_Layout>().FirstOrDefault(c => c.ID == sublist.ParentID);
            if (layout != null)
            {
                layout.LayoutField = Request["layoutField"];
                entities.SaveChanges();
            }
            return Json("");
        }

        public JsonResult SaveTabNavLayout(string id)
        {
            var layout = entities.Set<S_UI_Layout>().FirstOrDefault(c => c.ID == id);
            if (layout != null)
            {
                layout.LayoutField = Request["layoutField"];
                var listDic = JsonHelper.ToObject<List<Dictionary<string, object>>>(layout.LayoutTab);
                if (listDic.Count > 0)
                {
                    string tableName = layout.TableNames;
                    if (tableName.IndexOf('_') >= 0)
                        tableName = tableName.Substring(tableName.LastIndexOf('_') + 1, tableName.Length - tableName.LastIndexOf('_') - 1);
                    foreach (var item in listDic)
                    {
                        string tmplCode = item.GetValue("name");
                        string isFK = item.GetValue("IsFK");
                        var list = entities.Set<S_UI_List>().FirstOrDefault(c => c.Code == tmplCode);
                        if (list != null)
                        {
                            StringBuilder sb = new StringBuilder();
                            SQLHelper sqlHelper = SQLHelper.CreateSqlHelper(list.ConnName);
                            if (isFK == "T")
                            {
                                sb.AppendFormat(@"if not exists(select * from syscolumns where id=object_id('{0}') and name='{1}')
                                 begin
	                                ALTER TABLE {0} ADD {1} NVARCHAR(50)
                                 end", list.TableNames, tableName + "ID");
                            }
                            //                            else {
                            //                                sb.AppendFormat(@"if exists(select * from syscolumns where id=object_id('{0}') and name='{1}')
                            //                                 begin
                            //	                                ALTER TABLE {0} DROP COLUMN {1}
                            //                                 end", list.TableNames, list.TableNames + "ID");
                            //                            }
                            if (!string.IsNullOrEmpty(sb.ToString()))
                                sqlHelper.ExecuteNonQuery(sb.ToString());
                        }
                    }
                }
                entities.SaveChanges();
            }
            return Json("");
        }

        public JsonResult SaveLayoutButton(string id)
        {
            var user = FormulaHelper.GetUserInfo();
            var entity = entities.Set<S_UI_List>().SingleOrDefault(c => c.ID == id);
            if (entity != null)
            {
                entity.LayoutButton = Request["layoutButton"];

                entity.ModifyTime = DateTime.Now;
                entity.ModifyUserID = user.UserID;
                entity.ModifyUserName = user.UserName;
                entities.SaveChanges();
            }
            else
            {
                var layout = entities.Set<S_UI_Layout>().SingleOrDefault(c => c.ID == id);
                layout.LayoutButton = Request["layoutButton"];

                layout.ModifyTime = DateTime.Now; ;
                layout.ModifyUserID = user.UserID;
                layout.ModifyUserName = user.UserName;
                entities.SaveChanges();
            }
            return Json("");
        }


        #region 应用权限

        public string GetUsePosition(string fullID)
        {
            List<string> list = new List<string>();
            var res = entities.Set<S_A_Res>().Where(c => fullID.Contains(c.ID));
            foreach (var item in res)
                list.Add(item.Name);
            return string.Join("/", list.ToArray());
        }
        public JsonResult GetFlowRoleList(MvcAdapter.QueryBuilder qb)
        {
            string categoryID = Request["CategoryID"];
            qb.Add("CategoryID", QueryMethod.In, categoryID);
            return Json(entities.Set<S_UI_RoleRes>().Where(qb).ToList());
        }

        public JsonResult GetMenu(string id)
        {
            return Json(entities.Set<S_UI_RoleRes>().FirstOrDefault(c => c.ID == id));
        }

        public JsonResult SaveObjectRole()
        {
            var entity = UpdateNode<S_A_Res>();

            if (entity.Type == ResType.Data.ToString())
            {
                string data = ResType.Data.ToString();
                if (entities.Set<S_A_Res>().Where(c => c.Url == entity.Url && c.Type == data && c.DataFilter == entity.DataFilter && c.ID != entity.ID).Count() > 0)
                    throw new BusinessException("不能增加重复的数据权限");
            }

            if (entity.Type == ResType.Button.ToString())
            {
                string button = ResType.Button.ToString();
                if (entities.Set<S_A_Res>().Where(c => c.Url == entity.Url && c.Type == button && c.ButtonID == entity.ButtonID && c.ID != entity.ID).Count() > 0)
                    throw new BusinessException("不能增加重复的按钮权限");
            }

            string parentID = Config.Constant.RuleRootID;
            string fullID = Config.Constant.RuleRootID;
            if (!string.IsNullOrEmpty(entity.FullID))
            {
                foreach (string resID in entity.FullID.Split('.'))
                {
                    if (resID != entity.ID && resID != Config.Constant.RuleRootID && resID != Config.Constant.MenuRooID)
                    {
                        var firstRes = entities.Set<S_A_Res>().FirstOrDefault(c => c.ID == resID);
                        if (firstRes != null)
                        {
                            var list = entities.Set<S_A_Res>().Where(c => c.Name == firstRes.Name && c.FullID.StartsWith(Config.Constant.RuleRootID));
                            if (list.Count() == 0)
                            {
                                string id = FormulaHelper.CreateGuid();
                                S_A_Res res = new S_A_Res();
                                res.ID = id;
                                res.Name = firstRes.Name;
                                res.ParentID = parentID;
                                res.FullID = fullID + "." + id;
                                res.Type = ResType.Menu.ToString();
                                res.Url = "";
                                res.SortIndex = 0;
                                entities.Set<S_A_Res>().Add(res);

                                parentID = id;
                                fullID = res.FullID;
                            }
                            else
                            {
                                parentID = list.FirstOrDefault().ID;
                                fullID = list.FirstOrDefault().FullID;
                            }
                        }
                    }
                }
            }
            entity.MenuID = entity.ParentID;
            entity.ParentID = parentID;
            entity.FullID = fullID + "." + entity.ID;

            return base.JsonSaveNode<S_A_Res>(entity);
        }

        public JsonResult GetObjectRole(string fullID)
        {
            var current = entities.Set<S_A_Res>().FirstOrDefault(c => c.FullID == fullID);
            if (current != null)
            {
                var res = entities.Set<S_A_Res>().Where(c => c.MenuID == current.ID);
                if (res.Count() > 0)
                    return Json(res);
                else
                    return Json("");
            }
            else
            {
                return Json("");
            }
        }

        public JsonResult DeleteObjectRole(string id)
        {
            var res = entities.Set<S_A_Res>().FirstOrDefault(c => c.ID == id);
            if (res != null)
            {
                entities.Set<S_A_Res>().Remove(res);
                entities.SaveChanges();
            }
            return Json(true);
        }

        public JsonResult AddMenu()
        {
            var formDic = JsonHelper.ToObject<Dictionary<string, object>>(Request["Data"]);
            string type = formDic.GetValue("Type");
            string resID = formDic.GetValue("FullID");
            string url = formDic.GetValue("Url");
            if (resID.Split('.').Length > 0)
                resID = resID.Split('.')[resID.Split('.').Length - 1];

            if (entities.Set<S_A_Res>().Count(c => c.Url == url) > 0)
            {
                throw new BusinessException("菜单入口已存在！");
            }

            var pMenu = entities.Set<S_A_Res>().FirstOrDefault(c => c.ID == resID);
            if (pMenu == null)
                pMenu = entities.Set<S_A_Res>().SingleOrDefault(c => c.FullID.StartsWith(Config.Constant.MenuRooID) && c.ID == Config.Constant.MenuRooID);
            var menu = new S_A_Res();
            menu.ID = FormulaHelper.CreateGuid();
            menu.Name = formDic.GetValue("Name");
            menu.Url = url;
            menu.ParentID = pMenu.ID;
            menu.FullID = pMenu.FullID + "." + menu.ID;
            menu.Type = "Menu";
            menu.SortIndex = 0;
            entities.Set<S_A_Res>().Add(menu);

            var user = FormulaHelper.GetUserInfo();
            var roleRes = new S_UI_RoleRes();
            roleRes.ID = FormulaHelper.CreateGuid();
            roleRes.Name = formDic.GetValue("Name");
            roleRes.UseID = formDic.GetValue("UseID");
            roleRes.FullID = pMenu.FullID + "." + menu.ID;
            roleRes.FullPath = GetUsePosition(roleRes.FullID) + "/" + roleRes.Name;
            roleRes.Url = formDic.GetValue("Url");
            roleRes.CategoryID = Request["CategoryID"];
            roleRes.CreateUserID = user.UserID;
            roleRes.CreateUserName = user.UserName;
            roleRes.CreateTime = DateTime.Now;
            entities.Set<S_UI_RoleRes>().Add(roleRes);

            if (entities.SaveChanges() > 0)
            {
                List<S_A_User> users = new List<S_A_User>();
                S_A_User us = new S_A_User();
                us.ID = user.UserID;
                us.WorkNo = user.WorkNo;
                us.Name = user.UserName;
                us.DeptName = user.UserOrgName;
                us.DeptID = user.UserOrgID;
                users.Add(us);
                base.JsonAppendRelation<S_A_Res, S_A__UserRes, S_A_User>(roleRes.FullID, JsonHelper.ToJson(users), "true");
            }
            return Json(menu);
        }

        public JsonResult EditMenu(string id)
        {
            var formDic = JsonHelper.ToObject<Dictionary<string, object>>(Request["Data"]);
            string type = formDic.GetValue("Type");
            string resID = "", fullID = formDic.GetValue("FullID");
            string name = formDic.GetValue("Name");
            string url = formDic.GetValue("Url");


            var roleRes = entities.Set<S_UI_RoleRes>().FirstOrDefault(c => c.ID == id);
            if (roleRes.FullID.Split('.').Length > 0)
                resID = roleRes.FullID.Split('.')[roleRes.FullID.Split('.').Length - 1];
            var pMenu = entities.Set<S_A_Res>().FirstOrDefault(c => c.ID == resID);
            if (pMenu == null)
                pMenu = entities.Set<S_A_Res>().SingleOrDefault(c => c.FullID.StartsWith(Config.Constant.MenuRooID) && c.ID == Config.Constant.MenuRooID);
            pMenu.Name = name;
            pMenu.Url = url;
            pMenu.ParentID = fullID.Split('.')[fullID.Split('.').Length - 1];
            pMenu.FullID = fullID.Contains(pMenu.ID) ? fullID : fullID + "." + pMenu.ID;

            roleRes.Name = name;
            roleRes.FullID = fullID.Contains(pMenu.ID) ? fullID : fullID + "." + pMenu.ID;
            roleRes.FullPath = GetUsePosition(roleRes.FullID);
            roleRes.Name = name;
            roleRes.UseID = formDic.GetValue("UseID");
            roleRes.CategoryID = Request["CategoryID"];
            roleRes.Url = url;

            entities.SaveChanges();
            return Json(pMenu);
        }

        public List<UseList> GetAllList(string categoryID)
        {
            List<UseList> useLists = new List<UseList>();
            var lists = entities.Set<S_UI_List>().Where(c => c.CategoryID == categoryID);
            if (lists.Count() > 0)
            {
                foreach (var item in lists)
                {
                    UseList use = new UseList();
                    use.ID = item.ID;
                    use.code = item.Code;
                    use.title = item.Name;
                    use.type = EnumUseType.List.ToString();
                    useLists.Add(use);
                }
            }
            var layouts = entities.Set<S_UI_Layout>().Where(c => c.CategoryID == categoryID);
            if (layouts.Count() > 0)
            {
                string useTypeLists = EnumUseType.Lists.ToString();
                foreach (var item in layouts)
                {
                    if (useTypeLists == item.UseType && !string.IsNullOrEmpty(item.ParentID))
                    {
                        UseList use = new UseList();
                        use.ID = item.ID;
                        use.code = item.Code;
                        use.title = item.Name;
                        use.type = item.UseType;
                        useLists.Add(use);
                    }
                    else if (useTypeLists != item.UseType)
                    {
                        UseList use = new UseList();
                        use.ID = item.ID;
                        use.code = item.Code;
                        use.title = item.Name;
                        use.type = item.UseType;
                        useLists.Add(use);
                    }
                }
            }

            return useLists;
        }

        #endregion

        public JsonResult DeleteUseList(string id)
        {
            var list = entities.Set<S_UI_List>().FirstOrDefault(c => c.ID == id);
            if (list != null)
                entities.Set<S_UI_List>().Remove(list);
            else
            {
                var layout = entities.Set<S_UI_Layout>().FirstOrDefault(c => c.ID == id);
                if (layout != null)
                {
                    var parentLayout = entities.Set<S_UI_Layout>().FirstOrDefault(c => c.ID == layout.ParentID);
                    entities.Set<S_UI_Layout>().Remove(layout);
                    if (parentLayout != null)
                        entities.Set<S_UI_Layout>().Remove(parentLayout);
                }
            }
            entities.SaveChanges();
            return Json("");
        }

        public JsonResult GetForm(string id)
        {
            if (string.IsNullOrEmpty(id))
                return Json("");
            return Json(entities.Set<S_UI_Form>().FirstOrDefault(c => c.ID == id));
        }

        public JsonResult SaveForm(string id, string script)
        {
            var form = entities.Set<S_UI_Form>().FirstOrDefault(c => c.ID == id);
            var formDic = JsonHelper.ToObject<Dictionary<string, object>>(Request["Data"]);
            if (form != null)
            {
                form.Code = formDic.GetValue("Code");
                form.Name = formDic.GetValue("Name");
                form.TableName = formDic.GetValue("TableName");
                form.IsPrint = formDic.GetValue("IsPrint");
                form.ScriptText = script;
                entities.SaveChanges();
            }
            return Json("");
        }

        public virtual JsonResult DeleteNode()
        {
            string fullID = Request["FullID"];
            var role = entities.Set<S_UI_RoleRes>().SingleOrDefault(c => c.FullID == fullID);
            entities.Set<S_UI_RoleRes>().Remove(role);
            entities.SaveChanges();
            return base.JsonDeleteNode<S_A_Res>(fullID);
        }

        public string GetFirstInfo(string categoryID)
        {
            string flowID = "", useID = "", roleID = "";
            var wfEntities = FormulaHelper.GetEntities<WorkflowEntities>();
            var flow = wfEntities.Set<S_WF_DefFlow>().Where(c => c.CategoryID == categoryID);
            var list = entities.Set<S_UI_List>().Where(c => c.CategoryID == categoryID);
            var layouts = entities.Set<S_UI_Layout>().Where(c => c.CategoryID == categoryID && !string.IsNullOrEmpty(c.ParentID));
            var roleRes = entities.Set<S_UI_RoleRes>().Where(c => c.CategoryID == categoryID);

            if (flow.Count() > 0)
            {
                flowID = flow.FirstOrDefault().ID;
            }

            if (list.Count() > 0)
            {
                useID = list.FirstOrDefault().ID;
            }
            else
            {
                if (layouts.Count() > 0)
                {
                    useID = layouts.FirstOrDefault().ID;
                }
            }

            if (roleRes.Count() > 0)
            {
                roleID = roleRes.FirstOrDefault().ID;
            }
            return JsonHelper.ToJson(string.Format("{0},{1},{2}", flowID, useID, roleID));
        }

        public ActionResult FlowNavigation()
        {
            string CategoryID = GetQueryString("CategoryID");
            ViewBag.FirstInfo = GetFirstInfo(CategoryID);
            string categoryCode = GetQueryString("categoryCode");
            S_M_Category UI = entities.Set<S_M_Category>().FirstOrDefault(c => c.ID == CategoryID);
            if (UI != null)
            {
                ViewBag.IsUEditor = UI.IsUEditor;
            }
            else
            {
                ViewBag.IsUEditor = string.Empty;
            }
            return View();
        }

        public ActionResult FlowUseTabs()
        {
            string path = Server.MapPath("/CommonWebResource/Theme/Default/MiniUI/icons");
            List<object> list = new List<object>();
            foreach (string item in System.IO.Directory.EnumerateFiles(path))
            {
                string name = item.Split('\\').Last().Split('.').First();
                list.Add(new { value = "icon-" + name, text = name });
            }
            string id = GetQueryString("ID");
            ViewBag.IconEnum = JsonHelper.ToJson(list);
            var listDef = entities.Set<S_UI_List>().FirstOrDefault(c => c.ID == id);
            ViewBag.IsShowNavRadioButton = listDef != null ? 1 : 0;
            return View();
        }

        public ActionResult FlowUse()
        {
            string id = GetQueryString("ID");
            var listDef = entities.Set<S_UI_List>().FirstOrDefault(c => c.ID == id);
            ViewBag.IsShowNavRadioButton = listDef != null ? 1 : 0;
            return View();
        }

        public ActionResult SettingsFlowList(string id)
        {
            var listDef = entities.Set<S_UI_List>().FirstOrDefault(c => c.ID == id);
            if (listDef != null)
                ViewBag.FieldEnum = listDef.LayoutField;
            var layoutDef = entities.Set<S_UI_Layout>().FirstOrDefault(c => c.ID == id);
            if (layoutDef != null)
                ViewBag.FieldEnum = layoutDef.LayoutField;
            return View();
        }


        public ActionResult SettingsForm()
        {
            ViewBag.EnumCategory = JsonHelper.ToJson(entities.Set<S_M_Category>());
            return View();
        }

        public ActionResult FlowRole()
        {
            string categoryID = Request["CategoryID"];
            var lists = entities.Set<S_UI_List>().Where(c => c.CategoryID == categoryID);
            var layouts = entities.Set<S_UI_Layout>().Where(c => c.CategoryID == categoryID && string.IsNullOrEmpty(c.ParentID));
            List<S_UI_Layout> menus = new List<S_UI_Layout>();
            if (lists.Count() > 0)
            {
                foreach (var item in lists)
                {
                    S_UI_Layout list = new S_UI_Layout();
                    list.ID = item.ID;
                    list.Type = EnumUseType.List.ToString();
                    list.Name = item.Name;
                    menus.Add(list);
                }
            }
            if (layouts.Count() > 0)
            {
                foreach (var item in layouts)
                {
                    S_UI_Layout list = new S_UI_Layout();
                    list.ID = item.ID;
                    list.Type = EnumUseType.Lists.ToString();
                    list.Name = item.Name;
                    menus.Add(list);
                }
            }
            ViewBag.Menus = menus;
            return View();
        }

        public ActionResult UEditorFlowForm()
        {
            return View();
        }
    }

    public enum EnumUseType
    {
        Form,//表单
        List,//列表
        Lists, //导航列表
        ListTabs, //导航Tab
        Tabs, //Tab
        TreeCustom, //树导航自定义
        TreeGridCustom //树列表导航自定义
    }

    public class UseList
    {
        public string ID { get; set; }
        public string code { get; set; }
        public string title { get; set; }
        public string type { get; set; }
        public DateTime modifyTime { get; set; }
        public string url { get; set; }
    }
}
